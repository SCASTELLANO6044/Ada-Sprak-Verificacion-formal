module Standard__integer
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type integer = <range -2147483648 2147483647>
  
  val function first : int
    ensures { result = ((- 2147483648) : int) }
  
  val function last : int
    ensures { result = (2147483647 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = integer,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type integer__ref = { mutable integer__content : integer }
  
  function integer__ref_integer__content__projection (a: integer__ref) : integer =
    a.integer__content
  
  meta "model_projection" function integer__ref_integer__content__projection
  
  meta "inline:no" function integer__ref_integer__content__projection
  
  val integer__havoc (x: integer__ref) : unit
    writes { x }
end

module Standard__integer___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__integer as Standard__integer
  
  predicate dynamic_invariant (temp___expr_18: int) (temp___is_init_14: bool) (temp___skip_constant_15: bool) (temp___do_toplevel_16: bool) (temp___do_typ_inv_17: bool) =
    if ((temp___is_init_14 = True) \/
          (Standard__integer.first <= Standard__integer.last)) then
      (((Standard__integer.dynamic_property Standard__integer.first)
          Standard__integer.last)
         temp___expr_18)
    else true
  
  val dynamic_invariant (temp___expr_18: int) (temp___is_init_14: bool) (temp___skip_constant_15: bool) (temp___do_toplevel_16: bool) (temp___do_typ_inv_17: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_18 : int))
                      (temp___is_init_14 : bool))
                     (temp___skip_constant_15 : bool))
                    (temp___do_toplevel_16 : bool))
                   (temp___do_typ_inv_17 : bool)) }
  
  predicate default_initial_assumption (temp___expr_19: int) (temp___skip_top_level_20: bool) =
    true
  
  val default_initial_assumption (temp___expr_19: int) (temp___skip_top_level_20: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_19 : int))
                   (temp___skip_top_level_20 : bool)) }
end

module Pkg_subtract__subtract__first_operand
  use _gnatprove_standard.Main
  use int.Int
  
  val function first_operand : int
end

module Pkg_subtract__subtract__second_operand
  use _gnatprove_standard.Main
  use int.Int
  
  val function second_operand : int
end

module Pkg_subtract__subtract__result
  use _gnatprove_standard.Main
  use int.Int
  
  val result__ : int__ref
end

module Pkg_add__add
  use _gnatprove_standard.Main
  use int.Int
  
  val function add (first_operand: int) (second_operand: int) : int
  
  val predicate add__function_guard (temp___result_161: int) (first_operand: int) (second_operand: int)
end

module Pkg_add__add___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__integer___axiom as Standard__integer___axiom
  use Pkg_add__add as Pkg_add__add
  
  val add (first_operand: int) (second_operand: int) : int
    requires { if ((first_operand >= (0 : int)) /\
                     (second_operand >= (0 : int))) then
                 ([@GP_Pretty_Ada:976]
                  (first_operand <= ((2147483647 : int) - second_operand)))
               else
                 (if ((first_operand <= (0 : int)) /\
                        (second_operand <= (0 : int))) then
                    ([@GP_Pretty_Ada:990]
                     (first_operand
                        >= (((- 2147483648) : int) - second_operand)))
                  else ([@GP_Pretty_Ada:1087] true))
    }
    ensures { (((result = ((Pkg_add__add.add first_operand) second_operand)) /\
                  (((Pkg_add__add.add__function_guard result) first_operand)
                     second_operand)) /\
                 ((((((Standard__integer___axiom.dynamic_invariant result)
                        True)
                       False)
                      True)
                     True) /\
                    ([@GP_Pretty_Ada:1073]
                     (result = (first_operand + second_operand))))) }
  
  axiom add__post_axiom:
    forall first_operand : int, second_operand : int
          [(Pkg_add__add.add first_operand) second_operand].
      ((((((((Standard__integer___axiom.dynamic_invariant first_operand) True)
              True)
             True)
            True) /\
           (((((Standard__integer___axiom.dynamic_invariant second_operand)
                 True)
                True)
               True)
              True)) /\
          (if ((first_operand >= (0 : int)) /\ (second_operand >= (0 : int))) then
             ([@GP_Pretty_Ada:976]
              (first_operand <= ((2147483647 : int) - second_operand)))
           else
             (if ((first_operand <= (0 : int)) /\
                    (second_operand <= (0 : int))) then
                ([@GP_Pretty_Ada:990]
                 (first_operand >= (((- 2147483648) : int) - second_operand)))
              else ([@GP_Pretty_Ada:1087] true)))) ->
         (let result = (Pkg_add__add.add first_operand) second_operand in
          if (((Pkg_add__add.add__function_guard result) first_operand)
                second_operand) then
            ((([@GP_Pretty_Ada:1073]
               (result = (first_operand + second_operand))) /\
                (((((Standard__integer___axiom.dynamic_invariant result) True)
                     False)
                    True)
                   True)) /\
               true)
          else true))
end

module Pkg_subtract__subtract__first_operand___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Pkg_subtract__subtract__second_operand___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Pkg_subtract__subtract__result___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Pkg_subtract__subtract__subprogram_def
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use _gnatprove_standard.Boolean as Boolean
  use Standard__integer as Standard__integer
  use Standard__integer___axiom as Standard__integer___axiom
  use Pkg_subtract__subtract__first_operand as Pkg_subtract__subtract__first_operand
  use Pkg_subtract__subtract__second_operand as Pkg_subtract__subtract__second_operand
  use Pkg_subtract__subtract__result as Pkg_subtract__subtract__result
  use Pkg_add__add___axiom as Pkg_add__add___axiom
  use Standard__integer___axiom as Standard__integer___axiom
  use Standard__integer___axiom as Standard__integer___axiom
  use Pkg_subtract__subtract__first_operand___axiom as Pkg_subtract__subtract__first_operand___axiom
  use Pkg_subtract__subtract__second_operand___axiom as Pkg_subtract__subtract__second_operand___axiom
  use Pkg_subtract__subtract__result___axiom as Pkg_subtract__subtract__result___axiom
  use Pkg_add__add___axiom as Pkg_add__add___axiom
  
  let def (__void_param : unit)
    requires { [#"pkg_subtract.ads" 3 0 0] true }
    ensures { [#"pkg_subtract.ads" 3 0 0]
              [#"pkg_subtract.ads" 18 0 0]
              [@GP_Reason:VC_POSTCONDITION]
              [@GP_Sloc:pkg_subtract.ads:18:18]
              [@GP_Shape:pragargs__cmp]
              [@comment:      Post    => Result = First_Operand - Second_Operand;                  ^ pkg_subtract.ads:18:18:VC_POSTCONDITION]
              [@model_vc_post]
              [@GP_Id:5]
              [@GP_Sloc:pkg_subtract.ads:18:18]
              [@GP_Pretty_Ada:1150]
              ((Pkg_subtract__subtract__result.result__.int__content)
                 = (Pkg_subtract__subtract__first_operand.first_operand
                      - Pkg_subtract__subtract__second_operand.second_operand)) }
  = [@vc:divergent]
    (([@GNAT-comment:Assume dynamic invariants of inputs of the subprogram pkg_subtract.ads:3]
      ());
     assume {
       ((((Standard__integer___axiom.dynamic_invariant
             Pkg_subtract__subtract__first_operand.first_operand)
            True)
           False)
          True)
         True };
     assume {
       ((((Standard__integer___axiom.dynamic_invariant
             Pkg_subtract__subtract__second_operand.second_operand)
            True)
           False)
          True)
         True };
     assume {
       ((((Standard__integer___axiom.dynamic_invariant
             (Pkg_subtract__subtract__result.result__.int__content))
            False)
           False)
          True)
         True };
     ([@GNAT-comment:Assume moved pointers in outputs of the subprogram pkg_subtract.ads:3]
      ());
     ([@GNAT-comment:Check for RTE in the Pre of the subprogram pkg_subtract.ads:3]
      ());
     (begin
        ensures { true }
        let _ =
          let _ =
            if ((Pkg_subtract__subtract__first_operand.first_operand
                   >= (0 : int))
                 &&
                  (Pkg_subtract__subtract__second_operand.second_operand
                     <= (0 : int))) then
              (Pkg_subtract__subtract__first_operand.first_operand
                 <= ([#"pkg_subtract.ads" 13 0 0]
                     [@comment:                    First_Operand <= Integer'Last + Second_Operand                                                   ^ pkg_subtract.ads:13:51:VC_OVERFLOW_CHECK]
                     [@vc:annotation]
                     [@GP_Reason:VC_OVERFLOW_CHECK]
                     [@GP_Shape:pragargs__if__cmp__add]
                     [@GP_Id:3]
                     [@GP_Sloc:pkg_subtract.ads:13:51]
                     (Standard__integer.range_check_
                        ((2147483647 : int)
                           + Pkg_subtract__subtract__second_operand.second_operand))))
            else
              (if ((Pkg_subtract__subtract__first_operand.first_operand
                      <= (0 : int))
                    &&
                     (Pkg_subtract__subtract__second_operand.second_operand
                        >= (0 : int))) then
                 (Pkg_subtract__subtract__first_operand.first_operand
                    >= ([#"pkg_subtract.ads" 17 0 0]
                        [@GP_Sloc:pkg_subtract.ads:17:53]
                        [@vc:annotation]
                        [@GP_Reason:VC_OVERFLOW_CHECK]
                        [@GP_Shape:pragargs__if__if__cmp__add]
                        [@comment:                     First_Operand >= Integer'First + Second_Operand),                                                     ^ pkg_subtract.ads:17:53:VC_OVERFLOW_CHECK]
                        [@GP_Id:4]
                        (Standard__integer.range_check_
                           (((- 2147483648) : int)
                              + Pkg_subtract__subtract__second_operand.second_operand))))
               else (Boolean.of_int (1 : int))) in
          () in
        ()
      end);
     ([@GNAT-comment:Assume Pre of the subprogram pkg_subtract.ads:3] ());
     assume {
       if ((Pkg_subtract__subtract__first_operand.first_operand >= (0 : int)) /\
             (Pkg_subtract__subtract__second_operand.second_operand
                <= (0 : int))) then
         ([@GP_Pretty_Ada:897]
          (Pkg_subtract__subtract__first_operand.first_operand
             <= ((2147483647 : int)
                   + Pkg_subtract__subtract__second_operand.second_operand)))
       else
         (if ((Pkg_subtract__subtract__first_operand.first_operand
                 <= (0 : int)) /\
                (Pkg_subtract__subtract__second_operand.second_operand
                   >= (0 : int))) then
            ([@GP_Pretty_Ada:911]
             (Pkg_subtract__subtract__first_operand.first_operand
                >= (((- 2147483648) : int)
                      + Pkg_subtract__subtract__second_operand.second_operand)))
          else ([@GP_Pretty_Ada:1164] true)) };
     (try
        ([@GP_Sloc:pkg_subtract.adb:10:17] [#"pkg_subtract.adb" 10 0 0] ());
        ([@GP_Sloc:pkg_subtract.adb:10:14]
         [#"pkg_subtract.adb" 10 0 0]
         [#"pkg_subtract.adb" 10 0 0]
         (Pkg_subtract__subtract__result.result__.int__content <-
            ([#"pkg_subtract.adb" 10 0 0]
             [@GP_Sloc:pkg_subtract.adb:10:17]
             [@GP_Reason:VC_PRECONDITION]
             [@GP_Shape:result_assign__call_add]
             [@vc:annotation]
             [@comment:      Result := Add(First_Operand, -Second_Operand);                 ^ pkg_subtract.adb:10:17:VC_PRECONDITION]
             [@GP_Id:1]
             ((Pkg_add__add___axiom.add
                 Pkg_subtract__subtract__first_operand.first_operand)
                ([#"pkg_subtract.adb" 10 0 0]
                 [@GP_Shape:result_assign__call_add__minus]
                 [@vc:annotation]
                 [@GP_Reason:VC_OVERFLOW_CHECK]
                 [@comment:      Result := Add(First_Operand, -Second_Operand);                                    ^ pkg_subtract.adb:10:36:VC_OVERFLOW_CHECK]
                 [@GP_Sloc:pkg_subtract.adb:10:36]
                 [@GP_Id:0]
                 (Standard__integer.range_check_
                    (( -_ )
                       Pkg_subtract__subtract__second_operand.second_operand)))))));
        (raise Return__exc)
      with Return__exc -> ()
      end);
     (begin
        ensures { true }
        let _ =
          let _ =
            ((Pkg_subtract__subtract__result.result__.int__content)
               = ([#"pkg_subtract.ads" 18 0 0]
                  [@GP_Sloc:pkg_subtract.ads:18:41]
                  [@vc:annotation]
                  [@comment:      Post    => Result = First_Operand - Second_Operand;                                         ^ pkg_subtract.ads:18:41:VC_OVERFLOW_CHECK]
                  [@GP_Reason:VC_OVERFLOW_CHECK]
                  [@GP_Id:2]
                  [@GP_Shape:pragargs__cmp__sub]
                  (Standard__integer.range_check_
                     (Pkg_subtract__subtract__first_operand.first_operand
                        - Pkg_subtract__subtract__second_operand.second_operand)))) in
          () in
        ()
      end))
end

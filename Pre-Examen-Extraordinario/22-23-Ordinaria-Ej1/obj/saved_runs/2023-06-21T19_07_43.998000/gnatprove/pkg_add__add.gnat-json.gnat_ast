(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type integer  = <range -2147483648 2147483647>
  
  function   first () requires { True } ensures  { True } returns
    int = -2147483648
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = integer,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type integer__ref  = { mutable integer__content : integer }
  
  function   integer__ref_integer__content__projection (a : integer__ref)
    requires {  } ensures  {  } returns integer = a.integer__content
  
  meta model_projection function integer__ref_integer__content__projection
  
  meta inline:no function integer__ref_integer__content__projection
  
  function   integer__havoc (x : integer__ref) requires {  } ensures  {  }
    returns unit

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type natural  = <range 0 2147483647>
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = natural,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type natural__ref  = { mutable natural__content : natural }
  
  function   natural__ref_natural__content__projection (a : natural__ref)
    requires {  } ensures  {  } returns natural = a.natural__content
  
  meta model_projection function natural__ref_natural__content__projection
  
  meta inline:no function natural__ref_natural__content__projection
  
  function   natural__havoc (x : natural__ref) requires {  } ensures  {  }
    returns unit

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__natural
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_46) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_42) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_43) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_44) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_45) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_42) = True) \/
          (Standard__natural.first <= Standard__natural.last))
       then
       (Standard__natural.dynamic_property Standard__natural.first
          Standard__natural.last ([mlw:proxy_symbol]
          [introduced] temp___expr_46))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_47) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_48) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for defining the constant "a" defined at pkg_add.ads:4, created in Gnat2Why.Decls.Translate_Constant *)
module Pkg_add__add__a
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  function [name:A] [model_trace:863] [sloc:pkg_add.ads:4] a () requires {  }
    ensures  {  } returns int

end

(* Module for defining the constant "b" defined at pkg_add.ads:5, created in Gnat2Why.Decls.Translate_Constant *)
module Pkg_add__add__b
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  function [model_trace:866] [name:B] [sloc:pkg_add.ads:5] b () requires {  }
    ensures  {  } returns int

end

(* Module for defining the constant "c" defined at pkg_add.ads:6, created in Gnat2Why.Decls.Translate_Constant *)
module Pkg_add__add__c
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  function [model_trace:869] [name:C] [sloc:pkg_add.ads:6] c () requires {  }
    ensures  {  } returns int

end

(* Module for defining the constant "d" defined at pkg_add.ads:7, created in Gnat2Why.Decls.Translate_Constant *)
module Pkg_add__add__d
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  function [name:D] [model_trace:872] [sloc:pkg_add.ads:7] d () requires {  }
    ensures  {  } returns int

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_18) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_14) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_15) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_16) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_17) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_14) = True) \/
          (Standard__integer.first <= Standard__integer.last))
       then
       (Standard__integer.dynamic_property Standard__integer.first
          Standard__integer.last ([mlw:proxy_symbol]
          [introduced] temp___expr_18))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_19) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_20) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving an empty axiom for the entity "a" defined at pkg_add.ads:4, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pkg_add__add__a___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "b" defined at pkg_add.ads:5, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pkg_add__add__b___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "c" defined at pkg_add.ads:6, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pkg_add__add__c___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "d" defined at pkg_add.ads:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pkg_add__add__d___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module for checking contracts and absence of run-time errors in subprogram "add" defined at pkg_add.ads:3, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Pkg_add__add__subprogram_def
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        _gnatprove_standard.Int_Division
  use        _gnatprove_standard.Boolean
  use        Standard__integer
  use        Standard__natural___axiom
  use        Pkg_add__add__a
  use        Pkg_add__add__b
  use        Pkg_add__add__c
  use        Pkg_add__add__d
  use        Standard__natural___axiom
  use        Standard__integer___axiom
  use        Pkg_add__add__a___axiom
  use        Pkg_add__add__b___axiom
  use        Pkg_add__add__c___axiom
  use        Pkg_add__add__d___axiom
  
  val pkg_add__add__result [model_projected] [name:Add]
  [model_trace:862@result] : int
  
  function [GP_Subp:pkg_add.ads:3] [sloc:pkg_add.ads:3] def
    (__void_param : unit) requires { True } ensures 
    { ([sloc:pkg_add.ads:18] ([GP_Reason:VC_POSTCONDITION] [GP_Id:12]
                             [comment:       Post => Add'Result = (D*C)/(A+B) and then Add'Result in 40 .. 130;                ^ pkg_add.ads:18:16:VC_POSTCONDITION]
                             [GP_Sloc:pkg_add.ads:18:16]
                             [GP_Shape:pragargs__andthen]
                             [model_vc_post] (([GP_Pretty_Ada:953]
                                              [GP_Sloc:pkg_add.ads:18:16] (
                                              !pkg_add__add__result
                                                = (_gnatprove_standard.Int_Division.div
                                                     (Pkg_add__add__d.d
                                                        * Pkg_add__add__c.c)
                                                     (Pkg_add__add__a.a
                                                        + Pkg_add__add__b.b))))
                                                /\
                                                ([GP_Sloc:pkg_add.ads:18:50]
                                                [GP_Pretty_Ada:966] (
                                                (40 <= !pkg_add__add__result)
                                                  /\
                                                  (!pkg_add__add__result
                                                     <= 130)))))) } returns
     = (* Assume dynamic invariants of inputs of the subprogram pkg_add.ads:3 *);
        assume
        { (Standard__natural___axiom.dynamic_invariant Pkg_add__add__a.a True
             False True True) };
        assume
        { (Standard__natural___axiom.dynamic_invariant Pkg_add__add__b.b True
             False True True) };
        assume
        { (Standard__natural___axiom.dynamic_invariant Pkg_add__add__c.c True
             False True True) };
        assume
        { (Standard__natural___axiom.dynamic_invariant Pkg_add__add__d.d True
             False True True) };
        (* Assume moved pointers in outputs of the subprogram pkg_add.ads:3 *);
        (* Check for RTE in the Pre of the subprogram pkg_add.ads:3 *);
        abstract ensures
        { True } begin  (let _ =
                       ((((if
                          (_gnatprove_standard.Boolean.andb
                             (Pkg_add__add__a.a > 0) (Pkg_add__add__b.b > 0))
                          then
                          (Pkg_add__add__a.a
                             <= ([sloc:pkg_add.ads:13] ([GP_Shape:pragargs__andthen__andthen__andthen__if__cmp__sub]
                                                       [vc:annotation]
                                                       [GP_Reason:VC_OVERFLOW_CHECK]
                                                       [GP_Sloc:pkg_add.ads:13:40]
                                                       [comment:                     A <= Natural'Last - B) and then                                        ^ pkg_add.ads:13:40:VC_OVERFLOW_CHECK]
                                                       [GP_Id:6] (Standard__integer.range_check_
                                                                    (
                                                                    2147483647
                                                                    - Pkg_add__add__b.b)))))
                           else (_gnatprove_standard.Boolean.of_int 1)) &&
                            (if
                            (_gnatprove_standard.Boolean.andb
                               (Pkg_add__add__d.d > 0)
                               (Pkg_add__add__c.c > 0))
                            then
                            (Pkg_add__add__d.d
                               <= ([sloc:pkg_add.ads:15] ([GP_Shape:pragargs__andthen__andthen__andthen__if__cmp__div]
                                                         [vc:annotation]
                                                         [GP_Reason:VC_DIVISION_CHECK]
                                                         [GP_Sloc:pkg_add.ads:15:43]
                                                         [comment:                        D <= Natural'Last / C) and then                                           ^ pkg_add.ads:15:43:VC_DIVISION_CHECK]
                                                         [GP_Id:7] (_gnatprove_standard.Int_Division.div_
                                                                    2147483647
                                                                    Pkg_add__add__c.c))))
                             else (_gnatprove_standard.Boolean.of_int 1))) &&
                           (([sloc:pkg_add.ads:16] ([comment:                   (A+B) /= 0 and then                      ^ pkg_add.ads:16:22:VC_OVERFLOW_CHECK]
                                                   [GP_Shape:pragargs__andthen__andthen__cmp__add]
                                                   [vc:annotation]
                                                   [GP_Reason:VC_OVERFLOW_CHECK]
                                                   [GP_Sloc:pkg_add.ads:16:22]
                                                   [GP_Id:8] (Standard__integer.range_check_
                                                                (Pkg_add__add__a.a
                                                                   + Pkg_add__add__b.b))))
                              <> 0)) && (let ([mlw:proxy_symbol]
                          [introduced] temp___164) =
                          ([sloc:pkg_add.ads:17] ([GP_Id:11]
                                                 [GP_Shape:pragargs__andthen__in__div]
                                                 [vc:annotation]
                                                 [GP_Reason:VC_DIVISION_CHECK]
                                                 [comment:                 (D*C)/(A+B) in 40 .. 130),                       ^ pkg_add.ads:17:23:VC_DIVISION_CHECK]
                                                 [GP_Sloc:pkg_add.ads:17:23] (
                                                 _gnatprove_standard.Int_Division.div_
                                                   ([sloc:pkg_add.ads:17] 
                                                   ([comment:                 (D*C)/(A+B) in 40 .. 130),                    ^ pkg_add.ads:17:20:VC_OVERFLOW_CHECK]
                                                   [vc:annotation]
                                                   [GP_Reason:VC_OVERFLOW_CHECK]
                                                   [GP_Shape:pragargs__andthen__in__div__mult]
                                                   [GP_Sloc:pkg_add.ads:17:20]
                                                   [GP_Id:9] (Standard__integer.range_check_
                                                                (Pkg_add__add__d.d
                                                                   * Pkg_add__add__c.c))))
                                                   ([sloc:pkg_add.ads:17] 
                                                   ([GP_Id:10]
                                                   [vc:annotation]
                                                   [GP_Reason:VC_OVERFLOW_CHECK]
                                                   [comment:                 (D*C)/(A+B) in 40 .. 130),                          ^ pkg_add.ads:17:26:VC_OVERFLOW_CHECK]
                                                   [GP_Shape:pragargs__andthen__in__div__add]
                                                   [GP_Sloc:pkg_add.ads:17:26] (
                                                   Standard__integer.range_check_
                                                     (Pkg_add__add__a.a
                                                        + Pkg_add__add__b.b)))))))
                          in
                          (_gnatprove_standard.Boolean.andb
                             (40 <= ([mlw:proxy_symbol]
                                [introduced] temp___164))
                             (([mlw:proxy_symbol] [introduced] temp___164)
                                <= 130))))
                       in ())  end;
        (* Assume Pre of the subprogram pkg_add.ads:3 *);
        assume
        { ((((if ((Pkg_add__add__a.a > 0) /\ (Pkg_add__add__b.b > 0)) then
             ([GP_Pretty_Ada:908] (Pkg_add__add__a.a
                                     <= (2147483647 - Pkg_add__add__b.b)))
              else ([GP_Pretty_Ada:1080] True)) /\
               (if ((Pkg_add__add__d.d > 0) /\ (Pkg_add__add__c.c > 0)) then
               ([GP_Pretty_Ada:924] (Pkg_add__add__d.d
                                       <= (_gnatprove_standard.Int_Division.div
                                             2147483647 Pkg_add__add__c.c)))
                else ([GP_Pretty_Ada:1084] True))) /\
              ([GP_Pretty_Ada:935] ((Pkg_add__add__a.a + Pkg_add__add__b.b)
                                      <> 0))) /\
             ([GP_Pretty_Ada:945] (let ([mlw:proxy_symbol]
             [introduced] temp___165) =
             (_gnatprove_standard.Int_Division.div
                (Pkg_add__add__d.d * Pkg_add__add__c.c)
                (Pkg_add__add__a.a + Pkg_add__add__b.b))
             in
             ((40 <= ([mlw:proxy_symbol] [introduced] temp___165)) /\
                (([mlw:proxy_symbol] [introduced] temp___165) <= 130))))) };
        (try
        ();
          ([GP_Sloc:pkg_add.adb:9:7] ([sloc:pkg_add.adb:9] (
                                     pkg_add__add__result :=
                                     ( ([sloc:pkg_add.adb:9] ([GP_Shape:return__div]
                                                             [vc:annotation]
                                                             [GP_Reason:VC_DIVISION_CHECK]
                                                             [GP_Sloc:pkg_add.adb:9:22]
                                                             [comment:      return (D * C) / (A + B);                      ^ pkg_add.adb:9:22:VC_DIVISION_CHECK]
                                                             [GP_Id:2] (
                                                             _gnatprove_standard.Int_Division.div_
                                                               ([sloc:pkg_add.adb:9] 
                                                               ([vc:annotation]
                                                               [GP_Reason:VC_OVERFLOW_CHECK]
                                                               [comment:      return (D * C) / (A + B);                 ^ pkg_add.adb:9:17:VC_OVERFLOW_CHECK]
                                                               [GP_Id:0]
                                                               [GP_Shape:return__div__mult]
                                                               [GP_Sloc:pkg_add.adb:9:17] (
                                                               Standard__integer.range_check_
                                                                 (Pkg_add__add__d.d
                                                                    * Pkg_add__add__c.c))))
                                                               ([sloc:pkg_add.adb:9] 
                                                               ([vc:annotation]
                                                               [GP_Reason:VC_OVERFLOW_CHECK]
                                                               [GP_Shape:return__div__add]
                                                               [GP_Sloc:pkg_add.adb:9:27]
                                                               [comment:      return (D * C) / (A + B);                           ^ pkg_add.adb:9:27:VC_OVERFLOW_CHECK]
                                                               [GP_Id:1] (
                                                               Standard__integer.range_check_
                                                                 (Pkg_add__add__a.a
                                                                    + Pkg_add__add__b.b)))))))));
                                     raise Return__exc));
          raise Return__exc with | Return__exc  -> ());
        abstract ensures
        { True } begin  (let _ =
                       ((!pkg_add__add__result
                           = ([sloc:pkg_add.ads:18] ([vc:annotation]
                                                    [GP_Reason:VC_DIVISION_CHECK]
                                                    [comment:       Post => Add'Result = (D*C)/(A+B) and then Add'Result in 40 .. 130;                                  ^ pkg_add.ads:18:34:VC_DIVISION_CHECK]
                                                    [GP_Shape:pragargs__andthen__cmp__div]
                                                    [GP_Id:5]
                                                    [GP_Sloc:pkg_add.ads:18:34] (
                                                    _gnatprove_standard.Int_Division.div_
                                                      ([sloc:pkg_add.ads:18] 
                                                      ([vc:annotation]
                                                      [GP_Reason:VC_OVERFLOW_CHECK]
                                                      [comment:       Post => Add'Result = (D*C)/(A+B) and then Add'Result in 40 .. 130;                               ^ pkg_add.ads:18:31:VC_OVERFLOW_CHECK]
                                                      [GP_Id:3]
                                                      [GP_Sloc:pkg_add.ads:18:31]
                                                      [GP_Shape:pragargs__andthen__cmp__div__mult] (
                                                      Standard__integer.range_check_
                                                        (Pkg_add__add__d.d
                                                           * Pkg_add__add__c.c))))
                                                      ([sloc:pkg_add.ads:18] 
                                                      ([GP_Shape:pragargs__andthen__cmp__div__add]
                                                      [GP_Sloc:pkg_add.ads:18:37]
                                                      [vc:annotation]
                                                      [GP_Reason:VC_OVERFLOW_CHECK]
                                                      [comment:       Post => Add'Result = (D*C)/(A+B) and then Add'Result in 40 .. 130;                                     ^ pkg_add.ads:18:37:VC_OVERFLOW_CHECK]
                                                      [GP_Id:4] (Standard__integer.range_check_
                                                                   (Pkg_add__add__a.a
                                                                    + Pkg_add__add__b.b))))))))
                          &&
                          (_gnatprove_standard.Boolean.andb
                             (40 <= !pkg_add__add__result)
                             (!pkg_add__add__result <= 130)))
                       in ())  end;
        !pkg_add__add__result

end

module Standard__integer
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type integer = <range -2147483648 2147483647>
  
  val function first : int
    ensures { result = ((- 2147483648) : int) }
  
  val function last : int
    ensures { result = (2147483647 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = integer,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type integer__ref = { mutable integer__content : integer }
  
  function integer__ref_integer__content__projection (a: integer__ref) : integer =
    a.integer__content
  
  meta "model_projection" function integer__ref_integer__content__projection
  
  meta "inline:no" function integer__ref_integer__content__projection
  
  val integer__havoc (x: integer__ref) : unit
    writes { x }
end

module Standard__integer___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__integer as Standard__integer
  
  predicate dynamic_invariant (temp___expr_18: int) (temp___is_init_14: bool) (temp___skip_constant_15: bool) (temp___do_toplevel_16: bool) (temp___do_typ_inv_17: bool) =
    if ((temp___is_init_14 = True) \/
          (Standard__integer.first <= Standard__integer.last)) then
      (((Standard__integer.dynamic_property Standard__integer.first)
          Standard__integer.last)
         temp___expr_18)
    else true
  
  val dynamic_invariant (temp___expr_18: int) (temp___is_init_14: bool) (temp___skip_constant_15: bool) (temp___do_toplevel_16: bool) (temp___do_typ_inv_17: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_18 : int))
                      (temp___is_init_14 : bool))
                     (temp___skip_constant_15 : bool))
                    (temp___do_toplevel_16 : bool))
                   (temp___do_typ_inv_17 : bool)) }
  
  predicate default_initial_assumption (temp___expr_19: int) (temp___skip_top_level_20: bool) =
    true
  
  val default_initial_assumption (temp___expr_19: int) (temp___skip_top_level_20: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_19 : int))
                   (temp___skip_top_level_20 : bool)) }
end

module Example__next_value__2__x
  use _gnatprove_standard.Main
  use int.Int
  
  val x : int__ref
end

module Example__next_value__2__x___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Example__next_value__2__subprogram_def
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__integer as Standard__integer
  use Standard__integer___axiom as Standard__integer___axiom
  use Example__next_value__2__x as Example__next_value__2__x
  use Standard__integer___axiom as Standard__integer___axiom
  use Standard__integer___axiom as Standard__integer___axiom
  use Example__next_value__2__x___axiom as Example__next_value__2__x___axiom
  
  let def (__void_param : unit)
    requires { [#"example.ads" 14 0 0] true }
    ensures { [#"example.ads" 14 0 0]
              [#"example.ads" 18 0 0]
              [@GP_Reason:VC_POSTCONDITION]
              [@GP_Shape:pragargs__cmp]
              [@comment:     Post => X = X'Old + 1;              ^ example.ads:18:14:VC_POSTCONDITION]
              [@model_vc_post]
              [@GP_Id:5]
              [@GP_Sloc:example.ads:18:14]
              [@GP_Pretty_Ada:1025]
              [@GP_Sloc:example.ads:18:14]
              ((Example__next_value__2__x.x.int__content)
                 = ((old (Example__next_value__2__x.x.int__content))
                      + (1 : int))) }
  = [@vc:divergent]
    (([@GNAT-comment:Assume dynamic invariants of inputs of the subprogram example.ads:14]
      ());
     assume {
       ((((Standard__integer___axiom.dynamic_invariant
             (Example__next_value__2__x.x.int__content))
            True)
           False)
          True)
         True };
     ([@GNAT-comment:Assume moved pointers in outputs of the subprogram example.ads:14]
      ());
     ([@GNAT-comment:Check for RTE in the Pre of the subprogram example.ads:14]
      ());
     (begin
        ensures { true }
        let _ =
          let _ =
            ((Example__next_value__2__x.x.int__content)
               <= (2147483646 : int)) in
          () in
        ()
      end);
     ([@GNAT-comment:Assume Pre of the subprogram example.ads:14] ());
     assume {
       [@GP_Pretty_Ada:1012]
       ((Example__next_value__2__x.x.int__content) <= (2147483646 : int)) };
     (let temp___old_163 = Example__next_value__2__x.x.int__content in
      (try
         ([@GP_Sloc:example.adb:11:9]
          [#"example.adb" 11 0 0]
          [#"example.adb" 11 0 0]
          (Example__next_value__2__x.x.int__content <-
             ([#"example.adb" 11 0 0]
              [@comment:      X := X + 1;              ^ example.adb:11:14:VC_OVERFLOW_CHECK]
              [@vc:annotation]
              [@GP_Reason:VC_OVERFLOW_CHECK]
              [@GP_Sloc:example.adb:11:14]
              [@GP_Shape:x_assign__add]
              [@GP_Id:3]
              (Standard__integer.range_check_
                 ((Example__next_value__2__x.x.int__content) + (1 : int))))));
         (raise Return__exc)
       with Return__exc -> ()
       end);
      (begin
         ensures { true }
         let _ =
           let _ =
             ((Example__next_value__2__x.x.int__content)
                = ([#"example.ads" 18 0 0]
                   [@comment:     Post => X = X'Old + 1;                        ^ example.ads:18:24:VC_OVERFLOW_CHECK]
                   [@vc:annotation]
                   [@GP_Reason:VC_OVERFLOW_CHECK]
                   [@GP_Shape:pragargs__cmp__add]
                   [@GP_Sloc:example.ads:18:24]
                   [@GP_Id:4]
                   (Standard__integer.range_check_
                      (temp___old_163 + (1 : int))))) in
           () in
         ()
       end)))
end

module Standard__integer
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type integer = <range -2147483648 2147483647>
  
  val function first : int
    ensures { result = ((- 2147483648) : int) }
  
  val function last : int
    ensures { result = (2147483647 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = integer,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type integer__ref = { mutable integer__content : integer }
  
  function integer__ref_integer__content__projection (a: integer__ref) : integer =
    a.integer__content
  
  meta "model_projection" function integer__ref_integer__content__projection
  
  meta "inline:no" function integer__ref_integer__content__projection
  
  val integer__havoc (x: integer__ref) : unit
    writes { x }
end

module Standard__integer___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__integer as Standard__integer
  
  predicate dynamic_invariant (temp___expr_18: int) (temp___is_init_14: bool) (temp___skip_constant_15: bool) (temp___do_toplevel_16: bool) (temp___do_typ_inv_17: bool) =
    if ((temp___is_init_14 = True) \/
          (Standard__integer.first <= Standard__integer.last)) then
      (((Standard__integer.dynamic_property Standard__integer.first)
          Standard__integer.last)
         temp___expr_18)
    else true
  
  val dynamic_invariant (temp___expr_18: int) (temp___is_init_14: bool) (temp___skip_constant_15: bool) (temp___do_toplevel_16: bool) (temp___do_typ_inv_17: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_18 : int))
                      (temp___is_init_14 : bool))
                     (temp___skip_constant_15 : bool))
                    (temp___do_toplevel_16 : bool))
                   (temp___do_typ_inv_17 : bool)) }
  
  predicate default_initial_assumption (temp___expr_19: int) (temp___skip_top_level_20: bool) =
    true
  
  val default_initial_assumption (temp___expr_19: int) (temp___skip_top_level_20: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_19 : int))
                   (temp___skip_top_level_20 : bool)) }
end

module Pkg_add__add__first_operand
  use _gnatprove_standard.Main
  use int.Int
  
  val function first_operand : int
end

module Pkg_add__add__second_operand
  use _gnatprove_standard.Main
  use int.Int
  
  val function second_operand : int
end

module Pkg_add__add__first_operand___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Pkg_add__add__second_operand___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Pkg_add__add__subprogram_def
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use _gnatprove_standard.Boolean as Boolean
  use Standard__integer as Standard__integer
  use Standard__integer___axiom as Standard__integer___axiom
  use Pkg_add__add__first_operand as Pkg_add__add__first_operand
  use Pkg_add__add__second_operand as Pkg_add__add__second_operand
  use Standard__integer___axiom as Standard__integer___axiom
  use Standard__integer___axiom as Standard__integer___axiom
  use Pkg_add__add__first_operand___axiom as Pkg_add__add__first_operand___axiom
  use Pkg_add__add__second_operand___axiom as Pkg_add__add__second_operand___axiom
  
  val pkg_add__add__result : int__ref
  
  let def (__void_param : unit)
    requires { [#"pkg_add.ads" 3 0 0] true }
    ensures { [#"pkg_add.ads" 3 0 0]
              [#"pkg_add.ads" 15 0 0]
              [@GP_Reason:VC_POSTCONDITION]
              [@GP_Shape:pragargs__cmp]
              [@comment:         Post => Add'Result = First_Operand + Second_Operand;                  ^ pkg_add.ads:15:18:VC_POSTCONDITION]
              [@GP_Sloc:pkg_add.ads:15:18]
              [@model_vc_post]
              [@GP_Id:4]
              [@GP_Pretty_Ada:987]
              [@GP_Sloc:pkg_add.ads:15:18]
              ((pkg_add__add__result.int__content)
                 = (Pkg_add__add__first_operand.first_operand
                      + Pkg_add__add__second_operand.second_operand)) }
  = [@vc:divergent]
    (([@GNAT-comment:Assume dynamic invariants of inputs of the subprogram pkg_add.ads:3]
      ());
     assume {
       ((((Standard__integer___axiom.dynamic_invariant
             Pkg_add__add__first_operand.first_operand)
            True)
           False)
          True)
         True };
     assume {
       ((((Standard__integer___axiom.dynamic_invariant
             Pkg_add__add__second_operand.second_operand)
            True)
           False)
          True)
         True };
     ([@GNAT-comment:Assume moved pointers in outputs of the subprogram pkg_add.ads:3]
      ());
     ([@GNAT-comment:Check for RTE in the Pre of the subprogram pkg_add.ads:3]
      ());
     (begin
        ensures { true }
        let _ =
          let _ =
            if ((Pkg_add__add__first_operand.first_operand > (0 : int))
                 && (Pkg_add__add__second_operand.second_operand > (0 : int))) then
              (Pkg_add__add__first_operand.first_operand
                 <= ([#"pkg_add.ads" 12 0 0]
                     [@GP_Sloc:pkg_add.ads:12:43]
                     [@vc:annotation]
                     [@GP_Reason:VC_OVERFLOW_CHECK]
                     [@comment:            First_Operand <= Integer'Last - Second_Operand                                           ^ pkg_add.ads:12:43:VC_OVERFLOW_CHECK]
                     [@GP_Id:2]
                     [@GP_Shape:pragargs__if__cmp__sub]
                     (Standard__integer.range_check_
                        ((2147483647 : int)
                           - Pkg_add__add__second_operand.second_operand))))
            else
              (if ((Pkg_add__add__first_operand.first_operand < (0 : int))
                    &&
                     (Pkg_add__add__second_operand.second_operand
                        < (0 : int))) then
                 (Pkg_add__add__first_operand.first_operand
                    >= ([#"pkg_add.ads" 14 0 0]
                        [@vc:annotation]
                        [@GP_Sloc:pkg_add.ads:14:48]
                        [@GP_Reason:VC_OVERFLOW_CHECK]
                        [@GP_Id:3]
                        [@GP_Shape:pragargs__if__if__cmp__sub]
                        [@comment:                First_Operand >= Integer'First - Second_Operand),                                                ^ pkg_add.ads:14:48:VC_OVERFLOW_CHECK]
                        (Standard__integer.range_check_
                           (((- 2147483648) : int)
                              - Pkg_add__add__second_operand.second_operand))))
               else (Boolean.of_int (1 : int))) in
          () in
        ()
      end);
     ([@GNAT-comment:Assume Pre of the subprogram pkg_add.ads:3] ());
     assume {
       if ((Pkg_add__add__first_operand.first_operand > (0 : int)) /\
             (Pkg_add__add__second_operand.second_operand > (0 : int))) then
         ([@GP_Pretty_Ada:890]
          (Pkg_add__add__first_operand.first_operand
             <= ((2147483647 : int)
                   - Pkg_add__add__second_operand.second_operand)))
       else
         (if ((Pkg_add__add__first_operand.first_operand < (0 : int)) /\
                (Pkg_add__add__second_operand.second_operand < (0 : int))) then
            ([@GP_Pretty_Ada:904]
             (Pkg_add__add__first_operand.first_operand
                >= (((- 2147483648) : int)
                      - Pkg_add__add__second_operand.second_operand)))
          else ([@GP_Pretty_Ada:1001] true)) };
     (try
        ([@GP_Sloc:pkg_add.adb:7:7]
         [#"pkg_add.adb" 7 0 0]
         (([#"pkg_add.adb" 7 0 0]
           (pkg_add__add__result.int__content <-
              ([#"pkg_add.adb" 7 0 0]
               [@vc:annotation]
               [@GP_Reason:VC_OVERFLOW_CHECK]
               [@GP_Shape:return__add]
               [@GP_Id:0]
               [@GP_Sloc:pkg_add.adb:7:28]
               [@comment:      return First_Operand + Second_Operand;                            ^ pkg_add.adb:7:28:VC_OVERFLOW_CHECK]
               (Standard__integer.range_check_
                  (Pkg_add__add__first_operand.first_operand
                     + Pkg_add__add__second_operand.second_operand)))));
          ((raise Return__exc) : unit)));
        (raise Return__exc)
      with Return__exc -> ()
      end);
     (begin
        ensures { true }
        let _ =
          let _ =
            ((pkg_add__add__result.int__content)
               = ([#"pkg_add.ads" 15 0 0]
                  [@vc:annotation]
                  [@GP_Reason:VC_OVERFLOW_CHECK]
                  [@comment:         Post => Add'Result = First_Operand + Second_Operand;                                             ^ pkg_add.ads:15:45:VC_OVERFLOW_CHECK]
                  [@GP_Shape:pragargs__cmp__add]
                  [@GP_Sloc:pkg_add.ads:15:45]
                  [@GP_Id:1]
                  (Standard__integer.range_check_
                     (Pkg_add__add__first_operand.first_operand
                        + Pkg_add__add__second_operand.second_operand)))) in
          () in
        ()
      end);
     (pkg_add__add__result.int__content))
end

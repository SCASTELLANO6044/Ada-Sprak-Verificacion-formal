(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type integer  = <range -2147483648 2147483647>
  
  function   first () requires { True } ensures  { True } returns
    int = -2147483648
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = integer,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type integer__ref  = { mutable integer__content : integer }
  
  function   integer__ref_integer__content__projection (a : integer__ref)
    requires {  } ensures  {  } returns integer = a.integer__content
  
  meta model_projection function integer__ref_integer__content__projection
  
  meta inline:no function integer__ref_integer__content__projection
  
  function   integer__havoc (x : integer__ref) requires {  } ensures  {  }
    returns unit

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_18) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_14) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_15) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_16) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_17) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_14) = True) \/
          (Standard__integer.first <= Standard__integer.last))
       then
       (Standard__integer.dynamic_property Standard__integer.first
          Standard__integer.last ([mlw:proxy_symbol]
          [introduced] temp___expr_18))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_19) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_20) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for defining the constant "n1" defined at example.ads:5, created in Gnat2Why.Decls.Translate_Constant *)
module Example__max__n1
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  function [name:N1] [model_trace:870] [sloc:example.ads:5] n1 () requires
    {  } ensures  {  } returns int

end

(* Module for defining the constant "n2" defined at example.ads:5, created in Gnat2Why.Decls.Translate_Constant *)
module Example__max__n2
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  function [name:N2] [model_trace:871] [sloc:example.ads:5] n2 () requires
    {  } ensures  {  } returns int

end

(* Module for defining the constant "n3" defined at example.ads:5, created in Gnat2Why.Decls.Translate_Constant *)
module Example__max__n3
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  function [name:N3] [model_trace:872] [sloc:example.ads:5] n3 () requires
    {  } ensures  {  } returns int

end

(* Module giving an empty axiom for the entity "n1" defined at example.ads:5, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Example__max__n1___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "n2" defined at example.ads:5, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Example__max__n2___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "n3" defined at example.ads:5, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Example__max__n3___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module for checking contracts and absence of run-time errors in subprogram "max" defined at example.ads:5, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Example__max__subprogram_def
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        _gnatprove_standard.Main
  use        Standard__integer___axiom
  use        Example__max__n1
  use        Example__max__n2
  use        Example__max__n3
  use        Standard__integer___axiom
  use        Example__max__n1___axiom
  use        Example__max__n2___axiom
  use        Example__max__n3___axiom
  
  val example__max__result [model_trace:869@result] [model_projected]
  [name:Max] : int
  
  function [GP_Subp:example.ads:5] [sloc:example.ads:5] def
    (__void_param : unit) requires { True } ensures 
    { ([sloc:example.ads:9] ([GP_Reason:VC_POSTCONDITION]
                            [GP_Sloc:example.ads:9:8]
                            [comment:       (Max'Result >= N1        ^ example.ads:9:8:VC_POSTCONDITION]
                            [GP_Shape:pragargs__andthen] [model_vc_post]
                            [GP_Id:0] (((([GP_Sloc:example.ads:9:9]
                                         [GP_Pretty_Ada:904] (!example__max__result
                                                                >= Example__max__n1.n1))
                                           /\
                                           ([GP_Pretty_Ada:910]
                                           [GP_Sloc:example.ads:10:18] (
                                           !example__max__result
                                             >= Example__max__n2.n2))) /\
                                          ([GP_Sloc:example.ads:11:18]
                                          [GP_Pretty_Ada:916] (!example__max__result
                                                                 >= Example__max__n3.n3)))
                                         /\
                                         ([GP_Sloc:example.ads:13:8]
                                         [GP_Pretty_Ada:930] (((!example__max__result
                                                                  = Example__max__n1.n1)
                                                                 \/
                                                                 (!example__max__result
                                                                    = Example__max__n2.n2))
                                                                \/
                                                                (!example__max__result
                                                                   = Example__max__n3.n3)))))) }
    returns
     = (* Assume dynamic invariants of inputs of the subprogram example.ads:5 *);
        assume
        { (Standard__integer___axiom.dynamic_invariant Example__max__n1.n1
             True False True True) };
        assume
        { (Standard__integer___axiom.dynamic_invariant Example__max__n2.n2
             True False True True) };
        assume
        { (Standard__integer___axiom.dynamic_invariant Example__max__n3.n3
             True False True True) };
        (* Assume moved pointers in outputs of the subprogram example.ads:5 *);
        (* Check for RTE in the Pre of the subprogram example.ads:5 *);
        abstract ensures
        { True } begin  (let _ = True in ())  end;
        (* Assume Pre of the subprogram example.ads:5 *);
        (try
        ();
          ([GP_Sloc:example.adb:5:7] ([sloc:example.adb:5] (if
                                                           ([sloc:example.adb:5] ([branch_id=833]
                                                           _gnatprove_standard.Main.spark__branch
                                                           :=
                                                           (Example__max__n1.n1
                                                              > Example__max__n2.n2)));
                                                           ([branch_id=833] _gnatprove_standard.Main.spark__branch).bool__content
                                                           then
                                                           ();
                                                           ([GP_Sloc:example.adb:6:10] 
                                                           ([sloc:example.adb:6] 
                                                           (if
                                                           ([sloc:example.adb:6] ([branch_id=837]
                                                           _gnatprove_standard.Main.spark__branch
                                                           :=
                                                           (Example__max__n1.n1
                                                              > Example__max__n3.n3)));
                                                           ([branch_id=837] _gnatprove_standard.Main.spark__branch).bool__content
                                                           then
                                                           ();
                                                           ([GP_Sloc:example.adb:7:13] 
                                                           ([sloc:example.adb:7] (
                                                           example__max__result
                                                           :=
                                                           Example__max__n1.n1);
                                                           raise Return__exc))
                                                            else
                                                           ();
                                                           ([GP_Sloc:example.adb:9:13] 
                                                           ([sloc:example.adb:9] (
                                                           example__max__result
                                                           :=
                                                           Example__max__n3.n3);
                                                           raise Return__exc)))))
                                                            else
                                                           ();
                                                           ([GP_Sloc:example.adb:12:10] 
                                                           ([sloc:example.adb:12] 
                                                           (if
                                                           ([sloc:example.adb:12] ([branch_id=845]
                                                           _gnatprove_standard.Main.spark__branch
                                                           :=
                                                           (Example__max__n2.n2
                                                              > Example__max__n3.n3)));
                                                           ([branch_id=845] _gnatprove_standard.Main.spark__branch).bool__content
                                                           then
                                                           ();
                                                           ([GP_Sloc:example.adb:13:13] 
                                                           ([sloc:example.adb:13] (
                                                           example__max__result
                                                           :=
                                                           Example__max__n2.n2);
                                                           raise Return__exc))
                                                            else
                                                           ();
                                                           ([GP_Sloc:example.adb:15:13] 
                                                           ([sloc:example.adb:15] (
                                                           example__max__result
                                                           :=
                                                           Example__max__n3.n3);
                                                           raise Return__exc))))))));
          raise Return__exc with | Return__exc  -> ());
        abstract ensures
        { True } begin  (let _ =
                       ((((!example__max__result >= Example__max__n1.n1) &&
                            (!example__max__result >= Example__max__n2.n2))
                           && (!example__max__result >= Example__max__n3.n3))
                          &&
                          (((!example__max__result = Example__max__n1.n1) ||
                              (!example__max__result = Example__max__n2.n2))
                             || (!example__max__result = Example__max__n3.n3)))
                       in ())  end;
        !example__max__result

end

module Standard__integer
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type integer = <range -2147483648 2147483647>
  
  val function first : int
    ensures { result = ((- 2147483648) : int) }
  
  val function last : int
    ensures { result = (2147483647 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = integer,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type integer__ref = { mutable integer__content : integer }
  
  function integer__ref_integer__content__projection (a: integer__ref) : integer =
    a.integer__content
  
  meta "model_projection" function integer__ref_integer__content__projection
  
  meta "inline:no" function integer__ref_integer__content__projection
  
  val integer__havoc (x: integer__ref) : unit
    writes { x }
end

module Standard__integer___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__integer as Standard__integer
  
  predicate dynamic_invariant (temp___expr_18: int) (temp___is_init_14: bool) (temp___skip_constant_15: bool) (temp___do_toplevel_16: bool) (temp___do_typ_inv_17: bool) =
    if ((temp___is_init_14 = True) \/
          (Standard__integer.first <= Standard__integer.last)) then
      (((Standard__integer.dynamic_property Standard__integer.first)
          Standard__integer.last)
         temp___expr_18)
    else true
  
  val dynamic_invariant (temp___expr_18: int) (temp___is_init_14: bool) (temp___skip_constant_15: bool) (temp___do_toplevel_16: bool) (temp___do_typ_inv_17: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_18 : int))
                      (temp___is_init_14 : bool))
                     (temp___skip_constant_15 : bool))
                    (temp___do_toplevel_16 : bool))
                   (temp___do_typ_inv_17 : bool)) }
  
  predicate default_initial_assumption (temp___expr_19: int) (temp___skip_top_level_20: bool) =
    true
  
  val default_initial_assumption (temp___expr_19: int) (temp___skip_top_level_20: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_19 : int))
                   (temp___skip_top_level_20 : bool)) }
end

module Example__max__n1
  use _gnatprove_standard.Main
  use int.Int
  
  val function n1 : int
end

module Example__max__n2
  use _gnatprove_standard.Main
  use int.Int
  
  val function n2 : int
end

module Example__max__n3
  use _gnatprove_standard.Main
  use int.Int
  
  val function n3 : int
end

module Example__max__n1___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Example__max__n2___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Example__max__n3___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Example__max__subprogram_def
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use _gnatprove_standard.Main as Main
  use Standard__integer___axiom as Standard__integer___axiom
  use Example__max__n1 as Example__max__n1
  use Example__max__n2 as Example__max__n2
  use Example__max__n3 as Example__max__n3
  use Standard__integer___axiom as Standard__integer___axiom
  use Example__max__n1___axiom as Example__max__n1___axiom
  use Example__max__n2___axiom as Example__max__n2___axiom
  use Example__max__n3___axiom as Example__max__n3___axiom
  
  val example__max__result : int__ref
  
  let def (__void_param : unit)
    requires { [#"example.ads" 5 0 0] true }
    ensures { [#"example.ads" 5 0 0]
              [#"example.ads" 9 0 0]
              [@GP_Reason:VC_POSTCONDITION]
              [@comment:      ((Max'Result >= N1 and then Max'Result >= N2 and then Max'Result >= N3)       ^ example.ads:9:7:VC_POSTCONDITION]
              [@GP_Sloc:example.ads:9:7]
              [@GP_Shape:pragargs__andthen]
              [@model_vc_post]
              [@GP_Id:0]
              (((([@GP_Sloc:example.ads:9:9]
                  [@GP_Pretty_Ada:904]
                  ((example__max__result.int__content)
                     >= Example__max__n1.n1)) /\
                   ([@GP_Pretty_Ada:910]
                    [@GP_Sloc:example.ads:9:35]
                    ((example__max__result.int__content)
                       >= Example__max__n2.n2))) /\
                  ([@GP_Pretty_Ada:916]
                   [@GP_Sloc:example.ads:9:61]
                   ((example__max__result.int__content)
                      >= Example__max__n3.n3))) /\
                 ([@GP_Sloc:example.ads:11:8]
                  [@GP_Pretty_Ada:930]
                  ((((example__max__result.int__content)
                       = Example__max__n1.n1) \/
                      ((example__max__result.int__content)
                         = Example__max__n2.n2)) \/
                     ((example__max__result.int__content)
                        = Example__max__n3.n3)))) }
  = [@vc:divergent]
    (([@GNAT-comment:Assume dynamic invariants of inputs of the subprogram example.ads:5]
      ());
     assume {
       ((((Standard__integer___axiom.dynamic_invariant Example__max__n1.n1)
            True)
           False)
          True)
         True };
     assume {
       ((((Standard__integer___axiom.dynamic_invariant Example__max__n2.n2)
            True)
           False)
          True)
         True };
     assume {
       ((((Standard__integer___axiom.dynamic_invariant Example__max__n3.n3)
            True)
           False)
          True)
         True };
     ([@GNAT-comment:Assume moved pointers in outputs of the subprogram example.ads:5]
      ());
     ([@GNAT-comment:Check for RTE in the Pre of the subprogram example.ads:5]
      ());
     ([@GNAT-comment:Assume Pre of the subprogram example.ads:5] ());
     (try
        ([@GP_Sloc:example.adb:5:7]
         [#"example.adb" 5 0 0]
         (if (([#"example.adb" 5 0 0]
               [#"example.adb" 5 0 0]
               (([@branch_id=833] Main.spark__branch).bool__content <-
                  (Example__max__n1.n1 > Example__max__n2.n2)));
              (([@branch_id=833] Main.spark__branch).bool__content)) then
            ([@GP_Sloc:example.adb:6:10]
             [#"example.adb" 6 0 0]
             (if (([#"example.adb" 6 0 0]
                   [#"example.adb" 6 0 0]
                   (([@branch_id=837] Main.spark__branch).bool__content <-
                      (Example__max__n1.n1 > Example__max__n3.n3)));
                  (([@branch_id=837] Main.spark__branch).bool__content)) then
                ([@GP_Sloc:example.adb:7:13]
                 [#"example.adb" 7 0 0]
                 (([#"example.adb" 7 0 0]
                   (example__max__result.int__content <- Example__max__n1.n1));
                  ([#"example.adb" 7 0 0] ((raise Return__exc) : unit))))
              else
                ([@GP_Sloc:example.adb:9:13]
                 [#"example.adb" 9 0 0]
                 (([#"example.adb" 9 0 0]
                   (example__max__result.int__content <- Example__max__n3.n3));
                  ([#"example.adb" 9 0 0] ((raise Return__exc) : unit))))))
          else
            ([@GP_Sloc:example.adb:11:7]
             (if (([#"example.adb" 11 0 0]
                   [#"example.adb" 11 0 0]
                   (([@branch_id=846] Main.spark__branch).bool__content <-
                      (Example__max__n2.n2 > Example__max__n3.n3)));
                  (([@branch_id=846] Main.spark__branch).bool__content)) then
                ([@GP_Sloc:example.adb:12:10]
                 [#"example.adb" 12 0 0]
                 (([#"example.adb" 12 0 0]
                   (example__max__result.int__content <- Example__max__n2.n2));
                  ([#"example.adb" 12 0 0] ((raise Return__exc) : unit))))
              else
                ([@GP_Sloc:example.adb:14:10]
                 [#"example.adb" 14 0 0]
                 (([#"example.adb" 14 0 0]
                   (example__max__result.int__content <- Example__max__n3.n3));
                  ([#"example.adb" 14 0 0] ((raise Return__exc) : unit))))))));
        (raise Return__exc)
      with Return__exc -> ()
      end);
     (begin
        ensures { true }
        let _ =
          let _ =
            ((((example__max__result.int__content) >= Example__max__n1.n1)
               &&
                ((example__max__result.int__content) >= Example__max__n2.n2))
              && ((example__max__result.int__content) >= Example__max__n3.n3))
             &&
              ((((example__max__result.int__content) = Example__max__n1.n1)
                 ||
                  ((example__max__result.int__content) = Example__max__n2.n2))
                ||
                 ((example__max__result.int__content) = Example__max__n3.n3)) in
          () in
        ()
      end);
     (example__max__result.int__content))
end

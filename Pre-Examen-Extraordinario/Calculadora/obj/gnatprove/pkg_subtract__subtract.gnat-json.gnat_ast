(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type integer  = <range -2147483648 2147483647>
  
  function   first () requires { True } ensures  { True } returns
    int = -2147483648
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = integer,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type integer__ref  = { mutable integer__content : integer }
  
  function   integer__ref_integer__content__projection (a : integer__ref)
    requires {  } ensures  {  } returns integer = a.integer__content
  
  meta model_projection function integer__ref_integer__content__projection
  
  meta inline:no function integer__ref_integer__content__projection
  
  function   integer__havoc (x : integer__ref) requires {  } ensures  {  }
    returns unit

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_18) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_14) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_15) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_16) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_17) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_14) = True) \/
          (Standard__integer.first <= Standard__integer.last))
       then
       (Standard__integer.dynamic_property Standard__integer.first
          Standard__integer.last ([mlw:proxy_symbol]
          [introduced] temp___expr_18))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_19) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_20) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for defining the constant "first_operand" defined at pkg_subtract.ads:4, created in Gnat2Why.Decls.Translate_Constant *)
module Pkg_subtract__subtract__first_operand
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  function [name:First_Operand] [model_trace:862] [sloc:pkg_subtract.ads:4]
    first_operand () requires {  } ensures  {  } returns int

end

(* Module for defining the constant "second_operand" defined at pkg_subtract.ads:5, created in Gnat2Why.Decls.Translate_Constant *)
module Pkg_subtract__subtract__second_operand
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  function [name:Second_Operand] [model_trace:865] [sloc:pkg_subtract.ads:5]
    second_operand () requires {  } ensures  {  } returns int

end

(* Module for defining a ref holding the value of variable "result" defined at pkg_subtract.ads:6, created in Gnat2Why.Decls.Translate_Variable *)
module Pkg_subtract__subtract__result
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val result__ [model_trace:868] [model_projected]
  [name:Result] [sloc:pkg_subtract.ads:6]: int

end

(* Module for possibly declaring a logic function for "add" defined at pkg_add.ads:3, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pkg_add__add
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   add (first_operand : int second_operand : int) requires { True }
    ensures  { True } returns int
  
  function   add__function_guard
    (([mlw:proxy_symbol] [introduced] temp___result_161) : int
    first_operand : int second_operand : int) requires { True } ensures 
    { True } returns bool

end

(* Module for declaring a program function (and possibly an axiom) for "add" defined at pkg_add.ads:3, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pkg_add__add___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer___axiom
  use        Pkg_add__add
  
  function   add (first_operand : int second_operand : int) requires
    { (if ((first_operand > 0) /\ (second_operand > 0)) then
      ([GP_Pretty_Ada:976] (first_operand <= (2147483647 - second_operand))) 
      else
      (if ((first_operand < 0) /\ (second_operand < 0)) then
      ([GP_Pretty_Ada:990] (first_operand >= (-2147483648 - second_operand)))
       else ([GP_Pretty_Ada:1087] True))) } ensures 
    { ((result = (Pkg_add__add.add first_operand second_operand)) /\
         (Pkg_add__add.add__function_guard result first_operand
            second_operand) /\
         ((Standard__integer___axiom.dynamic_invariant result True False True
             True) /\
            ([GP_Pretty_Ada:1073] (result = (first_operand + second_operand))))) }
    returns int
  
  axiom add__post_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module giving an empty axiom for the entity "first_operand" defined at pkg_subtract.ads:4, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pkg_subtract__subtract__first_operand___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "second_operand" defined at pkg_subtract.ads:5, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pkg_subtract__subtract__second_operand___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "result" defined at pkg_subtract.ads:6, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pkg_subtract__subtract__result___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module for checking contracts and absence of run-time errors in subprogram "subtract" defined at pkg_subtract.ads:3, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Pkg_subtract__subtract__subprogram_def
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        _gnatprove_standard.Boolean
  use        Standard__integer
  use        Standard__integer___axiom
  use        Pkg_subtract__subtract__first_operand
  use        Pkg_subtract__subtract__second_operand
  use        Pkg_subtract__subtract__result
  use        Pkg_add__add___axiom
  use        Standard__integer___axiom
  use        Standard__integer___axiom
  use        Pkg_subtract__subtract__first_operand___axiom
  use        Pkg_subtract__subtract__second_operand___axiom
  use        Pkg_subtract__subtract__result___axiom
  use        Pkg_add__add___axiom
  
  function [GP_Subp:pkg_subtract.ads:3] [sloc:pkg_subtract.ads:3] def
    (__void_param : unit) requires { True } ensures 
    { ([sloc:pkg_subtract.ads:16] ([GP_Reason:VC_POSTCONDITION]
                                  [GP_Sloc:pkg_subtract.ads:16:16]
                                  [GP_Shape:pragargs__cmp] [model_vc_post]
                                  [comment:       Post => Result = First_Operand - Second_Operand;                ^ pkg_subtract.ads:16:16:VC_POSTCONDITION]
                                  [GP_Id:5] ([GP_Sloc:pkg_subtract.ads:16:16]
                                            [GP_Pretty_Ada:1150] (!Pkg_subtract__subtract__result.result__
                                                                    = (
                                                                    Pkg_subtract__subtract__first_operand.first_operand
                                                                    - Pkg_subtract__subtract__second_operand.second_operand))))) }
    returns
     = (* Assume dynamic invariants of inputs of the subprogram pkg_subtract.ads:3 *);
        assume
        { (Standard__integer___axiom.dynamic_invariant
             Pkg_subtract__subtract__first_operand.first_operand True False
             True True) };
        assume
        { (Standard__integer___axiom.dynamic_invariant
             Pkg_subtract__subtract__second_operand.second_operand True False
             True True) };
        assume
        { (Standard__integer___axiom.dynamic_invariant
             !Pkg_subtract__subtract__result.result__ False False True True) };
        (* Assume moved pointers in outputs of the subprogram pkg_subtract.ads:3 *);
        (* Check for RTE in the Pre of the subprogram pkg_subtract.ads:3 *);
        abstract ensures
        { True } begin  (let _ =
                       (if
                       (_gnatprove_standard.Boolean.andb
                          (Pkg_subtract__subtract__first_operand.first_operand
                             < 0)
                          (Pkg_subtract__subtract__second_operand.second_operand
                             > 0))
                       then
                       (Pkg_subtract__subtract__first_operand.first_operand
                          >= ([sloc:pkg_subtract.ads:13] ([comment:                 First_Operand >= Integer'First + Second_Operand                                                 ^ pkg_subtract.ads:13:49:VC_OVERFLOW_CHECK]
                                                         [GP_Sloc:pkg_subtract.ads:13:49]
                                                         [vc:annotation]
                                                         [GP_Reason:VC_OVERFLOW_CHECK]
                                                         [GP_Shape:pragargs__if__cmp__add]
                                                         [GP_Id:3] (Standard__integer.range_check_
                                                                    (-2147483648
                                                                    + Pkg_subtract__subtract__second_operand.second_operand)))))
                        else
                       (if
                       (_gnatprove_standard.Boolean.andb
                          (Pkg_subtract__subtract__first_operand.first_operand
                             > 0)
                          (Pkg_subtract__subtract__second_operand.second_operand
                             < 0))
                       then
                       (Pkg_subtract__subtract__first_operand.first_operand
                          <= ([sloc:pkg_subtract.ads:15] ([vc:annotation]
                                                         [GP_Reason:VC_OVERFLOW_CHECK]
                                                         [GP_Shape:pragargs__if__if__cmp__add]
                                                         [GP_Sloc:pkg_subtract.ads:15:52]
                                                         [comment:                     First_Operand <= Integer'Last + Second_Operand),                                                    ^ pkg_subtract.ads:15:52:VC_OVERFLOW_CHECK]
                                                         [GP_Id:4] (Standard__integer.range_check_
                                                                    (2147483647
                                                                    + Pkg_subtract__subtract__second_operand.second_operand)))))
                        else (_gnatprove_standard.Boolean.of_int 1))) in ())  end;
        (* Assume Pre of the subprogram pkg_subtract.ads:3 *);
        assume
        { (if
          ((Pkg_subtract__subtract__first_operand.first_operand < 0) /\
             (Pkg_subtract__subtract__second_operand.second_operand > 0))
          then
          ([GP_Pretty_Ada:897] (Pkg_subtract__subtract__first_operand.first_operand
                                  >= (-2147483648
                                        + Pkg_subtract__subtract__second_operand.second_operand)))
           else
          (if
          ((Pkg_subtract__subtract__first_operand.first_operand > 0) /\
             (Pkg_subtract__subtract__second_operand.second_operand < 0))
          then
          ([GP_Pretty_Ada:911] (Pkg_subtract__subtract__first_operand.first_operand
                                  <= (2147483647
                                        + Pkg_subtract__subtract__second_operand.second_operand)))
           else ([GP_Pretty_Ada:1164] True))) };
        (try
        ();
          ([GP_Sloc:pkg_subtract.adb:10:17] ([sloc:pkg_subtract.adb:10] ()));
          ([GP_Sloc:pkg_subtract.adb:10:14] ([sloc:pkg_subtract.adb:10] (
                                            Pkg_subtract__subtract__result.result__
                                            :=
                                            ([sloc:pkg_subtract.adb:10] 
                                            ([GP_Sloc:pkg_subtract.adb:10:17]
                                            [GP_Reason:VC_PRECONDITION]
                                            [GP_Shape:result_assign__call_add]
                                            [vc:annotation]
                                            [comment:      Result := Add(First_Operand, -Second_Operand);                 ^ pkg_subtract.adb:10:17:VC_PRECONDITION]
                                            [GP_Id:1] (Pkg_add__add___axiom.add
                                                         Pkg_subtract__subtract__first_operand.first_operand
                                                         ( ([sloc:pkg_subtract.adb:10] 
                                                           ([GP_Shape:result_assign__call_add__minus]
                                                           [vc:annotation]
                                                           [GP_Reason:VC_OVERFLOW_CHECK]
                                                           [comment:      Result := Add(First_Operand, -Second_Operand);                                    ^ pkg_subtract.adb:10:36:VC_OVERFLOW_CHECK]
                                                           [GP_Sloc:pkg_subtract.adb:10:36]
                                                           [GP_Id:0] (
                                                           Standard__integer.range_check_
                                                             (-
                                                                Pkg_subtract__subtract__second_operand.second_operand)))))))))));
          raise Return__exc with | Return__exc  -> ());
        abstract ensures
        { True } begin  (let _ =
                       (!Pkg_subtract__subtract__result.result__
                          = ([sloc:pkg_subtract.ads:16] ([vc:annotation]
                                                        [GP_Reason:VC_OVERFLOW_CHECK]
                                                        [comment:       Post => Result = First_Operand - Second_Operand;                                       ^ pkg_subtract.ads:16:39:VC_OVERFLOW_CHECK]
                                                        [GP_Sloc:pkg_subtract.ads:16:39]
                                                        [GP_Id:2]
                                                        [GP_Shape:pragargs__cmp__sub] (
                                                        Standard__integer.range_check_
                                                          (Pkg_subtract__subtract__first_operand.first_operand
                                                             - Pkg_subtract__subtract__second_operand.second_operand)))))
                       in ())  end

end

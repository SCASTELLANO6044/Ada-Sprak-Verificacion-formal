(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type integer  = <range -2147483648 2147483647>
  
  function   first () requires { True } ensures  { True } returns
    int = -2147483648
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = integer,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type integer__ref  = { mutable integer__content : integer }
  
  function   integer__ref_integer__content__projection (a : integer__ref)
    requires {  } ensures  {  } returns integer = a.integer__content
  
  meta model_projection function integer__ref_integer__content__projection
  
  meta inline:no function integer__ref_integer__content__projection
  
  function   integer__havoc (x : integer__ref) requires {  } ensures  {  }
    returns unit

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_18) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_14) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_15) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_16) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_17) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_14) = True) \/
          (Standard__integer.first <= Standard__integer.last))
       then
       (Standard__integer.dynamic_property Standard__integer.first
          Standard__integer.last ([mlw:proxy_symbol]
          [introduced] temp___expr_18))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_19) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_20) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for defining the constant "first_operand" defined at pkg_add.ads:6, created in Gnat2Why.Decls.Translate_Constant *)
module Pkg_add__add__first_operand
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  function [name:First_Operand] [model_trace:853] [sloc:pkg_add.ads:6]
    first_operand () requires {  } ensures  {  } returns int

end

(* Module for defining the constant "second_operand" defined at pkg_add.ads:6, created in Gnat2Why.Decls.Translate_Constant *)
module Pkg_add__add__second_operand
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  function [model_trace:856] [name:Second_Operand] [sloc:pkg_add.ads:6]
    second_operand () requires {  } ensures  {  } returns int

end

(* Module giving an empty axiom for the entity "first_operand" defined at pkg_add.ads:6, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pkg_add__add__first_operand___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "second_operand" defined at pkg_add.ads:6, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pkg_add__add__second_operand___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module for checking contracts and absence of run-time errors in subprogram "add" defined at pkg_add.ads:5, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Pkg_add__add__subprogram_def
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        _gnatprove_standard.Boolean
  use        Standard__integer
  use        Standard__integer___axiom
  use        Pkg_add__add__first_operand
  use        Pkg_add__add__second_operand
  use        Standard__integer___axiom
  use        Standard__integer___axiom
  use        Pkg_add__add__first_operand___axiom
  use        Pkg_add__add__second_operand___axiom
  
  val pkg_add__add__result [model_trace:852@result] [model_projected]
  [name:Add] : int
  
  function [GP_Subp:pkg_add.ads:5] [sloc:pkg_add.ads:5] def
    (__void_param : unit) requires { True } ensures 
    { ([sloc:pkg_add.ads:14] ([GP_Reason:VC_POSTCONDITION]
                             [GP_Sloc:pkg_add.ads:14:15]
                             [GP_Shape:pragargs__cmp]
                             [comment:      Post => Add'Result = First_Operand + Second_Operand;               ^ pkg_add.ads:14:15:VC_POSTCONDITION]
                             [model_vc_post]
                             [GP_Id:4] ([GP_Sloc:pkg_add.ads:14:15]
                                       [GP_Pretty_Ada:954] (!pkg_add__add__result
                                                              = (Pkg_add__add__first_operand.first_operand
                                                                   + Pkg_add__add__second_operand.second_operand))))) }
    returns
     = (* Assume dynamic invariants of inputs of the subprogram pkg_add.ads:5 *);
        assume
        { (Standard__integer___axiom.dynamic_invariant
             Pkg_add__add__first_operand.first_operand True False True True) };
        assume
        { (Standard__integer___axiom.dynamic_invariant
             Pkg_add__add__second_operand.second_operand True False True True) };
        (* Assume moved pointers in outputs of the subprogram pkg_add.ads:5 *);
        (* Check for RTE in the Pre of the subprogram pkg_add.ads:5 *);
        abstract ensures
        { True } begin  (let _ =
                       (if
                       (_gnatprove_standard.Boolean.andb
                          (Pkg_add__add__first_operand.first_operand < 0)
                          (Pkg_add__add__second_operand.second_operand < 0))
                       then
                       (Pkg_add__add__first_operand.first_operand
                          >= ([sloc:pkg_add.ads:11] ([comment:         First_Operand >= Integer'First + Second_Operand                                         ^ pkg_add.ads:11:41:VC_OVERFLOW_CHECK]
                                                    [vc:annotation]
                                                    [GP_Reason:VC_OVERFLOW_CHECK]
                                                    [GP_Shape:pragargs__if__cmp__add]
                                                    [GP_Id:2]
                                                    [GP_Sloc:pkg_add.ads:11:41] (
                                                    Standard__integer.range_check_
                                                      (-2147483648
                                                         + Pkg_add__add__second_operand.second_operand)))))
                        else
                       (if
                       (_gnatprove_standard.Boolean.andb
                          (Pkg_add__add__first_operand.first_operand > 0)
                          (Pkg_add__add__second_operand.second_operand > 0))
                       then
                       (Pkg_add__add__first_operand.first_operand
                          <= ([sloc:pkg_add.ads:13] ([comment:         First_Operand <= Integer'Last + Second_Operand),                                        ^ pkg_add.ads:13:40:VC_OVERFLOW_CHECK]
                                                    [vc:annotation]
                                                    [GP_Reason:VC_OVERFLOW_CHECK]
                                                    [GP_Shape:pragargs__if__if__cmp__add]
                                                    [GP_Sloc:pkg_add.ads:13:40]
                                                    [GP_Id:3] (Standard__integer.range_check_
                                                                 (2147483647
                                                                    + Pkg_add__add__second_operand.second_operand)))))
                        else (_gnatprove_standard.Boolean.of_int 1))) in ())  end;
        (* Assume Pre of the subprogram pkg_add.ads:5 *);
        assume
        { (if
          ((Pkg_add__add__first_operand.first_operand < 0) /\
             (Pkg_add__add__second_operand.second_operand < 0))
          then
          ([GP_Pretty_Ada:875] (Pkg_add__add__first_operand.first_operand
                                  >= (-2147483648
                                        + Pkg_add__add__second_operand.second_operand)))
           else
          (if
          ((Pkg_add__add__first_operand.first_operand > 0) /\
             (Pkg_add__add__second_operand.second_operand > 0))
          then
          ([GP_Pretty_Ada:889] (Pkg_add__add__first_operand.first_operand
                                  <= (2147483647
                                        + Pkg_add__add__second_operand.second_operand)))
           else ([GP_Pretty_Ada:968] True))) };
        (try
        ();
          ([GP_Sloc:pkg_add.adb:9:7] ([sloc:pkg_add.adb:9] (
                                     pkg_add__add__result :=
                                     ( ([sloc:pkg_add.adb:9] ([vc:annotation]
                                                             [GP_Reason:VC_OVERFLOW_CHECK]
                                                             [comment:      return First_Operand + Second_Operand;                            ^ pkg_add.adb:9:28:VC_OVERFLOW_CHECK]
                                                             [GP_Sloc:pkg_add.adb:9:28]
                                                             [GP_Shape:return__add]
                                                             [GP_Id:0] (
                                                             Standard__integer.range_check_
                                                               (Pkg_add__add__first_operand.first_operand
                                                                  + Pkg_add__add__second_operand.second_operand))))));
                                     raise Return__exc));
          raise Return__exc with | Return__exc  -> ());
        abstract ensures
        { True } begin  (let _ =
                       (!pkg_add__add__result
                          = ([sloc:pkg_add.ads:14] ([GP_Sloc:pkg_add.ads:14:42]
                                                   [comment:      Post => Add'Result = First_Operand + Second_Operand;                                          ^ pkg_add.ads:14:42:VC_OVERFLOW_CHECK]
                                                   [vc:annotation]
                                                   [GP_Reason:VC_OVERFLOW_CHECK]
                                                   [GP_Shape:pragargs__cmp__add]
                                                   [GP_Id:1] (Standard__integer.range_check_
                                                                (Pkg_add__add__first_operand.first_operand
                                                                   + Pkg_add__add__second_operand.second_operand)))))
                       in ())  end;
        !pkg_add__add__result

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type integer  = <range -2147483648 2147483647>
  
  function   first () requires { True } ensures  { True } returns
    int = -2147483648
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = integer,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type integer__ref  = { mutable integer__content : integer }
  
  function   integer__ref_integer__content__projection (a : integer__ref)
    requires {  } ensures  {  } returns integer = a.integer__content
  
  meta model_projection function integer__ref_integer__content__projection
  
  meta inline:no function integer__ref_integer__content__projection
  
  function   integer__havoc (x : integer__ref) requires {  } ensures  {  }
    returns unit

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_18) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_14) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_15) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_16) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_17) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_14) = True) \/
          (Standard__integer.first <= Standard__integer.last))
       then
       (Standard__integer.dynamic_property Standard__integer.first
          Standard__integer.last ([mlw:proxy_symbol]
          [introduced] temp___expr_18))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_19) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_20) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for defining the constant "first_operand" defined at pkg_subtract.ads:6, created in Gnat2Why.Decls.Translate_Constant *)
module Pkg_subtract__subtract__first_operand
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  function [name:First_Operand] [model_trace:856] [sloc:pkg_subtract.ads:6]
    first_operand () requires {  } ensures  {  } returns int

end

(* Module for defining the constant "second_operand" defined at pkg_subtract.ads:6, created in Gnat2Why.Decls.Translate_Constant *)
module Pkg_subtract__subtract__second_operand
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  function [model_trace:859] [name:Second_Operand] [sloc:pkg_subtract.ads:6]
    second_operand () requires {  } ensures  {  } returns int

end

(* Module for defining a ref holding the value of variable "result" defined at pkg_subtract.ads:7, created in Gnat2Why.Decls.Translate_Variable *)
module Pkg_subtract__subtract__result
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val result__ [model_projected] [name:Result]
  [model_trace:862] [sloc:pkg_subtract.ads:7]: int

end

(* Module giving an empty axiom for the entity "first_operand" defined at pkg_subtract.ads:6, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pkg_subtract__subtract__first_operand___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "second_operand" defined at pkg_subtract.ads:6, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pkg_subtract__subtract__second_operand___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "result" defined at pkg_subtract.ads:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pkg_subtract__subtract__result___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module for checking contracts and absence of run-time errors in subprogram "subtract" defined at pkg_subtract.ads:5, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Pkg_subtract__subtract__subprogram_def
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        _gnatprove_standard.Boolean
  use        Standard__integer
  use        Standard__integer___axiom
  use        Pkg_subtract__subtract__first_operand
  use        Pkg_subtract__subtract__second_operand
  use        Pkg_subtract__subtract__result
  use        Standard__integer___axiom
  use        Standard__integer___axiom
  use        Pkg_subtract__subtract__first_operand___axiom
  use        Pkg_subtract__subtract__second_operand___axiom
  use        Pkg_subtract__subtract__result___axiom
  
  function [GP_Subp:pkg_subtract.ads:5] [sloc:pkg_subtract.ads:5] def
    (__void_param : unit) requires { True } ensures 
    { ([sloc:pkg_subtract.ads:18] ([GP_Reason:VC_POSTCONDITION]
                                  [GP_Sloc:pkg_subtract.ads:18:16]
                                  [GP_Shape:pragargs__cmp] [model_vc_post]
                                  [comment:       Post => Result = First_Operand - Second_Operand;                ^ pkg_subtract.ads:18:16:VC_POSTCONDITION]
                                  [GP_Id:4] ([GP_Sloc:pkg_subtract.ads:18:16]
                                            [GP_Pretty_Ada:984] (!Pkg_subtract__subtract__result.result__
                                                                   = (
                                                                   Pkg_subtract__subtract__first_operand.first_operand
                                                                    - Pkg_subtract__subtract__second_operand.second_operand))))) }
    returns
     = (* Assume dynamic invariants of inputs of the subprogram pkg_subtract.ads:5 *);
        assume
        { (Standard__integer___axiom.dynamic_invariant
             Pkg_subtract__subtract__first_operand.first_operand True False
             True True) };
        assume
        { (Standard__integer___axiom.dynamic_invariant
             Pkg_subtract__subtract__second_operand.second_operand True False
             True True) };
        assume
        { (Standard__integer___axiom.dynamic_invariant
             !Pkg_subtract__subtract__result.result__ False False True True) };
        (* Assume moved pointers in outputs of the subprogram pkg_subtract.ads:5 *);
        (* Check for RTE in the Pre of the subprogram pkg_subtract.ads:5 *);
        abstract ensures
        { True } begin  (let _ =
                       (if
                       (_gnatprove_standard.Boolean.andb
                          (Pkg_subtract__subtract__first_operand.first_operand
                             < 0)
                          (Pkg_subtract__subtract__second_operand.second_operand
                             > 0))
                       then
                       (([sloc:pkg_subtract.ads:15] ([vc:annotation]
                                                    [GP_Reason:VC_OVERFLOW_CHECK]
                                                    [GP_Sloc:pkg_subtract.ads:15:24]
                                                    [comment:         First_Operand - Integer'First >= Second_Operand                        ^ pkg_subtract.ads:15:24:VC_OVERFLOW_CHECK]
                                                    [GP_Id:2]
                                                    [GP_Shape:pragargs__if__cmp__sub] (
                                                    Standard__integer.range_check_
                                                      (Pkg_subtract__subtract__first_operand.first_operand
                                                         - -2147483648))))
                          >= Pkg_subtract__subtract__second_operand.second_operand)
                        else
                       (if
                       (_gnatprove_standard.Boolean.andb
                          (Pkg_subtract__subtract__first_operand.first_operand
                             > 0)
                          (Pkg_subtract__subtract__second_operand.second_operand
                             < 0))
                       then
                       (([sloc:pkg_subtract.ads:17] ([GP_Sloc:pkg_subtract.ads:17:24]
                                                    [vc:annotation]
                                                    [GP_Reason:VC_OVERFLOW_CHECK]
                                                    [GP_Id:3]
                                                    [GP_Shape:pragargs__if__if__cmp__sub]
                                                    [comment:         First_Operand - Integer'Last <= Second_Operand),                        ^ pkg_subtract.ads:17:24:VC_OVERFLOW_CHECK] (
                                                    Standard__integer.range_check_
                                                      (Pkg_subtract__subtract__first_operand.first_operand
                                                         - 2147483647))))
                          <= Pkg_subtract__subtract__second_operand.second_operand)
                        else (_gnatprove_standard.Boolean.of_int 1))) in ())  end;
        (* Assume Pre of the subprogram pkg_subtract.ads:5 *);
        assume
        { (if
          ((Pkg_subtract__subtract__first_operand.first_operand < 0) /\
             (Pkg_subtract__subtract__second_operand.second_operand > 0))
          then
          ([GP_Pretty_Ada:895] ((Pkg_subtract__subtract__first_operand.first_operand
                                   - -2147483648)
                                  >= Pkg_subtract__subtract__second_operand.second_operand))
           else
          (if
          ((Pkg_subtract__subtract__first_operand.first_operand > 0) /\
             (Pkg_subtract__subtract__second_operand.second_operand < 0))
          then
          ([GP_Pretty_Ada:909] ((Pkg_subtract__subtract__first_operand.first_operand
                                   - 2147483647)
                                  <= Pkg_subtract__subtract__second_operand.second_operand))
           else ([GP_Pretty_Ada:998] True))) };
        (try
        ();
          ([GP_Sloc:pkg_subtract.adb:8:14] ([sloc:pkg_subtract.adb:8] (
                                           Pkg_subtract__subtract__result.result__
                                           :=
                                           ( ([sloc:pkg_subtract.adb:8] 
                                             ([GP_Shape:result_assign__sub]
                                             [vc:annotation]
                                             [comment:      Result := First_Operand - Second_Operand;                               ^ pkg_subtract.adb:8:31:VC_OVERFLOW_CHECK]
                                             [GP_Reason:VC_OVERFLOW_CHECK]
                                             [GP_Id:0]
                                             [GP_Sloc:pkg_subtract.adb:8:31] (
                                             Standard__integer.range_check_
                                               (Pkg_subtract__subtract__first_operand.first_operand
                                                  - Pkg_subtract__subtract__second_operand.second_operand))))))));
          raise Return__exc with | Return__exc  -> ());
        abstract ensures
        { True } begin  (let _ =
                       (!Pkg_subtract__subtract__result.result__
                          = ([sloc:pkg_subtract.ads:18] ([comment:       Post => Result = First_Operand - Second_Operand;                                       ^ pkg_subtract.ads:18:39:VC_OVERFLOW_CHECK]
                                                        [vc:annotation]
                                                        [GP_Reason:VC_OVERFLOW_CHECK]
                                                        [GP_Sloc:pkg_subtract.ads:18:39]
                                                        [GP_Id:1]
                                                        [GP_Shape:pragargs__cmp__sub] (
                                                        Standard__integer.range_check_
                                                          (Pkg_subtract__subtract__first_operand.first_operand
                                                             - Pkg_subtract__subtract__second_operand.second_operand)))))
                       in ())  end

end

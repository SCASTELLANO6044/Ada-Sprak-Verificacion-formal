(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type integer  = <range -2147483648 2147483647>
  
  function   first () requires { True } ensures  { True } returns
    int = -2147483648
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = integer,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type integer__ref  = { mutable integer__content : integer }
  
  function   integer__ref_integer__content__projection (a : integer__ref)
    requires {  } ensures  {  } returns integer = a.integer__content
  
  meta model_projection function integer__ref_integer__content__projection
  
  meta inline:no function integer__ref_integer__content__projection
  
  function   integer__havoc (x : integer__ref) requires {  } ensures  {  }
    returns unit

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_18) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_14) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_15) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_16) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_17) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_14) = True) \/
          (Standard__integer.first <= Standard__integer.last))
       then
       (Standard__integer.dynamic_property Standard__integer.first
          Standard__integer.last ([mlw:proxy_symbol]
          [introduced] temp___expr_18))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_19) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_20) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for defining the constant "first_operand" defined at pkg_multiply.ads:6, created in Gnat2Why.Decls.Translate_Constant *)
module Pkg_multiply__multiply__first_operand
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  function [name:First_Operand] [model_trace:993] [sloc:pkg_multiply.ads:6]
    first_operand () requires {  } ensures  {  } returns int

end

(* Module for defining the constant "second_operand" defined at pkg_multiply.ads:6, created in Gnat2Why.Decls.Translate_Constant *)
module Pkg_multiply__multiply__second_operand
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  function [model_trace:996] [name:Second_Operand] [sloc:pkg_multiply.ads:6]
    second_operand () requires {  } ensures  {  } returns int

end

(* Module for defining a ref holding the value of variable "result" defined at pkg_multiply.ads:7, created in Gnat2Why.Decls.Translate_Variable *)
module Pkg_multiply__multiply__result
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val result__ [model_projected] [model_trace:999]
  [name:Result] [sloc:pkg_multiply.ads:7]: int

end

(* Module for defining a ref holding the value of variable "i" defined at pkg_multiply.adb:13, created in Gnat2Why.Decls.Translate_Variable *)
module Pkg_multiply__multiply__L_1__i
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val i [name:i] [model_projected]
  [model_trace:849] [sloc:pkg_multiply.adb:13]: int

end

(* Module for possibly declaring a logic function for "add" defined at pkg_add.ads:5, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pkg_add__add
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   add (first_operand : int second_operand : int) requires { True }
    ensures  { True } returns int
  
  function   add__function_guard
    (([mlw:proxy_symbol] [introduced] temp___result_161) : int
    first_operand : int second_operand : int) requires { True } ensures 
    { True } returns bool

end

(* Module for declaring a program function (and possibly an axiom) for "add" defined at pkg_add.ads:5, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pkg_add__add___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer___axiom
  use        Pkg_add__add
  
  function   add (first_operand : int second_operand : int) requires
    { (if ((first_operand >= 0) /\ (second_operand >= 0)) then
      ([GP_Pretty_Ada:1139] (second_operand <= (2147483647 - first_operand)))
       else
      (if ((first_operand <= 0) /\ (second_operand <= 0)) then
      ([GP_Pretty_Ada:1153] (first_operand >= (-2147483648 - second_operand)))
       else ([GP_Pretty_Ada:1250] True))) } ensures 
    { ((result = (Pkg_add__add.add first_operand second_operand)) /\
         (Pkg_add__add.add__function_guard result first_operand
            second_operand) /\
         ((Standard__integer___axiom.dynamic_invariant result True False True
             True) /\
            ([GP_Pretty_Ada:1236] (result = (first_operand + second_operand))))) }
    returns int
  
  axiom add__post_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a ref holding the value of variable "i" defined at pkg_multiply.adb:21, created in Gnat2Why.Decls.Translate_Variable *)
module Pkg_multiply__multiply__L_2__i
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val i [name:i] [model_trace:880]
  [model_projected] [sloc:pkg_multiply.adb:21]: int

end

(* Module for defining a ref holding the value of variable "i" defined at pkg_multiply.adb:28, created in Gnat2Why.Decls.Translate_Variable *)
module Pkg_multiply__multiply__L_3__i
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val i [name:i] [model_projected]
  [model_trace:911] [sloc:pkg_multiply.adb:28]: int

end

(* Module for defining a ref holding the value of variable "i" defined at pkg_multiply.adb:35, created in Gnat2Why.Decls.Translate_Variable *)
module Pkg_multiply__multiply__L_4__i
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val i [name:i] [model_projected]
  [model_trace:942] [sloc:pkg_multiply.adb:35]: int

end

(* Module for defining the loop exit exception for the loop "L_1" defined at pkg_multiply.adb:13, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Pkg_multiply__multiply__L_1
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  --pp_exception_declaration NOT IMPLEMENTED

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
  
  use        Standard__integer
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Standard__integer.integer) requires { True }
    ensures  { True } returns int = (Standard__integer.integer'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Standard__integer.integer,
    predicate in_range = Standard__integer.in_range, function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "T1b" defined at pkg_multiply.adb:13, created in Gnat2Why.Types.Translate_Type *)
module Pkg_multiply__multiply__L_1__T1b
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  use        Standard__integer__rep
  
  type t1b  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   dynamic_property (first_int : int last_int : int x : int)
    requires { True } ensures  { True } returns
     = ((first_int <= x) /\ (x <= last_int))
  
  clone export ada__model.Dynamic_Discrete with axiom . type t = t1b,
    type rep_type = int,
    function base_to_rep = Standard__integer__rep.to_rep,
    function base_of_rep = Standard__integer__rep.of_rep,
    predicate dynamic_property = dynamic_property
  
  type t1b__ref  = { mutable t1b__content : t1b }
  
  function   t1b__ref_t1b__content__projection (a : t1b__ref) requires {  }
    ensures  {  } returns t1b = a.t1b__content
  
  meta model_projection function t1b__ref_t1b__content__projection
  
  meta inline:no function t1b__ref_t1b__content__projection
  
  function   t1b__havoc (x : t1b__ref) requires {  } ensures  {  } returns
    unit

end

(* Module for defining the loop exit exception for the loop "L_2" defined at pkg_multiply.adb:21, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Pkg_multiply__multiply__L_2
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  --pp_exception_declaration NOT IMPLEMENTED

end

(* Module for axiomatizing type "T2b" defined at pkg_multiply.adb:21, created in Gnat2Why.Types.Translate_Type *)
module Pkg_multiply__multiply__L_2__T2b
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  use        Standard__integer__rep
  
  type t2b  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   dynamic_property (first_int : int last_int : int x : int)
    requires { True } ensures  { True } returns
     = ((first_int <= x) /\ (x <= last_int))
  
  clone export ada__model.Dynamic_Discrete with axiom . type t = t2b,
    type rep_type = int,
    function base_to_rep = Standard__integer__rep.to_rep,
    function base_of_rep = Standard__integer__rep.of_rep,
    predicate dynamic_property = dynamic_property
  
  type t2b__ref  = { mutable t2b__content : t2b }
  
  function   t2b__ref_t2b__content__projection (a : t2b__ref) requires {  }
    ensures  {  } returns t2b = a.t2b__content
  
  meta model_projection function t2b__ref_t2b__content__projection
  
  meta inline:no function t2b__ref_t2b__content__projection
  
  function   t2b__havoc (x : t2b__ref) requires {  } ensures  {  } returns
    unit

end

(* Module for defining the loop exit exception for the loop "L_3" defined at pkg_multiply.adb:28, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Pkg_multiply__multiply__L_3
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  --pp_exception_declaration NOT IMPLEMENTED

end

(* Module for axiomatizing type "T3b" defined at pkg_multiply.adb:28, created in Gnat2Why.Types.Translate_Type *)
module Pkg_multiply__multiply__L_3__T3b
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  use        Standard__integer__rep
  
  type t3b  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   dynamic_property (first_int : int last_int : int x : int)
    requires { True } ensures  { True } returns
     = ((first_int <= x) /\ (x <= last_int))
  
  clone export ada__model.Dynamic_Discrete with axiom . type t = t3b,
    type rep_type = int,
    function base_to_rep = Standard__integer__rep.to_rep,
    function base_of_rep = Standard__integer__rep.of_rep,
    predicate dynamic_property = dynamic_property
  
  type t3b__ref  = { mutable t3b__content : t3b }
  
  function   t3b__ref_t3b__content__projection (a : t3b__ref) requires {  }
    ensures  {  } returns t3b = a.t3b__content
  
  meta model_projection function t3b__ref_t3b__content__projection
  
  meta inline:no function t3b__ref_t3b__content__projection
  
  function   t3b__havoc (x : t3b__ref) requires {  } ensures  {  } returns
    unit

end

(* Module for defining the loop exit exception for the loop "L_4" defined at pkg_multiply.adb:35, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Pkg_multiply__multiply__L_4
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  --pp_exception_declaration NOT IMPLEMENTED

end

(* Module for axiomatizing type "T4b" defined at pkg_multiply.adb:35, created in Gnat2Why.Types.Translate_Type *)
module Pkg_multiply__multiply__L_4__T4b
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  use        Standard__integer__rep
  
  type t4b  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   dynamic_property (first_int : int last_int : int x : int)
    requires { True } ensures  { True } returns
     = ((first_int <= x) /\ (x <= last_int))
  
  clone export ada__model.Dynamic_Discrete with axiom . type t = t4b,
    type rep_type = int,
    function base_to_rep = Standard__integer__rep.to_rep,
    function base_of_rep = Standard__integer__rep.of_rep,
    predicate dynamic_property = dynamic_property
  
  type t4b__ref  = { mutable t4b__content : t4b }
  
  function   t4b__ref_t4b__content__projection (a : t4b__ref) requires {  }
    ensures  {  } returns t4b = a.t4b__content
  
  meta model_projection function t4b__ref_t4b__content__projection
  
  meta inline:no function t4b__ref_t4b__content__projection
  
  function   t4b__havoc (x : t4b__ref) requires {  } ensures  {  } returns
    unit

end

(* Module giving an empty axiom for the entity "i" defined at pkg_multiply.adb:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pkg_multiply__multiply__L_1__i___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "i" defined at pkg_multiply.adb:21, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pkg_multiply__multiply__L_2__i___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "i" defined at pkg_multiply.adb:28, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pkg_multiply__multiply__L_3__i___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "i" defined at pkg_multiply.adb:35, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pkg_multiply__multiply__L_4__i___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "L_1" defined at pkg_multiply.adb:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pkg_multiply__multiply__L_1___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "L_2" defined at pkg_multiply.adb:21, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pkg_multiply__multiply__L_2___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "L_3" defined at pkg_multiply.adb:28, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pkg_multiply__multiply__L_3___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "L_4" defined at pkg_multiply.adb:35, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pkg_multiply__multiply__L_4___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "first_operand" defined at pkg_multiply.ads:6, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pkg_multiply__multiply__first_operand___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "second_operand" defined at pkg_multiply.ads:6, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pkg_multiply__multiply__second_operand___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "result" defined at pkg_multiply.ads:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pkg_multiply__multiply__result___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving axioms for type "T1b" defined at pkg_multiply.adb:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pkg_multiply__multiply__L_1__T1b___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving axioms for type "T2b" defined at pkg_multiply.adb:21, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pkg_multiply__multiply__L_2__T2b___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving axioms for type "T3b" defined at pkg_multiply.adb:28, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pkg_multiply__multiply__L_3__T3b___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving axioms for type "T4b" defined at pkg_multiply.adb:35, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pkg_multiply__multiply__L_4__T4b___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module for checking contracts and absence of run-time errors in subprogram "multiply" defined at pkg_multiply.ads:5, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Pkg_multiply__multiply__subprogram_def
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        _gnatprove_standard.Main
  use        _gnatprove_standard.Int_Division
  use        _gnatprove_standard.Boolean
  use        Standard__integer
  use        Standard__integer___axiom
  use        Pkg_multiply__multiply__first_operand
  use        Pkg_multiply__multiply__second_operand
  use        Pkg_multiply__multiply__result
  use        Pkg_multiply__multiply__L_1__i
  use        Pkg_add__add___axiom
  use        Pkg_multiply__multiply__L_2__i
  use        Pkg_multiply__multiply__L_3__i
  use        Pkg_multiply__multiply__L_4__i
  use        Pkg_multiply__multiply__L_1
  use        Pkg_multiply__multiply__L_1__T1b
  use        Pkg_multiply__multiply__L_2
  use        Pkg_multiply__multiply__L_2__T2b
  use        Pkg_multiply__multiply__L_3
  use        Pkg_multiply__multiply__L_3__T3b
  use        Pkg_multiply__multiply__L_4
  use        Pkg_multiply__multiply__L_4__T4b
  use        Standard__integer___axiom
  use        Standard__integer___axiom
  use        Pkg_multiply__multiply__L_1__i___axiom
  use        Pkg_multiply__multiply__L_2__i___axiom
  use        Pkg_multiply__multiply__L_3__i___axiom
  use        Pkg_multiply__multiply__L_4__i___axiom
  use        Pkg_multiply__multiply__L_1___axiom
  use        Pkg_multiply__multiply__L_2___axiom
  use        Pkg_multiply__multiply__L_3___axiom
  use        Pkg_multiply__multiply__L_4___axiom
  use        Pkg_multiply__multiply__first_operand___axiom
  use        Pkg_multiply__multiply__second_operand___axiom
  use        Pkg_multiply__multiply__result___axiom
  use        Pkg_add__add___axiom
  use        Pkg_multiply__multiply__L_1__T1b___axiom
  use        Pkg_multiply__multiply__L_2__T2b___axiom
  use        Pkg_multiply__multiply__L_3__T3b___axiom
  use        Pkg_multiply__multiply__L_4__T4b___axiom
  
  function [GP_Subp:pkg_multiply.ads:5] [sloc:pkg_multiply.ads:5] def
    (__void_param : unit) requires { True } ensures 
    { ([sloc:pkg_multiply.ads:22] ([GP_Sloc:pkg_multiply.ads:22:15]
                                  [GP_Reason:VC_POSTCONDITION]
                                  [GP_Shape:pragargs__cmp]
                                  [comment:      Post => (Result = First_Operand * Second_Operand);               ^ pkg_multiply.ads:22:15:VC_POSTCONDITION]
                                  [model_vc_post]
                                  [GP_Id:21] ([GP_Sloc:pkg_multiply.ads:22:15]
                                             [GP_Pretty_Ada:1343] (!Pkg_multiply__multiply__result.result__
                                                                    = (
                                                                    Pkg_multiply__multiply__first_operand.first_operand
                                                                    * Pkg_multiply__multiply__second_operand.second_operand))))) }
    returns
     = (* Assume dynamic invariants of inputs of the subprogram pkg_multiply.ads:5 *);
        assume
        { (Standard__integer___axiom.dynamic_invariant
             Pkg_multiply__multiply__first_operand.first_operand True False
             True True) };
        assume
        { (Standard__integer___axiom.dynamic_invariant
             Pkg_multiply__multiply__second_operand.second_operand True False
             True True) };
        assume
        { (Standard__integer___axiom.dynamic_invariant
             !Pkg_multiply__multiply__result.result__ False False True True) };
        (* Assume moved pointers in outputs of the subprogram pkg_multiply.ads:5 *);
        (* Check for RTE in the Pre of the subprogram pkg_multiply.ads:5 *);
        abstract ensures
        { True } begin  (let _ =
                       (if
                       (_gnatprove_standard.Boolean.andb
                          (Pkg_multiply__multiply__first_operand.first_operand
                             > 0)
                          (Pkg_multiply__multiply__second_operand.second_operand
                             > 0))
                       then
                       (Pkg_multiply__multiply__first_operand.first_operand
                          <= ([sloc:pkg_multiply.ads:15] ([GP_Id:15]
                                                         [comment:         First_Operand <= Integer'Last / Second_Operand                                        ^ pkg_multiply.ads:15:40:VC_DIVISION_CHECK]
                                                         [GP_Sloc:pkg_multiply.ads:15:40]
                                                         [vc:annotation]
                                                         [GP_Reason:VC_DIVISION_CHECK]
                                                         [GP_Shape:pragargs__if__cmp__div] (
                                                         _gnatprove_standard.Int_Division.div_
                                                           2147483647
                                                           Pkg_multiply__multiply__second_operand.second_operand))))
                        else
                       (if
                       (_gnatprove_standard.Boolean.andb
                          (Pkg_multiply__multiply__first_operand.first_operand
                             > 0)
                          (Pkg_multiply__multiply__second_operand.second_operand
                             < 0))
                       then
                       (([sloc:pkg_multiply.ads:17] ([comment:         First_Operand * Second_Operand >= Integer'First                        ^ pkg_multiply.ads:17:24:VC_OVERFLOW_CHECK]
                                                    [GP_Id:16]
                                                    [vc:annotation]
                                                    [GP_Reason:VC_OVERFLOW_CHECK]
                                                    [GP_Sloc:pkg_multiply.ads:17:24]
                                                    [GP_Shape:pragargs__if__if__cmp__mult] (
                                                    Standard__integer.range_check_
                                                      (Pkg_multiply__multiply__first_operand.first_operand
                                                         * Pkg_multiply__multiply__second_operand.second_operand))))
                          >= -2147483648)
                        else
                       (if
                       (_gnatprove_standard.Boolean.andb
                          (Pkg_multiply__multiply__first_operand.first_operand
                             < 0)
                          (Pkg_multiply__multiply__second_operand.second_operand
                             > 0))
                       then
                       (([sloc:pkg_multiply.ads:19] ([GP_Id:17]
                                                    [vc:annotation]
                                                    [GP_Reason:VC_OVERFLOW_CHECK]
                                                    [GP_Sloc:pkg_multiply.ads:19:24]
                                                    [comment:         First_Operand * Second_Operand >= Integer'First                        ^ pkg_multiply.ads:19:24:VC_OVERFLOW_CHECK]
                                                    [GP_Shape:pragargs__if__if__if__cmp__mult] (
                                                    Standard__integer.range_check_
                                                      (Pkg_multiply__multiply__first_operand.first_operand
                                                         * Pkg_multiply__multiply__second_operand.second_operand))))
                          >= -2147483648)
                        else
                       (if
                       (_gnatprove_standard.Boolean.andb
                          (Pkg_multiply__multiply__first_operand.first_operand
                             < 0)
                          (Pkg_multiply__multiply__second_operand.second_operand
                             < 0))
                       then
                       (([sloc:pkg_multiply.ads:21] ([GP_Id:18]
                                                    [vc:annotation]
                                                    [GP_Shape:pragargs__if__if__if__if__cmp__minus]
                                                    [GP_Reason:VC_OVERFLOW_CHECK]
                                                    [comment:         -First_Operand <= Integer'Last / (-Second_Operand)),          ^ pkg_multiply.ads:21:10:VC_OVERFLOW_CHECK]
                                                    [GP_Sloc:pkg_multiply.ads:21:10] (
                                                    Standard__integer.range_check_
                                                      (-
                                                         Pkg_multiply__multiply__first_operand.first_operand))))
                          <= ([sloc:pkg_multiply.ads:21] ([GP_Shape:pragargs__if__if__if__if__cmp__div]
                                                         [vc:annotation]
                                                         [GP_Reason:VC_DIVISION_CHECK]
                                                         [GP_Id:20]
                                                         [GP_Sloc:pkg_multiply.ads:21:41]
                                                         [comment:         -First_Operand <= Integer'Last / (-Second_Operand)),                                         ^ pkg_multiply.ads:21:41:VC_DIVISION_CHECK] (
                                                         _gnatprove_standard.Int_Division.div_
                                                           2147483647
                                                           ([sloc:pkg_multiply.ads:21] 
                                                           ([GP_Id:19]
                                                           [vc:annotation]
                                                           [GP_Reason:VC_OVERFLOW_CHECK]
                                                           [comment:         -First_Operand <= Integer'Last / (-Second_Operand)),                                            ^ pkg_multiply.ads:21:44:VC_OVERFLOW_CHECK]
                                                           [GP_Sloc:pkg_multiply.ads:21:44]
                                                           [GP_Shape:pragargs__if__if__if__if__cmp__div__minus] (
                                                           Standard__integer.range_check_
                                                             (-
                                                                Pkg_multiply__multiply__second_operand.second_operand))))))))
                        else (_gnatprove_standard.Boolean.of_int 1))))) in
                       ())  end;
        (* Assume Pre of the subprogram pkg_multiply.ads:5 *);
        assume
        { (if
          ((Pkg_multiply__multiply__first_operand.first_operand > 0) /\
             (Pkg_multiply__multiply__second_operand.second_operand > 0))
          then
          ([GP_Pretty_Ada:1028] (Pkg_multiply__multiply__first_operand.first_operand
                                   <= (_gnatprove_standard.Int_Division.div
                                         2147483647
                                         Pkg_multiply__multiply__second_operand.second_operand)))
           else
          (if
          ((Pkg_multiply__multiply__first_operand.first_operand > 0) /\
             (Pkg_multiply__multiply__second_operand.second_operand < 0))
          then
          ([GP_Pretty_Ada:1044] ((Pkg_multiply__multiply__first_operand.first_operand
                                    * Pkg_multiply__multiply__second_operand.second_operand)
                                   >= -2147483648))
           else
          (if
          ((Pkg_multiply__multiply__first_operand.first_operand < 0) /\
             (Pkg_multiply__multiply__second_operand.second_operand > 0))
          then
          ([GP_Pretty_Ada:1058] ((Pkg_multiply__multiply__first_operand.first_operand
                                    * Pkg_multiply__multiply__second_operand.second_operand)
                                   >= -2147483648))
           else
          (if
          ((Pkg_multiply__multiply__first_operand.first_operand < 0) /\
             (Pkg_multiply__multiply__second_operand.second_operand < 0))
          then
          ([GP_Pretty_Ada:1071] ((-
                                    Pkg_multiply__multiply__first_operand.first_operand)
                                   <= (_gnatprove_standard.Int_Division.div
                                         2147483647
                                         (-
                                            Pkg_multiply__multiply__second_operand.second_operand))))
           else ([GP_Pretty_Ada:1361] True))))) };
        (try
        ();
          ([sloc:pkg_multiply.adb:13] ());
          ([sloc:pkg_multiply.adb:21] ());
          ([sloc:pkg_multiply.adb:28] ());
          ([sloc:pkg_multiply.adb:35] ());
          ();
          ([GP_Sloc:pkg_multiply.adb:10:14] ([sloc:pkg_multiply.adb:10] (
                                            Pkg_multiply__multiply__result.result__
                                            := ( 0))));
          ([GP_Sloc:pkg_multiply.adb:11:7] ([sloc:pkg_multiply.adb:11] 
                                           (if
                                           ([sloc:pkg_multiply.adb:11] ([branch_id=841]
                                           _gnatprove_standard.Main.spark__branch
                                           :=
                                           ((Pkg_multiply__multiply__first_operand.first_operand
                                               > 0) &&
                                              (Pkg_multiply__multiply__second_operand.second_operand
                                                 > 0))));
                                           ([branch_id=841] _gnatprove_standard.Main.spark__branch).bool__content
                                           then
                                           ();
                                           ([GP_Sloc:pkg_multiply.adb:13:39] 
                                           ([sloc:pkg_multiply.adb:13] (let ([mlw:proxy_symbol]
                                           [introduced] temp___163) = 
                                           1 in (let ([mlw:proxy_symbol]
                                           [introduced] temp___164) =
                                           Pkg_multiply__multiply__second_operand.second_operand
                                           in (
                                           Pkg_multiply__multiply__L_1__i.i
                                           :=
                                           ([mlw:proxy_symbol]
                                             [introduced] temp___163));
                                           (* Translation of an Ada loop from pkg_multiply.adb:13 *);
                                           (if
                                           (_gnatprove_standard.Boolean.andb
                                              (([mlw:proxy_symbol]
                                                 [introduced] temp___163)
                                                 <= !Pkg_multiply__multiply__L_1__i.i)
                                              (!Pkg_multiply__multiply__L_1__i.i
                                                 <= ([mlw:proxy_symbol]
                                                 [introduced] temp___164)))
                                           then
                                           (try
                                           (* While loop translating the Ada loop from pkg_multiply.adb:13 *);
                                             ([sloc:pkg_multiply.adb:16] 
                                             loop
                                               ();
                                               ([GP_Sloc:pkg_multiply.adb:15:23] 
                                               ([sloc:pkg_multiply.adb:15] ()));
                                               ([GP_Sloc:pkg_multiply.adb:15:20] 
                                               ([sloc:pkg_multiply.adb:15] (
                                               Pkg_multiply__multiply__result.result__
                                               :=
                                               ([sloc:pkg_multiply.adb:15] 
                                               ([comment:            Result := Add (Result, First_Operand);                       ^ pkg_multiply.adb:15:23:VC_PRECONDITION]
                                               [GP_Sloc:pkg_multiply.adb:15:23]
                                               [GP_Reason:VC_PRECONDITION]
                                               [vc:annotation]
                                               [GP_Shape:if__L_1_while__result_assign__call_add]
                                               [GP_Id:0] (Pkg_add__add___axiom.add
                                                            !Pkg_multiply__multiply__result.result__
                                                            Pkg_multiply__multiply__first_operand.first_operand))))));
                                               (* Check for absence of RTE in the loop invariant and variant *);
                                               (let ([mlw:proxy_symbol]
                                               [introduced] temp___inv_166) =
                                               (!Pkg_multiply__multiply__result.result__
                                                  = ([sloc:pkg_multiply.adb:16] 
                                                    ([vc:annotation]
                                                    [GP_Reason:VC_OVERFLOW_CHECK]
                                                    [comment:            pragma Loop_Invariant(Result = First_Operand*i);                                                         ^ pkg_multiply.adb:16:57:VC_OVERFLOW_CHECK]
                                                    [GP_Sloc:pkg_multiply.adb:16:57]
                                                    [GP_Shape:if__L_1_while__pragargs__cmp__mult]
                                                    [GP_Id:1] (Standard__integer.range_check_
                                                                 (Pkg_multiply__multiply__first_operand.first_operand
                                                                    * !Pkg_multiply__multiply__L_1__i.i)))))
                                               in abstract ensures
                                               { True } begin  (let _ = 
                                                              () in ())  end)
                                               invariant
                                               {([sloc:pkg_multiply.adb:16] 
                                                ([GP_Reason:VC_LOOP_INVARIANT]
                                                [GP_Sloc:pkg_multiply.adb:16:35]
                                                [comment:            pragma Loop_Invariant(Result = First_Operand*i);                                   ^ pkg_multiply.adb:16:35:VC_LOOP_INVARIANT]
                                                [vc:annotation]
                                                [GP_Shape:if__L_1_while__pragargs__cmp]
                                                [GP_Id:2] ([GP_Sloc:pkg_multiply.adb:16:35]
                                                          [GP_Pretty_Ada:868] (
                                                          !Pkg_multiply__multiply__result.result__
                                                            = (Pkg_multiply__multiply__first_operand.first_operand
                                                                 * !Pkg_multiply__multiply__L_1__i.i)))))}
                                               
                                               (* Assume implicit invariants from the loop pkg_multiply.adb:13 *);
                                               assume
                                               { (_gnatprove_standard.Boolean.andb
                                                    ((True /\
                                                        (if
                                                        ((True = True) \/
                                                           (1
                                                              <= Pkg_multiply__multiply__second_operand.second_operand))
                                                        then
                                                        (Pkg_multiply__multiply__L_1__T1b.dynamic_property
                                                           1
                                                           Pkg_multiply__multiply__second_operand.second_operand
                                                           !Pkg_multiply__multiply__L_1__i.i)
                                                        ) /\ True /\ True) /\
                                                       (Standard__integer___axiom.dynamic_invariant
                                                          !Pkg_multiply__multiply__result.result__
                                                          False True True
                                                          True) /\ True /\
                                                       True)
                                                    ((1
                                                        <= !Pkg_multiply__multiply__L_1__i.i)
                                                       /\
                                                       (!Pkg_multiply__multiply__L_1__i.i
                                                          <= Pkg_multiply__multiply__second_operand.second_operand))) };
                                               (* Continuation of loop after loop invariant and variant *);
                                               (* Check for the exit condition and loop statements appearing before the loop invariant of loop pkg_multiply.adb:13 *);
                                               (if
                                               (!Pkg_multiply__multiply__L_1__i.i
                                                  = ([mlw:proxy_symbol]
                                                  [introduced] temp___164))
                                               then
                                               raise Pkg_multiply__multiply__L_1.L_1
                                               );
                                               ([sloc:pkg_multiply.adb:13] (
                                               Pkg_multiply__multiply__L_1__i.i
                                               :=
                                               (!Pkg_multiply__multiply__L_1__i.i
                                                  + 1)))
                                                end loop) with
                                           | Pkg_multiply__multiply__L_1.L_1 
                                           -> ()) )))))  else
                                           ([GP_Sloc:pkg_multiply.adb:19:7] 
                                           (if
                                           ([sloc:pkg_multiply.adb:19] ([branch_id=873]
                                           _gnatprove_standard.Main.spark__branch
                                           :=
                                           ((Pkg_multiply__multiply__first_operand.first_operand
                                               > 0) &&
                                              (Pkg_multiply__multiply__second_operand.second_operand
                                                 < 0))));
                                           ([branch_id=873] _gnatprove_standard.Main.spark__branch).bool__content
                                           then
                                           ();
                                           ([GP_Sloc:pkg_multiply.adb:21:38] 
                                           ([sloc:pkg_multiply.adb:21] (let ([mlw:proxy_symbol]
                                           [introduced] temp___175) = 
                                           1 in (let ([mlw:proxy_symbol]
                                           [introduced] temp___176) =
                                           Pkg_multiply__multiply__first_operand.first_operand
                                           in (
                                           Pkg_multiply__multiply__L_2__i.i
                                           :=
                                           ([mlw:proxy_symbol]
                                             [introduced] temp___175));
                                           (* Translation of an Ada loop from pkg_multiply.adb:21 *);
                                           (if
                                           (_gnatprove_standard.Boolean.andb
                                              (([mlw:proxy_symbol]
                                                 [introduced] temp___175)
                                                 <= !Pkg_multiply__multiply__L_2__i.i)
                                              (!Pkg_multiply__multiply__L_2__i.i
                                                 <= ([mlw:proxy_symbol]
                                                 [introduced] temp___176)))
                                           then
                                           (try
                                           (* While loop translating the Ada loop from pkg_multiply.adb:21 *);
                                             ([sloc:pkg_multiply.adb:23] 
                                             loop
                                               ();
                                               ([GP_Sloc:pkg_multiply.adb:22:23] 
                                               ([sloc:pkg_multiply.adb:22] ()));
                                               ([GP_Sloc:pkg_multiply.adb:22:20] 
                                               ([sloc:pkg_multiply.adb:22] (
                                               Pkg_multiply__multiply__result.result__
                                               :=
                                               ([sloc:pkg_multiply.adb:22] 
                                               ([comment:            Result := Add (Result, Second_Operand);                       ^ pkg_multiply.adb:22:23:VC_PRECONDITION]
                                               [GP_Id:11]
                                               [GP_Reason:VC_PRECONDITION]
                                               [vc:annotation]
                                               [GP_Shape:if__L_2_while__result_assign__call_add]
                                               [GP_Sloc:pkg_multiply.adb:22:23] (
                                               Pkg_add__add___axiom.add
                                                 !Pkg_multiply__multiply__result.result__
                                                 Pkg_multiply__multiply__second_operand.second_operand))))));
                                               (* Check for absence of RTE in the loop invariant and variant *);
                                               (let ([mlw:proxy_symbol]
                                               [introduced] temp___inv_178) =
                                               (!Pkg_multiply__multiply__result.result__
                                                  = ([sloc:pkg_multiply.adb:23] 
                                                    ([GP_Id:12]
                                                    [vc:annotation]
                                                    [GP_Reason:VC_OVERFLOW_CHECK]
                                                    [GP_Sloc:pkg_multiply.adb:23:59]
                                                    [GP_Shape:if__L_2_while__pragargs__cmp__mult]
                                                    [comment:            pragma Loop_Invariant(Result = Second_Operand * i);                                                           ^ pkg_multiply.adb:23:59:VC_OVERFLOW_CHECK] (
                                                    Standard__integer.range_check_
                                                      (Pkg_multiply__multiply__second_operand.second_operand
                                                         * !Pkg_multiply__multiply__L_2__i.i)))))
                                               in abstract ensures
                                               { True } begin  (let _ = 
                                                              () in ())  end)
                                               invariant
                                               {([sloc:pkg_multiply.adb:23] 
                                                ([GP_Sloc:pkg_multiply.adb:23:35]
                                                [GP_Id:13]
                                                [GP_Reason:VC_LOOP_INVARIANT]
                                                [comment:            pragma Loop_Invariant(Result = Second_Operand * i);                                   ^ pkg_multiply.adb:23:35:VC_LOOP_INVARIANT]
                                                [vc:annotation]
                                                [GP_Shape:if__L_2_while__pragargs__cmp] 
                                                ([GP_Sloc:pkg_multiply.adb:23:35]
                                                [GP_Pretty_Ada:899] (
                                                !Pkg_multiply__multiply__result.result__
                                                  = (Pkg_multiply__multiply__second_operand.second_operand
                                                       * !Pkg_multiply__multiply__L_2__i.i)))))}
                                               
                                               (* Assume implicit invariants from the loop pkg_multiply.adb:21 *);
                                               assume
                                               { (_gnatprove_standard.Boolean.andb
                                                    ((True /\
                                                        (if
                                                        ((True = True) \/
                                                           (1
                                                              <= Pkg_multiply__multiply__first_operand.first_operand))
                                                        then
                                                        (Pkg_multiply__multiply__L_2__T2b.dynamic_property
                                                           1
                                                           Pkg_multiply__multiply__first_operand.first_operand
                                                           !Pkg_multiply__multiply__L_2__i.i)
                                                        ) /\ True /\ True) /\
                                                       (Standard__integer___axiom.dynamic_invariant
                                                          !Pkg_multiply__multiply__result.result__
                                                          False True True
                                                          True) /\ True /\
                                                       True)
                                                    ((1
                                                        <= !Pkg_multiply__multiply__L_2__i.i)
                                                       /\
                                                       (!Pkg_multiply__multiply__L_2__i.i
                                                          <= Pkg_multiply__multiply__first_operand.first_operand))) };
                                               (* Continuation of loop after loop invariant and variant *);
                                               (* Check for the exit condition and loop statements appearing before the loop invariant of loop pkg_multiply.adb:21 *);
                                               (if
                                               (!Pkg_multiply__multiply__L_2__i.i
                                                  = ([mlw:proxy_symbol]
                                                  [introduced] temp___176))
                                               then
                                               raise Pkg_multiply__multiply__L_2.L_2
                                               );
                                               ([sloc:pkg_multiply.adb:21] (
                                               Pkg_multiply__multiply__L_2__i.i
                                               :=
                                               (!Pkg_multiply__multiply__L_2__i.i
                                                  + 1)))
                                                end loop) with
                                           | Pkg_multiply__multiply__L_2.L_2 
                                           -> ()) )))))  else
                                           ([GP_Sloc:pkg_multiply.adb:26:7] 
                                           (if
                                           ([sloc:pkg_multiply.adb:26] ([branch_id=904]
                                           _gnatprove_standard.Main.spark__branch
                                           :=
                                           ((Pkg_multiply__multiply__first_operand.first_operand
                                               < 0) &&
                                              (Pkg_multiply__multiply__second_operand.second_operand
                                                 > 0))));
                                           ([branch_id=904] _gnatprove_standard.Main.spark__branch).bool__content
                                           then
                                           ();
                                           ([GP_Sloc:pkg_multiply.adb:28:39] 
                                           ([sloc:pkg_multiply.adb:28] (let ([mlw:proxy_symbol]
                                           [introduced] temp___171) = 
                                           1 in (let ([mlw:proxy_symbol]
                                           [introduced] temp___172) =
                                           Pkg_multiply__multiply__second_operand.second_operand
                                           in (
                                           Pkg_multiply__multiply__L_3__i.i
                                           :=
                                           ([mlw:proxy_symbol]
                                             [introduced] temp___171));
                                           (* Translation of an Ada loop from pkg_multiply.adb:28 *);
                                           (if
                                           (_gnatprove_standard.Boolean.andb
                                              (([mlw:proxy_symbol]
                                                 [introduced] temp___171)
                                                 <= !Pkg_multiply__multiply__L_3__i.i)
                                              (!Pkg_multiply__multiply__L_3__i.i
                                                 <= ([mlw:proxy_symbol]
                                                 [introduced] temp___172)))
                                           then
                                           (try
                                           (* While loop translating the Ada loop from pkg_multiply.adb:28 *);
                                             ([sloc:pkg_multiply.adb:30] 
                                             loop
                                               ();
                                               ([GP_Sloc:pkg_multiply.adb:29:23] 
                                               ([sloc:pkg_multiply.adb:29] ()));
                                               ([GP_Sloc:pkg_multiply.adb:29:20] 
                                               ([sloc:pkg_multiply.adb:29] (
                                               Pkg_multiply__multiply__result.result__
                                               :=
                                               ([sloc:pkg_multiply.adb:29] 
                                               ([GP_Reason:VC_PRECONDITION]
                                               [comment:            Result := Add (Result, First_Operand);                       ^ pkg_multiply.adb:29:23:VC_PRECONDITION]
                                               [vc:annotation]
                                               [GP_Shape:if__L_3_while__result_assign__call_add]
                                               [GP_Sloc:pkg_multiply.adb:29:23]
                                               [GP_Id:8] (Pkg_add__add___axiom.add
                                                            !Pkg_multiply__multiply__result.result__
                                                            Pkg_multiply__multiply__first_operand.first_operand))))));
                                               (* Check for absence of RTE in the loop invariant and variant *);
                                               (let ([mlw:proxy_symbol]
                                               [introduced] temp___inv_174) =
                                               (!Pkg_multiply__multiply__result.result__
                                                  = ([sloc:pkg_multiply.adb:30] 
                                                    ([GP_Shape:if__L_3_while__pragargs__cmp__mult]
                                                    [GP_Sloc:pkg_multiply.adb:30:57]
                                                    [vc:annotation]
                                                    [GP_Reason:VC_OVERFLOW_CHECK]
                                                    [comment:            pragma Loop_Invariant(Result = First_Operand*i);                                                         ^ pkg_multiply.adb:30:57:VC_OVERFLOW_CHECK]
                                                    [GP_Id:9] (Standard__integer.range_check_
                                                                 (Pkg_multiply__multiply__first_operand.first_operand
                                                                    * !Pkg_multiply__multiply__L_3__i.i)))))
                                               in abstract ensures
                                               { True } begin  (let _ = 
                                                              () in ())  end)
                                               invariant
                                               {([sloc:pkg_multiply.adb:30] 
                                                ([GP_Id:10]
                                                [GP_Reason:VC_LOOP_INVARIANT]
                                                [vc:annotation]
                                                [GP_Sloc:pkg_multiply.adb:30:35]
                                                [comment:            pragma Loop_Invariant(Result = First_Operand*i);                                   ^ pkg_multiply.adb:30:35:VC_LOOP_INVARIANT]
                                                [GP_Shape:if__L_3_while__pragargs__cmp] 
                                                ([GP_Pretty_Ada:930]
                                                [GP_Sloc:pkg_multiply.adb:30:35] (
                                                !Pkg_multiply__multiply__result.result__
                                                  = (Pkg_multiply__multiply__first_operand.first_operand
                                                       * !Pkg_multiply__multiply__L_3__i.i)))))}
                                               
                                               (* Assume implicit invariants from the loop pkg_multiply.adb:28 *);
                                               assume
                                               { (_gnatprove_standard.Boolean.andb
                                                    ((True /\
                                                        (if
                                                        ((True = True) \/
                                                           (1
                                                              <= Pkg_multiply__multiply__second_operand.second_operand))
                                                        then
                                                        (Pkg_multiply__multiply__L_3__T3b.dynamic_property
                                                           1
                                                           Pkg_multiply__multiply__second_operand.second_operand
                                                           !Pkg_multiply__multiply__L_3__i.i)
                                                        ) /\ True /\ True) /\
                                                       (Standard__integer___axiom.dynamic_invariant
                                                          !Pkg_multiply__multiply__result.result__
                                                          False True True
                                                          True) /\ True /\
                                                       True)
                                                    ((1
                                                        <= !Pkg_multiply__multiply__L_3__i.i)
                                                       /\
                                                       (!Pkg_multiply__multiply__L_3__i.i
                                                          <= Pkg_multiply__multiply__second_operand.second_operand))) };
                                               (* Continuation of loop after loop invariant and variant *);
                                               (* Check for the exit condition and loop statements appearing before the loop invariant of loop pkg_multiply.adb:28 *);
                                               (if
                                               (!Pkg_multiply__multiply__L_3__i.i
                                                  = ([mlw:proxy_symbol]
                                                  [introduced] temp___172))
                                               then
                                               raise Pkg_multiply__multiply__L_3.L_3
                                               );
                                               ([sloc:pkg_multiply.adb:28] (
                                               Pkg_multiply__multiply__L_3__i.i
                                               :=
                                               (!Pkg_multiply__multiply__L_3__i.i
                                                  + 1)))
                                                end loop) with
                                           | Pkg_multiply__multiply__L_3.L_3 
                                           -> ()) )))))  else
                                           ([GP_Sloc:pkg_multiply.adb:33:7] 
                                           (if
                                           ([sloc:pkg_multiply.adb:33] ([branch_id=935]
                                           _gnatprove_standard.Main.spark__branch
                                           :=
                                           ((Pkg_multiply__multiply__first_operand.first_operand
                                               < 0) &&
                                              (Pkg_multiply__multiply__second_operand.second_operand
                                                 < 0))));
                                           ([branch_id=935] _gnatprove_standard.Main.spark__branch).bool__content
                                           then
                                           ();
                                           ([GP_Sloc:pkg_multiply.adb:35:40] 
                                           ([sloc:pkg_multiply.adb:35] (let ([mlw:proxy_symbol]
                                           [introduced] temp___167) = 
                                           1 in (let ([mlw:proxy_symbol]
                                           [introduced] temp___168) =
                                           ([sloc:pkg_multiply.adb:35] 
                                           ([comment:         for i in 1 .. -Second_Operand loop                        ^ pkg_multiply.adb:35:24:VC_OVERFLOW_CHECK]
                                           [GP_Sloc:pkg_multiply.adb:35:24]
                                           [vc:annotation]
                                           [GP_Reason:VC_OVERFLOW_CHECK]
                                           [GP_Shape:if__L_4_while__range__minus]
                                           [GP_Id:7] (Standard__integer.range_check_
                                                        (-
                                                           Pkg_multiply__multiply__second_operand.second_operand))))
                                           in (
                                           Pkg_multiply__multiply__L_4__i.i
                                           :=
                                           ([mlw:proxy_symbol]
                                             [introduced] temp___167));
                                           (* Translation of an Ada loop from pkg_multiply.adb:35 *);
                                           (if
                                           (_gnatprove_standard.Boolean.andb
                                              (([mlw:proxy_symbol]
                                                 [introduced] temp___167)
                                                 <= !Pkg_multiply__multiply__L_4__i.i)
                                              (!Pkg_multiply__multiply__L_4__i.i
                                                 <= ([mlw:proxy_symbol]
                                                 [introduced] temp___168)))
                                           then
                                           (try
                                           (* While loop translating the Ada loop from pkg_multiply.adb:35 *);
                                             ([sloc:pkg_multiply.adb:37] 
                                             loop
                                               ();
                                               ([GP_Sloc:pkg_multiply.adb:36:23] 
                                               ([sloc:pkg_multiply.adb:36] ()));
                                               ([GP_Sloc:pkg_multiply.adb:36:20] 
                                               ([sloc:pkg_multiply.adb:36] (
                                               Pkg_multiply__multiply__result.result__
                                               :=
                                               ([sloc:pkg_multiply.adb:36] 
                                               ([GP_Reason:VC_PRECONDITION]
                                               [vc:annotation]
                                               [GP_Sloc:pkg_multiply.adb:36:23]
                                               [comment:            Result := Add (Result, -First_Operand);                       ^ pkg_multiply.adb:36:23:VC_PRECONDITION]
                                               [GP_Id:4]
                                               [GP_Shape:if__L_4_while__result_assign__call_add] (
                                               Pkg_add__add___axiom.add
                                                 !Pkg_multiply__multiply__result.result__
                                                 ( ([sloc:pkg_multiply.adb:36] 
                                                   ([GP_Shape:if__L_4_while__result_assign__call_add__minus]
                                                   [vc:annotation]
                                                   [GP_Sloc:pkg_multiply.adb:36:36]
                                                   [GP_Reason:VC_OVERFLOW_CHECK]
                                                   [comment:            Result := Add (Result, -First_Operand);                                    ^ pkg_multiply.adb:36:36:VC_OVERFLOW_CHECK]
                                                   [GP_Id:3] (Standard__integer.range_check_
                                                                (-
                                                                   Pkg_multiply__multiply__first_operand.first_operand)))))))))));
                                               (* Check for absence of RTE in the loop invariant and variant *);
                                               (let ([mlw:proxy_symbol]
                                               [introduced] temp___inv_170) =
                                               (!Pkg_multiply__multiply__result.result__
                                                  = ([sloc:pkg_multiply.adb:37] 
                                                    ([GP_Shape:if__L_4_while__pragargs__cmp__mult]
                                                    [GP_Sloc:pkg_multiply.adb:37:57]
                                                    [vc:annotation]
                                                    [GP_Reason:VC_OVERFLOW_CHECK]
                                                    [comment:            pragma Loop_Invariant(Result = First_Operand*(-i));                                                         ^ pkg_multiply.adb:37:57:VC_OVERFLOW_CHECK]
                                                    [GP_Id:5] (Standard__integer.range_check_
                                                                 (Pkg_multiply__multiply__first_operand.first_operand
                                                                    * (
                                                                    -
                                                                    !Pkg_multiply__multiply__L_4__i.i))))))
                                               in abstract ensures
                                               { True } begin  (let _ = 
                                                              () in ())  end)
                                               invariant
                                               {([sloc:pkg_multiply.adb:37] 
                                                ([GP_Reason:VC_LOOP_INVARIANT]
                                                [GP_Shape:if__L_4_while__pragargs__cmp]
                                                [vc:annotation]
                                                [GP_Sloc:pkg_multiply.adb:37:35]
                                                [comment:            pragma Loop_Invariant(Result = First_Operand*(-i));                                   ^ pkg_multiply.adb:37:35:VC_LOOP_INVARIANT]
                                                [GP_Id:6] ([GP_Sloc:pkg_multiply.adb:37:35]
                                                          [GP_Pretty_Ada:963] (
                                                          !Pkg_multiply__multiply__result.result__
                                                            = (Pkg_multiply__multiply__first_operand.first_operand
                                                                 * (-
                                                                    !Pkg_multiply__multiply__L_4__i.i))))))}
                                               
                                               (* Assume implicit invariants from the loop pkg_multiply.adb:35 *);
                                               assume
                                               { (_gnatprove_standard.Boolean.andb
                                                    ((True /\
                                                        (if
                                                        ((True = True) \/
                                                           (1
                                                              <= (-
                                                                    Pkg_multiply__multiply__second_operand.second_operand)))
                                                        then
                                                        (Pkg_multiply__multiply__L_4__T4b.dynamic_property
                                                           1
                                                           (-
                                                              Pkg_multiply__multiply__second_operand.second_operand)
                                                           !Pkg_multiply__multiply__L_4__i.i)
                                                        ) /\ True /\ True) /\
                                                       (Standard__integer___axiom.dynamic_invariant
                                                          !Pkg_multiply__multiply__result.result__
                                                          False True True
                                                          True) /\ True /\
                                                       True)
                                                    ((1
                                                        <= !Pkg_multiply__multiply__L_4__i.i)
                                                       /\
                                                       (!Pkg_multiply__multiply__L_4__i.i
                                                          <= (-
                                                                Pkg_multiply__multiply__second_operand.second_operand)))) };
                                               (* Continuation of loop after loop invariant and variant *);
                                               (* Check for the exit condition and loop statements appearing before the loop invariant of loop pkg_multiply.adb:35 *);
                                               (if
                                               (!Pkg_multiply__multiply__L_4__i.i
                                                  = ([mlw:proxy_symbol]
                                                  [introduced] temp___168))
                                               then
                                               raise Pkg_multiply__multiply__L_4.L_4
                                               );
                                               ([sloc:pkg_multiply.adb:35] (
                                               Pkg_multiply__multiply__L_4__i.i
                                               :=
                                               (!Pkg_multiply__multiply__L_4__i.i
                                                  + 1)))
                                                end loop) with
                                           | Pkg_multiply__multiply__L_4.L_4 
                                           -> ()) )))))  else ())))))))));
          raise Return__exc with | Return__exc  -> ());
        abstract ensures
        { True } begin  (let _ =
                       (!Pkg_multiply__multiply__result.result__
                          = ([sloc:pkg_multiply.ads:22] ([GP_Id:14]
                                                        [vc:annotation]
                                                        [GP_Reason:VC_OVERFLOW_CHECK]
                                                        [GP_Shape:pragargs__cmp__mult]
                                                        [GP_Sloc:pkg_multiply.ads:22:39]
                                                        [comment:      Post => (Result = First_Operand * Second_Operand);                                       ^ pkg_multiply.ads:22:39:VC_OVERFLOW_CHECK] (
                                                        Standard__integer.range_check_
                                                          (Pkg_multiply__multiply__first_operand.first_operand
                                                             * Pkg_multiply__multiply__second_operand.second_operand)))))
                       in ())  end

end

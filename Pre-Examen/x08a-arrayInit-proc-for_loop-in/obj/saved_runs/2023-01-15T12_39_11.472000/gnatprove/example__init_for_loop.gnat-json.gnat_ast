(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type integer  = <range -2147483648 2147483647>
  
  function   first () requires { True } ensures  { True } returns
    int = -2147483648
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = integer,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type integer__ref  = { mutable integer__content : integer }
  
  function   integer__ref_integer__content__projection (a : integer__ref)
    requires {  } ensures  {  } returns integer = a.integer__content
  
  meta model_projection function integer__ref_integer__content__projection
  
  meta inline:no function integer__ref_integer__content__projection
  
  function   integer__havoc (x : integer__ref) requires {  } ensures  {  }
    returns unit

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_18) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_14) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_15) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_16) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_17) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_14) = True) \/
          (Standard__integer.first <= Standard__integer.last))
       then
       (Standard__integer.dynamic_property Standard__integer.first
          Standard__integer.last ([mlw:proxy_symbol]
          [introduced] temp___expr_18))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_19) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_20) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
  
  use        Standard__integer
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Standard__integer.integer) requires { True }
    ensures  { True } returns int = (Standard__integer.integer'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Standard__integer.integer,
    predicate in_range = Standard__integer.in_range, function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing the array theory associated to type "Tt_vectorB" defined at example.ads:3, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__integer
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  use        Standard__integer__rep
  
  function   index_I1_one () requires { True } ensures  { True } returns
    int = 1
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  clone export _gnatprove_standard.Array__1 with axiom . type I1.t = int,
    predicate I1.le = <=, predicate I1.lt = <, predicate I1.gt = >,
    function I1.add = +, function I1.sub = -, function I1.one = index_I1_one,
    type component_type = component_type
  
  function   bool_eq
    (a : map a__first : int a__last : int b : map b__first : int
    b__last : int) requires { True } ensures  { True } returns
    bool = ((if (a__first <= a__last) then
            ((b__first <= b__last) /\
               ((a__last - a__first) = (b__last - b__first)))
             else (b__first > b__last)) /\
              --pp_universal_quantif NOT IMPLEMENTED)
  
  axiom bool_eq_rev : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a ref holding the value of variable "v" defined at example.ads:6, created in Gnat2Why.Decls.Translate_Variable *)
module Example__init_for_loop__v
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Array__Int__Standard__integer
  
  val v [model_projected] [model_trace:876]
  [name:V] [sloc:example.ads:6]: Array__Int__Standard__integer.map

end

(* Module for defining the constant "value" defined at example.ads:6, created in Gnat2Why.Decls.Translate_Constant *)
module Example__init_for_loop__value
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  function [model_trace:879] [name:Value] [sloc:example.ads:6] value 
    () requires {  } ensures  {  } returns int

end

(* Module for defining a ref holding the value of variable "i" defined at example.adb:5, created in Gnat2Why.Decls.Translate_Variable *)
module Example__init_for_loop__L_1__i
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val i [name:i] [model_projected]
  [model_trace:831] [sloc:example.adb:5]: int

end

(* Module giving axioms for type "t_vector" defined at example.ads:3, created in Gnat2Why.Types.Generate_Type_Completion *)
module Example__t_vector___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Array__Int__Standard__integer
  use        Array__Int__Standard__integer
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_166) : Array__Int__Standard__integer.map
    ([mlw:proxy_symbol] [introduced] temp___is_init_162) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_163) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_164) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_165) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_168) : Array__Int__Standard__integer.map
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_169) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for defining the loop exit exception for the loop "L_1" defined at example.adb:5, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Example__init_for_loop__L_1
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  --pp_exception_declaration NOT IMPLEMENTED

end

(* Module giving an empty axiom for the entity "i" defined at example.adb:5, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Example__init_for_loop__L_1__i___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "L_1" defined at example.adb:5, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Example__init_for_loop__L_1___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "v" defined at example.ads:6, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Example__init_for_loop__v___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "value" defined at example.ads:6, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Example__init_for_loop__value___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module for checking contracts and absence of run-time errors in subprogram "init_for_loop" defined at example.ads:6, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Example__init_for_loop__subprogram_def
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        _gnatprove_standard.Boolean
  use        Standard__integer
  use        Standard__integer___axiom
  use        Standard__integer__rep
  use        Array__Int__Standard__integer
  use        Example__init_for_loop__v
  use        Example__init_for_loop__value
  use        Example__init_for_loop__L_1__i
  use        Array__Int__Standard__integer
  use        Example__t_vector___axiom
  use        Example__init_for_loop__L_1
  use        Standard__integer___axiom
  use        Example__init_for_loop__L_1__i___axiom
  use        Example__init_for_loop__L_1___axiom
  use        Example__t_vector___axiom
  use        Example__init_for_loop__v___axiom
  use        Example__init_for_loop__value___axiom
  
  function [GP_Subp:example.ads:6] [sloc:example.ads:6] def
    (__void_param : unit) requires { True } ensures 
    { ([sloc:example.ads:10] ([GP_Shape:pragargs__forall]
                             [GP_Reason:VC_POSTCONDITION] [model_vc_post]
                             [GP_Id:0]
                             [comment:     Post => (for all J in V'Range =>              ^ example.ads:10:14:VC_POSTCONDITION]
                             [GP_Sloc:example.ads:10:14] --pp_universal_quantif NOT IMPLEMENTED)) }
    returns
     = (* Assume dynamic invariants of inputs of the subprogram example.ads:6 *);
        assume
        { (Example__t_vector___axiom.dynamic_invariant
             !Example__init_for_loop__v.v False False True True) };
        assume
        { (Standard__integer___axiom.dynamic_invariant
             Example__init_for_loop__value.value True False True True) };
        (* Assume moved pointers in outputs of the subprogram example.ads:6 *);
        (* Check for RTE in the Pre of the subprogram example.ads:6 *);
        abstract ensures
        { True } begin  (let _ = (Example__init_for_loop__value.value > 0) in
                       ())  end;
        (* Assume Pre of the subprogram example.ads:6 *);
        assume
        { ([GP_Pretty_Ada:944] (Example__init_for_loop__value.value > 0)) };
        (try
        ();
          ([sloc:example.adb:5] ());
          ();
          ([GP_Sloc:example.adb:5:24] ([sloc:example.adb:5] (let ([mlw:proxy_symbol]
                                      [introduced] temp___173) = 1 in
                                      (let ([mlw:proxy_symbol]
                                      [introduced] temp___174) = 3 in
                                      (* Translation of an unrolled Ada loop from example.adb:5 *);
                                      (try
                                      (let temp___loop_entry_176 =
                                        !Example__init_for_loop__v.v in
                                        (* Unrolling of the loop statements of loop example.adb:5 *);
                                        ( Example__init_for_loop__L_1__i.i :=
                                        1);
                                        ();
                                        ([GP_Sloc:example.adb:7:15] ([sloc:example.adb:7] (
                                                                    Example__init_for_loop__v.v
                                                                    :=
                                                                    (Array__Int__Standard__integer.set
                                                                    !Example__init_for_loop__v.v
                                                                    !Example__init_for_loop__L_1__i.i
                                                                    (Standard__integer__rep.of_rep
                                                                    Example__init_for_loop__value.value)))));
                                        ( Example__init_for_loop__L_1__i.i :=
                                        2);
                                        ();
                                        ([GP_Sloc:example.adb:7:15] ([sloc:example.adb:7] (
                                                                    Example__init_for_loop__v.v
                                                                    :=
                                                                    (Array__Int__Standard__integer.set
                                                                    !Example__init_for_loop__v.v
                                                                    !Example__init_for_loop__L_1__i.i
                                                                    (Standard__integer__rep.of_rep
                                                                    Example__init_for_loop__value.value)))));
                                        ( Example__init_for_loop__L_1__i.i :=
                                        3);
                                        ();
                                        ([GP_Sloc:example.adb:7:15] ([sloc:example.adb:7] (
                                                                    Example__init_for_loop__v.v
                                                                    :=
                                                                    (Array__Int__Standard__integer.set
                                                                    !Example__init_for_loop__v.v
                                                                    !Example__init_for_loop__L_1__i.i
                                                                    (Standard__integer__rep.of_rep
                                                                    Example__init_for_loop__value.value)))))) with
                                      | Example__init_for_loop__L_1.L_1  ->
                                      ())))));
          raise Return__exc with | Return__exc  -> ());
        abstract ensures
        { True } begin  (let _ = (let j = ( any  pre {} post {} return int)
                       in
                       (if
                       (_gnatprove_standard.Boolean.andb (1 <= j) (j <= 3))
                       then
                       abstract ensures
                       { True } begin  (let _ =
                                      ((Standard__integer__rep.to_rep
                                          (Array__Int__Standard__integer.get
                                             !Example__init_for_loop__v.v j))
                                         = Example__init_for_loop__value.value)
                                      in ())  end
                       ));
                       ( any  pre {} post
                       {((result = True) <->
                           --pp_universal_quantif NOT IMPLEMENTED)}
                       return bool) in ())  end

end

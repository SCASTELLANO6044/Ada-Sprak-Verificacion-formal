(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type integer  = <range -2147483648 2147483647>
  
  function   first () requires { True } ensures  { True } returns
    int = -2147483648
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = integer,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type integer__ref  = { mutable integer__content : integer }
  
  function   integer__ref_integer__content__projection (a : integer__ref)
    requires {  } ensures  {  } returns integer = a.integer__content
  
  meta model_projection function integer__ref_integer__content__projection
  
  meta inline:no function integer__ref_integer__content__projection
  
  function   integer__havoc (x : integer__ref) requires {  } ensures  {  }
    returns unit

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_18) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_14) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_15) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_16) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_17) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_14) = True) \/
          (Standard__integer.first <= Standard__integer.last))
       then
       (Standard__integer.dynamic_property Standard__integer.first
          Standard__integer.last ([mlw:proxy_symbol]
          [introduced] temp___expr_18))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_19) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_20) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type natural  = <range 0 2147483647>
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = natural,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type natural__ref  = { mutable natural__content : natural }
  
  function   natural__ref_natural__content__projection (a : natural__ref)
    requires {  } ensures  {  } returns natural = a.natural__content
  
  meta model_projection function natural__ref_natural__content__projection
  
  meta inline:no function natural__ref_natural__content__projection
  
  function   natural__havoc (x : natural__ref) requires {  } ensures  {  }
    returns unit

end

(* Module for defining the constant "x" defined at example.ads:3, created in Gnat2Why.Decls.Translate_Constant *)
module Example__absolute_value__x
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  function [model_trace:877] [name:X] [sloc:example.ads:3] x () requires {  }
    ensures  {  } returns int

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__natural
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_46) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_42) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_43) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_44) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_45) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_42) = True) \/
          (Standard__natural.first <= Standard__natural.last))
       then
       (Standard__natural.dynamic_property Standard__natural.first
          Standard__natural.last ([mlw:proxy_symbol]
          [introduced] temp___expr_46))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_47) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_48) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving an empty axiom for the entity "x" defined at example.ads:3, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Example__absolute_value__x___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module for checking contracts and absence of run-time errors in subprogram "absolute_value" defined at example.ads:3, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Example__absolute_value__subprogram_def
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        _gnatprove_standard.Main
  use        _gnatprove_standard.Int_Abs
  use        Standard__integer
  use        Standard__integer___axiom
  use        Standard__natural
  use        Example__absolute_value__x
  use        Standard__integer___axiom
  use        Standard__natural___axiom
  use        Standard__integer___axiom
  use        Example__absolute_value__x___axiom
  
  val example__absolute_value__result [model_trace:876@result]
  [model_projected]
  [name:Absolute_Value] : int
  
  function [GP_Subp:example.ads:3] [sloc:example.ads:3] def
    (__void_param : unit) requires { True } ensures 
    { ([sloc:example.ads:6] ([GP_Reason:VC_POSTCONDITION]
                            [GP_Sloc:example.ads:6:16]
                            [GP_Shape:pragargs__cmp]
                            [comment:       Post => Absolute_Value'Result = abs (X);                ^ example.ads:6:16:VC_POSTCONDITION]
                            [model_vc_post]
                            [GP_Id:4] ([GP_Sloc:example.ads:6:16]
                                      [GP_Pretty_Ada:948] (!example__absolute_value__result
                                                             = (_gnatprove_standard.Int_Abs.abs
                                                                  Example__absolute_value__x.x))))) }
    returns
     = (* Assume dynamic invariants of inputs of the subprogram example.ads:3 *);
        assume
        { (Standard__integer___axiom.dynamic_invariant
             Example__absolute_value__x.x True False True True) };
        (* Assume moved pointers in outputs of the subprogram example.ads:3 *);
        (* Check for RTE in the Pre of the subprogram example.ads:3 *);
        abstract ensures
        { True } begin  (let _ = (Example__absolute_value__x.x > -2147483648)
                       in ())  end;
        (* Assume Pre of the subprogram example.ads:3 *);
        assume
        { ([GP_Pretty_Ada:936] (Example__absolute_value__x.x > -2147483648)) };
        (try
        ();
          ([GP_Sloc:example.adb:5:7] ([sloc:example.adb:5] (if
                                                           ([sloc:example.adb:5] ([branch_id=829]
                                                           _gnatprove_standard.Main.spark__branch
                                                           :=
                                                           (Example__absolute_value__x.x
                                                              >= 0)));
                                                           ([branch_id=829] _gnatprove_standard.Main.spark__branch).bool__content
                                                           then
                                                           ();
                                                           ([GP_Sloc:example.adb:6:10] 
                                                           ([sloc:example.adb:6] (
                                                           example__absolute_value__result
                                                           :=
                                                           ( ([sloc:example.adb:6] 
                                                             ([comment:         return X;                 ^ example.adb:6:17:VC_RANGE_CHECK]
                                                             [vc:annotation]
                                                             [GP_Shape:if__return]
                                                             [GP_Reason:VC_RANGE_CHECK]
                                                             [GP_Id:0]
                                                             [GP_Sloc:example.adb:6:17] (
                                                             Standard__natural.range_check_
                                                               Example__absolute_value__x.x)))));
                                                           raise Return__exc))
                                                            else
                                                           ();
                                                           ([GP_Sloc:example.adb:8:10] 
                                                           ([sloc:example.adb:8] (
                                                           example__absolute_value__result
                                                           :=
                                                           ( ([sloc:example.adb:8] 
                                                             ([GP_Shape:if__return__minus]
                                                             [comment:         return -X;                 ^ example.adb:8:17:VC_RANGE_CHECK]
                                                             [vc:annotation]
                                                             [GP_Sloc:example.adb:8:17]
                                                             [GP_Reason:VC_RANGE_CHECK]
                                                             [GP_Id:2] (
                                                             Standard__natural.range_check_
                                                               ([sloc:example.adb:8] 
                                                               ([GP_Shape:if__return__minus]
                                                               [vc:annotation]
                                                               [GP_Reason:VC_OVERFLOW_CHECK]
                                                               [comment:         return -X;                 ^ example.adb:8:17:VC_OVERFLOW_CHECK]
                                                               [GP_Sloc:example.adb:8:17]
                                                               [GP_Id:1] (
                                                               Standard__integer.range_check_
                                                                 (-
                                                                    Example__absolute_value__x.x)))))))));
                                                           raise Return__exc)))));
          raise Return__exc with | Return__exc  -> ());
        abstract ensures
        { True } begin  (let _ =
                       (!example__absolute_value__result
                          = ([sloc:example.ads:6] ([GP_Sloc:example.ads:6:40]
                                                  [vc:annotation]
                                                  [GP_Shape:pragargs__cmp__abs]
                                                  [GP_Reason:VC_OVERFLOW_CHECK]
                                                  [comment:       Post => Absolute_Value'Result = abs (X);                                        ^ example.ads:6:40:VC_OVERFLOW_CHECK]
                                                  [GP_Id:3] (Standard__integer.range_check_
                                                               (_gnatprove_standard.Int_Abs.abs
                                                                  Example__absolute_value__x.x)))))
                       in ())  end;
        !example__absolute_value__result

end

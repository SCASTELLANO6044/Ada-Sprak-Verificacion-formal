(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type integer  = <range -2147483648 2147483647>
  
  function   first () requires { True } ensures  { True } returns
    int = -2147483648
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = integer,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type integer__ref  = { mutable integer__content : integer }
  
  function   integer__ref_integer__content__projection (a : integer__ref)
    requires {  } ensures  {  } returns integer = a.integer__content
  
  meta model_projection function integer__ref_integer__content__projection
  
  meta inline:no function integer__ref_integer__content__projection
  
  function   integer__havoc (x : integer__ref) requires {  } ensures  {  }
    returns unit

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
  
  use        Standard__integer
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Standard__integer.integer) requires { True }
    ensures  { True } returns int = (Standard__integer.integer'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Standard__integer.integer,
    predicate in_range = Standard__integer.in_range, function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type natural  = <range 0 2147483647>
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = natural,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type natural__ref  = { mutable natural__content : natural }
  
  function   natural__ref_natural__content__projection (a : natural__ref)
    requires {  } ensures  {  } returns natural = a.natural__content
  
  meta model_projection function natural__ref_natural__content__projection
  
  meta inline:no function natural__ref_natural__content__projection
  
  function   natural__havoc (x : natural__ref) requires {  } ensures  {  }
    returns unit

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__natural
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_46) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_42) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_43) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_44) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_45) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_42) = True) \/
          (Standard__natural.first <= Standard__natural.last))
       then
       (Standard__natural.dynamic_property Standard__natural.first
          Standard__natural.last ([mlw:proxy_symbol]
          [introduced] temp___expr_46))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_47) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_48) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type positive  = <range 1 2147483647>
  
  function   first () requires { True } ensures  { True } returns int = 1
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = positive,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type positive__ref  = { mutable positive__content : positive }
  
  function   positive__ref_positive__content__projection (a : positive__ref)
    requires {  } ensures  {  } returns positive = a.positive__content
  
  meta model_projection function positive__ref_positive__content__projection
  
  meta inline:no function positive__ref_positive__content__projection
  
  function   positive__havoc (x : positive__ref) requires {  } ensures  {  }
    returns unit

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__positive
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_53) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_49) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_50) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_51) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_52) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_49) = True) \/
          (Standard__positive.first <= Standard__positive.last))
       then
       (Standard__positive.dynamic_property Standard__positive.first
          Standard__positive.last ([mlw:proxy_symbol]
          [introduced] temp___expr_53))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_54) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_55) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for defining a ref holding the value of variable "zero" defined at pkg_fromnegativetozero.ads:5, created in Gnat2Why.Decls.Translate_Variable *)
module Pkg_fromnegativetozero__zero
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val zero [name:zero] [model_projected]
  [model_trace:916] [sloc:pkg_fromnegativetozero.ads:5]: int

end

(* Module for axiomatizing the array theory associated to type "t_vec" defined at pkg_fromnegativetozero.ads:3, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__integer
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  use        Standard__integer__rep
  
  function   index_I1_one () requires { True } ensures  { True } returns
    int = 1
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  clone export _gnatprove_standard.Array__1 with axiom . type I1.t = int,
    predicate I1.le = <=, predicate I1.lt = <, predicate I1.gt = >,
    function I1.add = +, function I1.sub = -, function I1.one = index_I1_one,
    type component_type = component_type
  
  function   bool_eq
    (a : map a__first : int a__last : int b : map b__first : int
    b__last : int) requires { True } ensures  { True } returns
    bool = ((if (a__first <= a__last) then
            ((b__first <= b__last) /\
               ((a__last - a__first) = (b__last - b__first)))
             else (b__first > b__last)) /\
              --pp_universal_quantif NOT IMPLEMENTED)
  
  axiom bool_eq_rev : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a ref holding the value of variable "vec" defined at pkg_fromnegativetozero.ads:7, created in Gnat2Why.Decls.Translate_Variable *)
module Pkg_fromnegativetozero__fromnegativetozero__vec
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Standard__integer
  use        Array__Int__Standard__integer
  
  val vec [model_projected] [model_trace:921]
  [name:Vec] [sloc:pkg_fromnegativetozero.ads:7]: Array__Int__Standard__integer.map
  
  function [model_projected] [model_trace:921'First] [name:Vec]
    [sloc:pkg_fromnegativetozero.ads:7] vec__first () requires {  } ensures 
    {  } returns Standard__integer.integer
  
  function [model_projected] [model_trace:921'Last] [name:Vec]
    [sloc:pkg_fromnegativetozero.ads:7] vec__last () requires {  } ensures 
    {  } returns Standard__integer.integer

end

(* Module for defining a ref holding the value of variable "i" defined at pkg_fromnegativetozero.adb:5, created in Gnat2Why.Decls.Translate_Variable *)
module Pkg_fromnegativetozero__fromnegativetozero__i
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val i [model_trace:826] [name:i]
  [model_projected] [sloc:pkg_fromnegativetozero.adb:5]: int

end

(* Module for axiomatizing type "t_vec" defined at pkg_fromnegativetozero.ads:3, created in Gnat2Why.Types.Translate_Type *)
module Pkg_fromnegativetozero__t_vec
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  use        Standard__integer
  use        Standard__positive
  use        Standard__integer__rep
  use        Array__Int__Standard__integer
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   index_1_id (x : int) requires { True } ensures  { True } returns
    int = x
  
  clone export ada__model.Unconstr_Array with axiom . type map = Array__Int__Standard__integer.map,
    function array_bool_eq = Array__Int__Standard__integer.bool_eq,
    type index_base_type = Standard__integer.integer,
    type index_rep_type = int,
    function to_rep = Standard__integer__rep.to_rep,
    function rep_to_int = index_1_id,
    predicate in_range_base = Standard__integer.in_range,
    predicate index_dynamic_property = Standard__positive.dynamic_property,
    predicate index_rep_le = <=
  
  type t_vec  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  meta model_projection function to_array
  
  meta inline:no function to_array
  
  meta model_projection function first
  
  meta inline:no function first
  
  meta model_projection function last
  
  meta inline:no function last
  
  type t_vec__ref  = { mutable t_vec__content : t_vec }
  
  function   t_vec__ref_t_vec__content__projection (a : t_vec__ref) requires
    {  } ensures  {  } returns t_vec = a.t_vec__content
  
  meta model_projection function t_vec__ref_t_vec__content__projection
  
  meta inline:no function t_vec__ref_t_vec__content__projection
  
  function   t_vec__havoc (x : t_vec__ref) requires {  } ensures  {  }
    returns unit

end

(* Module for axiomatizing type "S1b" defined at pkg_fromnegativetozero.adb:3, created in Gnat2Why.Types.Translate_Type *)
module Pkg_fromnegativetozero__fromnegativetozero__S1b
  
  use export Pkg_fromnegativetozero__t_vec
  use import _gnatprove_standard.Main
  use import int.Int
  
  type s1b  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  type s1b__ref  = { mutable s1b__content : s1b }
  
  function   s1b__ref_s1b__content__projection (a : s1b__ref) requires {  }
    ensures  {  } returns s1b = a.s1b__content
  
  meta model_projection function s1b__ref_s1b__content__projection
  
  meta inline:no function s1b__ref_s1b__content__projection
  
  function   s1b__havoc (x : s1b__ref) requires {  } ensures  {  } returns
    unit

end

(* Module for defining the loop exit exception for the loop "L_1" defined at pkg_fromnegativetozero.adb:9, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Pkg_fromnegativetozero__fromnegativetozero__L_1
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  --pp_exception_declaration NOT IMPLEMENTED

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_18) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_14) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_15) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_16) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_17) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_14) = True) \/
          (Standard__integer.first <= Standard__integer.last))
       then
       (Standard__integer.dynamic_property Standard__integer.first
          Standard__integer.last ([mlw:proxy_symbol]
          [introduced] temp___expr_18))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_19) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_20) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving an empty axiom for the entity "i" defined at pkg_fromnegativetozero.adb:5, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pkg_fromnegativetozero__fromnegativetozero__i___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "L_1" defined at pkg_fromnegativetozero.adb:9, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pkg_fromnegativetozero__fromnegativetozero__L_1___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving axioms for type "t_vec" defined at pkg_fromnegativetozero.ads:3, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pkg_fromnegativetozero__t_vec___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Standard__positive
  use        Pkg_fromnegativetozero__t_vec
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_166) : Pkg_fromnegativetozero__t_vec.t_vec
    ([mlw:proxy_symbol] [introduced] temp___is_init_162) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_163) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_164) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_165) : bool) requires
    { True } ensures  { True } returns
     = (if ([mlw:proxy_symbol] [introduced] temp___skip_constant_163) then
       True  else
       (Pkg_fromnegativetozero__t_vec.dynamic_property
          Standard__positive.first Standard__positive.last
          (Pkg_fromnegativetozero__t_vec.first ([mlw:proxy_symbol]
             [introduced] temp___expr_166))
          (Pkg_fromnegativetozero__t_vec.last ([mlw:proxy_symbol]
             [introduced] temp___expr_166))))

end

(* Module giving an empty axiom for the entity "zero" defined at pkg_fromnegativetozero.ads:5, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pkg_fromnegativetozero__zero___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "vec" defined at pkg_fromnegativetozero.ads:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pkg_fromnegativetozero__fromnegativetozero__vec___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving axioms for type "S1b" defined at pkg_fromnegativetozero.adb:3, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pkg_fromnegativetozero__fromnegativetozero__S1b___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Standard__integer__rep
  use        Pkg_fromnegativetozero__fromnegativetozero__vec
  use        Pkg_fromnegativetozero__fromnegativetozero__S1b
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_175) : Pkg_fromnegativetozero__fromnegativetozero__S1b.s1b
    ([mlw:proxy_symbol] [introduced] temp___is_init_171) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_172) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_173) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_174) : bool) requires
    { True } ensures  { True } returns
     = (if ([mlw:proxy_symbol] [introduced] temp___skip_constant_172) then
       True  else
       (((Pkg_fromnegativetozero__fromnegativetozero__S1b.dynamic_property
            (Standard__integer__rep.to_rep
               Pkg_fromnegativetozero__fromnegativetozero__vec.vec__first)
            (Standard__integer__rep.to_rep
               Pkg_fromnegativetozero__fromnegativetozero__vec.vec__last)
            (Pkg_fromnegativetozero__fromnegativetozero__S1b.first
               ([mlw:proxy_symbol] [introduced] temp___expr_175))
            (Pkg_fromnegativetozero__fromnegativetozero__S1b.last
               ([mlw:proxy_symbol] [introduced] temp___expr_175))) /\
           ((Pkg_fromnegativetozero__fromnegativetozero__S1b.first
               ([mlw:proxy_symbol] [introduced] temp___expr_175))
              = (Standard__integer__rep.to_rep
                   Pkg_fromnegativetozero__fromnegativetozero__vec.vec__first)))
          /\
          ((Pkg_fromnegativetozero__fromnegativetozero__S1b.last
              ([mlw:proxy_symbol] [introduced] temp___expr_175))
             = (Standard__integer__rep.to_rep
                  Pkg_fromnegativetozero__fromnegativetozero__vec.vec__last))))
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_177) : Pkg_fromnegativetozero__fromnegativetozero__S1b.s1b
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_178) : bool)
    requires { True } ensures  { True } returns
     = (True /\
          ((Pkg_fromnegativetozero__fromnegativetozero__S1b.first
              ([mlw:proxy_symbol] [introduced] temp___expr_177))
             = (Standard__integer__rep.to_rep
                  Pkg_fromnegativetozero__fromnegativetozero__vec.vec__first))
          /\
          ((Pkg_fromnegativetozero__fromnegativetozero__S1b.last
              ([mlw:proxy_symbol] [introduced] temp___expr_177))
             = (Standard__integer__rep.to_rep
                  Pkg_fromnegativetozero__fromnegativetozero__vec.vec__last)))

end

(* Module for checking contracts and absence of run-time errors in subprogram "fromnegativetozero" defined at pkg_fromnegativetozero.ads:7, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Pkg_fromnegativetozero__fromnegativetozero__subprogram_def
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        _gnatprove_standard.Main
  use        _gnatprove_standard.Integer
  use        _gnatprove_standard.Boolean
  use        Standard__integer
  use        Standard__integer
  use        Standard__integer__rep
  use        Standard__natural___axiom
  use        Standard__positive
  use        Standard__positive___axiom
  use        Standard__integer__rep
  use        Pkg_fromnegativetozero__zero
  use        Array__Int__Standard__integer
  use        Pkg_fromnegativetozero__fromnegativetozero__vec
  use        Pkg_fromnegativetozero__fromnegativetozero__i
  use        Array__Int__Standard__integer
  use        Pkg_fromnegativetozero__t_vec
  use        Pkg_fromnegativetozero__fromnegativetozero__S1b
  use        Pkg_fromnegativetozero__fromnegativetozero__L_1
  use        Array__Int__Standard__integer
  use        Array__Int__Standard__integer
  use        Array__Int__Standard__integer
  use        Array__Int__Standard__integer
  use        Array__Int__Standard__integer
  use        Array__Int__Standard__integer
  use        Array__Int__Standard__integer
  use        Array__Int__Standard__integer
  use        Array__Int__Standard__integer
  use        Array__Int__Standard__integer
  use        Standard__integer___axiom
  use        Standard__natural___axiom
  use        Standard__positive___axiom
  use        Standard__integer___axiom
  use        Pkg_fromnegativetozero__fromnegativetozero__i___axiom
  use        Pkg_fromnegativetozero__fromnegativetozero__L_1___axiom
  use        Pkg_fromnegativetozero__t_vec___axiom
  use        Pkg_fromnegativetozero__zero___axiom
  use        Pkg_fromnegativetozero__fromnegativetozero__vec___axiom
  use        Pkg_fromnegativetozero__fromnegativetozero__S1b___axiom
  
  function [GP_Subp:pkg_fromnegativetozero.ads:7]
    [sloc:pkg_fromnegativetozero.ads:7] def (__void_param : unit) requires
    { True } ensures 
    { ([sloc:pkg_fromnegativetozero.ads:14] ([GP_Reason:VC_POSTCONDITION]
                                            [GP_Shape:pragargs__forsome]
                                            [GP_Sloc:pkg_fromnegativetozero.ads:14:19]
                                            [model_vc_post]
                                            [comment:       Post    => (for some i in Vec'Range => Vec(i) = 0);                   ^ pkg_fromnegativetozero.ads:14:19:VC_POSTCONDITION]
                                            [GP_Id:9] --pp_existential_quantif NOT IMPLEMENTED)) }
    returns
     = (* Assume dynamic invariants of inputs of the subprogram pkg_fromnegativetozero.ads:7 *);
        assume
        { (Standard__natural___axiom.dynamic_invariant
             !Pkg_fromnegativetozero__zero.zero True False True True) };
        assume
        { (if False then True  else
          (Pkg_fromnegativetozero__t_vec.dynamic_property
             Standard__positive.first Standard__positive.last
             (Pkg_fromnegativetozero__fromnegativetozero__S1b.first
                (Pkg_fromnegativetozero__fromnegativetozero__S1b.of_array
                   !Pkg_fromnegativetozero__fromnegativetozero__vec.vec
                   (Standard__integer__rep.to_rep
                      Pkg_fromnegativetozero__fromnegativetozero__vec.vec__first)
                   (Standard__integer__rep.to_rep
                      Pkg_fromnegativetozero__fromnegativetozero__vec.vec__last)))
             (Pkg_fromnegativetozero__fromnegativetozero__S1b.last
                (Pkg_fromnegativetozero__fromnegativetozero__S1b.of_array
                   !Pkg_fromnegativetozero__fromnegativetozero__vec.vec
                   (Standard__integer__rep.to_rep
                      Pkg_fromnegativetozero__fromnegativetozero__vec.vec__first)
                   (Standard__integer__rep.to_rep
                      Pkg_fromnegativetozero__fromnegativetozero__vec.vec__last))))) };
        (* Assume moved pointers in outputs of the subprogram pkg_fromnegativetozero.ads:7 *);
        (* Check for RTE in the Pre of the subprogram pkg_fromnegativetozero.ads:7 *);
        abstract ensures
        { True } begin  (let _ =
                       (((abstract ensures
                            { True } begin  (let _ =
                                           (Pkg_fromnegativetozero__fromnegativetozero__S1b.of_array
                                              !Pkg_fromnegativetozero__fromnegativetozero__vec.vec
                                              (Standard__integer__rep.to_rep
                                                 Pkg_fromnegativetozero__fromnegativetozero__vec.vec__first)
                                              (Standard__integer__rep.to_rep
                                                 Pkg_fromnegativetozero__fromnegativetozero__vec.vec__last))
                                           in ())  end;
                            (_gnatprove_standard.Integer.length
                               (Standard__integer__rep.to_rep
                                  Pkg_fromnegativetozero__fromnegativetozero__vec.vec__first)
                               (Standard__integer__rep.to_rep
                                  Pkg_fromnegativetozero__fromnegativetozero__vec.vec__last))
                            > 0) &&
                           ((Standard__integer__rep.to_rep abstract ensures
                               { True } begin  (let _ =
                                              (Pkg_fromnegativetozero__fromnegativetozero__S1b.of_array
                                                 !Pkg_fromnegativetozero__fromnegativetozero__vec.vec
                                                 (Standard__integer__rep.to_rep
                                                    Pkg_fromnegativetozero__fromnegativetozero__vec.vec__first)
                                                 (Standard__integer__rep.to_rep
                                                    Pkg_fromnegativetozero__fromnegativetozero__vec.vec__last))
                                              in ())  end;
                               Pkg_fromnegativetozero__fromnegativetozero__vec.vec__first)
                              = 1)) &&
                          ((Standard__integer__rep.to_rep abstract ensures
                              { True } begin  (let _ =
                                             (Pkg_fromnegativetozero__fromnegativetozero__S1b.of_array
                                                !Pkg_fromnegativetozero__fromnegativetozero__vec.vec
                                                (Standard__integer__rep.to_rep
                                                   Pkg_fromnegativetozero__fromnegativetozero__vec.vec__first)
                                                (Standard__integer__rep.to_rep
                                                   Pkg_fromnegativetozero__fromnegativetozero__vec.vec__last))
                                             in ())  end;
                              Pkg_fromnegativetozero__fromnegativetozero__vec.vec__last)
                             < 2147483647))
                       in ())  end;
        (* Assume Pre of the subprogram pkg_fromnegativetozero.ads:7 *);
        assume
        { ((([GP_Pretty_Ada:948] ((_gnatprove_standard.Integer.length
                                     (Standard__integer__rep.to_rep
                                        Pkg_fromnegativetozero__fromnegativetozero__vec.vec__first)
                                     (Standard__integer__rep.to_rep
                                        Pkg_fromnegativetozero__fromnegativetozero__vec.vec__last))
                                    > 0)) /\
              ([GP_Pretty_Ada:954] ((Standard__integer__rep.to_rep
                                       Pkg_fromnegativetozero__fromnegativetozero__vec.vec__first)
                                      = 1))) /\
             ([GP_Pretty_Ada:960] ((Standard__integer__rep.to_rep
                                      Pkg_fromnegativetozero__fromnegativetozero__vec.vec__last)
                                     < 2147483647))) };
        (try
        ();
          ([sloc:pkg_fromnegativetozero.adb:3] ());
          ([sloc:pkg_fromnegativetozero.adb:5] (
          Pkg_fromnegativetozero__fromnegativetozero__i.i := ( 1));
          assume
          { (Standard__positive___axiom.dynamic_invariant
               !Pkg_fromnegativetozero__fromnegativetozero__i.i True False
               True True) });
          ([sloc:pkg_fromnegativetozero.adb:9] ());
          ();
          ([GP_Sloc:pkg_fromnegativetozero.adb:9:27] ([sloc:pkg_fromnegativetozero.adb:9] 
                                                     (* Translation of an Ada loop from pkg_fromnegativetozero.adb:9 *);
                                                     (if
                                                     (!Pkg_fromnegativetozero__fromnegativetozero__i.i
                                                        <= (Standard__integer__rep.to_rep
                                                              abstract
                                                              ensures
                                                              { True } begin 
                                                               (let _ =
                                                              (Pkg_fromnegativetozero__fromnegativetozero__S1b.of_array
                                                                 !Pkg_fromnegativetozero__fromnegativetozero__vec.vec
                                                                 (Standard__integer__rep.to_rep
                                                                    Pkg_fromnegativetozero__fromnegativetozero__vec.vec__first)
                                                                 (Standard__integer__rep.to_rep
                                                                    Pkg_fromnegativetozero__fromnegativetozero__vec.vec__last))
                                                              in ())  end;
                                                              Pkg_fromnegativetozero__fromnegativetozero__vec.vec__last))
                                                     then
                                                     (try
                                                     (let temp___loop_entry_186
                                                       =
                                                       (Pkg_fromnegativetozero__fromnegativetozero__S1b.of_array
                                                          !Pkg_fromnegativetozero__fromnegativetozero__vec.vec
                                                          (Standard__integer__rep.to_rep
                                                             Pkg_fromnegativetozero__fromnegativetozero__vec.vec__first)
                                                          (Standard__integer__rep.to_rep
                                                             Pkg_fromnegativetozero__fromnegativetozero__vec.vec__last))
                                                       in
                                                       (* While loop translating the Ada loop from pkg_fromnegativetozero.adb:9 *);
                                                       ([sloc:pkg_fromnegativetozero.adb:16] 
                                                       loop
                                                         ();
                                                         ([GP_Sloc:pkg_fromnegativetozero.adb:10:17] 
                                                         ([sloc:pkg_fromnegativetozero.adb:10] ()));
                                                         ([GP_Sloc:pkg_fromnegativetozero.adb:10:10] 
                                                         ([sloc:pkg_fromnegativetozero.adb:10] 
                                                         (if
                                                         ([sloc:pkg_fromnegativetozero.adb:10] ([branch_id=842]
                                                         _gnatprove_standard.Main.spark__branch
                                                         :=
                                                         ((Standard__integer__rep.to_rep
                                                             (let ([mlw:proxy_symbol]
                                                             [introduced] temp___183)
                                                             =
                                                             (Pkg_fromnegativetozero__fromnegativetozero__S1b.of_array
                                                                !Pkg_fromnegativetozero__fromnegativetozero__vec.vec
                                                                (Standard__integer__rep.to_rep
                                                                   Pkg_fromnegativetozero__fromnegativetozero__vec.vec__first)
                                                                (Standard__integer__rep.to_rep
                                                                   Pkg_fromnegativetozero__fromnegativetozero__vec.vec__last))
                                                             in
                                                             (Array__Int__Standard__integer.get
                                                                (Pkg_fromnegativetozero__fromnegativetozero__S1b.to_array
                                                                   ([mlw:proxy_symbol]
                                                                   [introduced] temp___183))
                                                                assert
                                                                { ([sloc:pkg_fromnegativetozero.adb:10] 
                                                                  ([GP_Sloc:pkg_fromnegativetozero.adb:10:17]
                                                                  [vc:annotation]
                                                                  [GP_Reason:VC_INDEX_CHECK]
                                                                  [GP_Id:1]
                                                                  [comment:         if Vec(i) < 0 then                 ^ pkg_fromnegativetozero.adb:10:17:VC_INDEX_CHECK]
                                                                  [GP_Shape:L_1_while__if__cmp__ixdcomp] (
                                                                  ((Pkg_fromnegativetozero__fromnegativetozero__S1b.first
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___183))
                                                                    <= !Pkg_fromnegativetozero__fromnegativetozero__i.i)
                                                                    /\
                                                                    (
                                                                    !Pkg_fromnegativetozero__fromnegativetozero__i.i
                                                                    <= (
                                                                    Pkg_fromnegativetozero__fromnegativetozero__S1b.last
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___183)))))) };
                                                                !Pkg_fromnegativetozero__fromnegativetozero__i.i)))
                                                            < 0)));
                                                         ([branch_id=842] _gnatprove_standard.Main.spark__branch).bool__content
                                                         then
                                                         ();
                                                         ([GP_Sloc:pkg_fromnegativetozero.adb:11:17] 
                                                         ([sloc:pkg_fromnegativetozero.adb:11] ()));
                                                         ([GP_Sloc:pkg_fromnegativetozero.adb:11:23] 
                                                         ([sloc:pkg_fromnegativetozero.adb:11] ()));
                                                         ([GP_Sloc:pkg_fromnegativetozero.adb:11:20] 
                                                         ([sloc:pkg_fromnegativetozero.adb:11] (
                                                         Pkg_fromnegativetozero__fromnegativetozero__vec.vec
                                                         :=
                                                         (Pkg_fromnegativetozero__fromnegativetozero__S1b.to_array
                                                            (let ([mlw:proxy_symbol]
                                                            [introduced] temp___182)
                                                            =
                                                            (Pkg_fromnegativetozero__fromnegativetozero__S1b.of_array
                                                               !Pkg_fromnegativetozero__fromnegativetozero__vec.vec
                                                               (Standard__integer__rep.to_rep
                                                                  Pkg_fromnegativetozero__fromnegativetozero__vec.vec__first)
                                                               (Standard__integer__rep.to_rep
                                                                  Pkg_fromnegativetozero__fromnegativetozero__vec.vec__last))
                                                            in
                                                            --pp_record_update NOT IMPLEMENTED)))))
                                                          else ())));
                                                         (* Check for absence of RTE in the loop invariant and variant *);
                                                         (let ([mlw:proxy_symbol]
                                                         [introduced] temp___inv_193)
                                                         =
                                                         (_gnatprove_standard.Boolean.andb
                                                            (1
                                                               <= !Pkg_fromnegativetozero__fromnegativetozero__i.i)
                                                            (!Pkg_fromnegativetozero__fromnegativetozero__i.i
                                                               <= (Standard__integer__rep.to_rep
                                                                    abstract
                                                                    ensures
                                                                    { True } begin 
                                                                     (let _ =
                                                                    (Pkg_fromnegativetozero__fromnegativetozero__S1b.of_array
                                                                    !Pkg_fromnegativetozero__fromnegativetozero__vec.vec
                                                                    (Standard__integer__rep.to_rep
                                                                    Pkg_fromnegativetozero__fromnegativetozero__vec.vec__first)
                                                                    (Standard__integer__rep.to_rep
                                                                    Pkg_fromnegativetozero__fromnegativetozero__vec.vec__last))
                                                                    in ())  end;
                                                                    Pkg_fromnegativetozero__fromnegativetozero__vec.vec__last)))
                                                         in abstract ensures
                                                         { True } begin 
                                                          (let _ =
                                                         (let ([mlw:proxy_symbol]
                                                           [introduced] temp___inv_188)
                                                           =
                                                           (if
                                                           ((Standard__integer__rep.to_rep
                                                               (let ([mlw:proxy_symbol]
                                                               [introduced] temp___190)
                                                               =
                                                               (Pkg_fromnegativetozero__fromnegativetozero__S1b.of_array
                                                                  !Pkg_fromnegativetozero__fromnegativetozero__vec.vec
                                                                  (Standard__integer__rep.to_rep
                                                                    Pkg_fromnegativetozero__fromnegativetozero__vec.vec__first)
                                                                  (Standard__integer__rep.to_rep
                                                                    Pkg_fromnegativetozero__fromnegativetozero__vec.vec__last))
                                                               in
                                                               (Array__Int__Standard__integer.get
                                                                  (Pkg_fromnegativetozero__fromnegativetozero__S1b.to_array
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___190))
                                                                  assert
                                                                  { ([sloc:pkg_fromnegativetozero.adb:16] 
                                                                    ([GP_Shape:L_1_while__pragargs__if__cmp__ixdcomp]
                                                                    [vc:annotation]
                                                                    [GP_Reason:VC_INDEX_CHECK]
                                                                    [comment:         pragma Loop_Invariant(if Vec(i) < 0 then                                       ^ pkg_fromnegativetozero.adb:16:39:VC_INDEX_CHECK]
                                                                    [GP_Id:4]
                                                                    [GP_Sloc:pkg_fromnegativetozero.adb:16:39] (
                                                                    ((Pkg_fromnegativetozero__fromnegativetozero__S1b.first
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___190))
                                                                    <= !Pkg_fromnegativetozero__fromnegativetozero__i.i)
                                                                    /\
                                                                    (!Pkg_fromnegativetozero__fromnegativetozero__i.i
                                                                    <= (
                                                                    Pkg_fromnegativetozero__fromnegativetozero__S1b.last
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___190)))))) };
                                                                  !Pkg_fromnegativetozero__fromnegativetozero__i.i)))
                                                              < 0)
                                                           then
                                                           ((Standard__integer__rep.to_rep
                                                               (let ([mlw:proxy_symbol]
                                                               [introduced] temp___189)
                                                               =
                                                               (Pkg_fromnegativetozero__fromnegativetozero__S1b.of_array
                                                                  !Pkg_fromnegativetozero__fromnegativetozero__vec.vec
                                                                  (Standard__integer__rep.to_rep
                                                                    Pkg_fromnegativetozero__fromnegativetozero__vec.vec__first)
                                                                  (Standard__integer__rep.to_rep
                                                                    Pkg_fromnegativetozero__fromnegativetozero__vec.vec__last))
                                                               in
                                                               (Array__Int__Standard__integer.get
                                                                  (Pkg_fromnegativetozero__fromnegativetozero__S1b.to_array
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___189))
                                                                  assert
                                                                  { ([sloc:pkg_fromnegativetozero.adb:17] 
                                                                    ([GP_Shape:L_1_while__pragargs__if__cmp__ixdcomp]
                                                                    [vc:annotation]
                                                                    [GP_Sloc:pkg_fromnegativetozero.adb:17:39]
                                                                    [comment:                                  Vec(i) = zero);                                       ^ pkg_fromnegativetozero.adb:17:39:VC_INDEX_CHECK]
                                                                    [GP_Reason:VC_INDEX_CHECK]
                                                                    [GP_Id:3] (
                                                                    ((Pkg_fromnegativetozero__fromnegativetozero__S1b.first
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___189))
                                                                    <= !Pkg_fromnegativetozero__fromnegativetozero__i.i)
                                                                    /\
                                                                    (!Pkg_fromnegativetozero__fromnegativetozero__i.i
                                                                    <= (
                                                                    Pkg_fromnegativetozero__fromnegativetozero__S1b.last
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___189)))))) };
                                                                  !Pkg_fromnegativetozero__fromnegativetozero__i.i)))
                                                              = !Pkg_fromnegativetozero__zero.zero)
                                                            else
                                                           (_gnatprove_standard.Boolean.of_int
                                                              1)) in abstract
                                                           ensures
                                                           { True } begin 
                                                            (let _ = 
                                                           () in ())  end)
                                                         in ())  end);
                                                         abstract ensures
                                                         { True } begin 
                                                          (let _ =
                                                         !Pkg_fromnegativetozero__fromnegativetozero__i.i
                                                         in ())  end
                                                         invariant
                                                         {([sloc:pkg_fromnegativetozero.adb:14] 
                                                          ([GP_Sloc:pkg_fromnegativetozero.adb:14:32]
                                                          [GP_Reason:VC_LOOP_INVARIANT]
                                                          [vc:annotation]
                                                          [GP_Shape:L_1_while__pragargs__in]
                                                          [comment:         pragma Loop_Invariant(i in 1 .. Vec'Last);                                ^ pkg_fromnegativetozero.adb:14:32:VC_LOOP_INVARIANT]
                                                          [GP_Id:6] ([GP_Sloc:pkg_fromnegativetozero.adb:14:32]
                                                                    [GP_Pretty_Ada:859] (
                                                                    (1
                                                                    <= !Pkg_fromnegativetozero__fromnegativetozero__i.i)
                                                                    /\
                                                                    (!Pkg_fromnegativetozero__fromnegativetozero__i.i
                                                                    <= (
                                                                    Standard__integer__rep.to_rep
                                                                    Pkg_fromnegativetozero__fromnegativetozero__vec.vec__last))))))}
                                                         invariant
                                                         {([sloc:pkg_fromnegativetozero.adb:16] 
                                                          ([GP_Reason:VC_LOOP_INVARIANT]
                                                          [vc:annotation]
                                                          [GP_Shape:L_1_while__pragargs__if]
                                                          [comment:         pragma Loop_Invariant(if Vec(i) < 0 then                                ^ pkg_fromnegativetozero.adb:16:32:VC_LOOP_INVARIANT]
                                                          [GP_Sloc:pkg_fromnegativetozero.adb:16:32]
                                                          [GP_Id:5] (if
                                                                    (
                                                                    (Standard__integer__rep.to_rep
                                                                    (let ([mlw:proxy_symbol]
                                                                    [introduced] temp___192)
                                                                    =
                                                                    (Pkg_fromnegativetozero__fromnegativetozero__S1b.of_array
                                                                    !Pkg_fromnegativetozero__fromnegativetozero__vec.vec
                                                                    (Standard__integer__rep.to_rep
                                                                    Pkg_fromnegativetozero__fromnegativetozero__vec.vec__first)
                                                                    (Standard__integer__rep.to_rep
                                                                    Pkg_fromnegativetozero__fromnegativetozero__vec.vec__last))
                                                                    in
                                                                    (Array__Int__Standard__integer.get
                                                                    (Pkg_fromnegativetozero__fromnegativetozero__S1b.to_array
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___192))
                                                                    !Pkg_fromnegativetozero__fromnegativetozero__i.i)))
                                                                    < 0) then
                                                                    ([GP_Sloc:pkg_fromnegativetozero.adb:17:35]
                                                                    [GP_Pretty_Ada:883] (
                                                                    (Standard__integer__rep.to_rep
                                                                    (let ([mlw:proxy_symbol]
                                                                    [introduced] temp___191)
                                                                    =
                                                                    (Pkg_fromnegativetozero__fromnegativetozero__S1b.of_array
                                                                    !Pkg_fromnegativetozero__fromnegativetozero__vec.vec
                                                                    (Standard__integer__rep.to_rep
                                                                    Pkg_fromnegativetozero__fromnegativetozero__vec.vec__first)
                                                                    (Standard__integer__rep.to_rep
                                                                    Pkg_fromnegativetozero__fromnegativetozero__vec.vec__last))
                                                                    in
                                                                    (Array__Int__Standard__integer.get
                                                                    (Pkg_fromnegativetozero__fromnegativetozero__S1b.to_array
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___191))
                                                                    !Pkg_fromnegativetozero__fromnegativetozero__i.i)))
                                                                    = !Pkg_fromnegativetozero__zero.zero))
                                                                     else
                                                                    ([GP_Pretty_Ada:1126]
                                                                    [GP_Sloc:pkg_fromnegativetozero.adb:16:32] True))))}
                                                         variant 
                                                         {> =>
                                                          !Pkg_fromnegativetozero__fromnegativetozero__i.i}
                                                         (* Assume implicit invariants from the loop pkg_fromnegativetozero.adb:9 *);
                                                         assume
                                                         { ((True /\ True /\
                                                               True /\ True)
                                                              /\
                                                              (Standard__positive___axiom.dynamic_invariant
                                                                 !Pkg_fromnegativetozero__fromnegativetozero__i.i
                                                                 True True
                                                                 True True)
                                                              /\ True /\ True) };
                                                         (* Continuation of loop after loop invariant and variant *);
                                                         ();
                                                         ([GP_Sloc:pkg_fromnegativetozero.adb:19:10] 
                                                         ([sloc:pkg_fromnegativetozero.adb:19] ()));
                                                         ([GP_Sloc:pkg_fromnegativetozero.adb:19:15] 
                                                         ([sloc:pkg_fromnegativetozero.adb:19] ()));
                                                         ([GP_Sloc:pkg_fromnegativetozero.adb:19:12] 
                                                         ([sloc:pkg_fromnegativetozero.adb:19] (
                                                         Pkg_fromnegativetozero__fromnegativetozero__i.i
                                                         :=
                                                         ( ([sloc:pkg_fromnegativetozero.adb:19] 
                                                           ([comment:         i := i + 1;                 ^ pkg_fromnegativetozero.adb:19:17:VC_OVERFLOW_CHECK]
                                                           [vc:annotation]
                                                           [GP_Reason:VC_OVERFLOW_CHECK]
                                                           [GP_Sloc:pkg_fromnegativetozero.adb:19:17]
                                                           [GP_Id:2]
                                                           [GP_Shape:L_1_while__i_assign__add] (
                                                           Standard__integer.range_check_
                                                             (!Pkg_fromnegativetozero__fromnegativetozero__i.i
                                                                + 1))))))));
                                                         (* Check for the exit condition and loop statements appearing before the loop invariant of loop pkg_fromnegativetozero.adb:9 *);
                                                         (if
                                                         --pp_not NOT IMPLEMENTED
                                                         then
                                                         raise Pkg_fromnegativetozero__fromnegativetozero__L_1.L_1
                                                         )
                                                          end loop)) with
                                                     | Pkg_fromnegativetozero__fromnegativetozero__L_1.L_1 
                                                     -> ()) )));
          raise Return__exc with | Return__exc  -> ());
        abstract ensures
        { True } begin  (let _ = (let i = ( any  pre {} post {} return int)
                       in
                       (if
                       (_gnatprove_standard.Boolean.andb
                          ((Standard__integer__rep.to_rep abstract ensures
                              { True } begin  (let _ =
                                             (Pkg_fromnegativetozero__fromnegativetozero__S1b.of_array
                                                !Pkg_fromnegativetozero__fromnegativetozero__vec.vec
                                                (Standard__integer__rep.to_rep
                                                   Pkg_fromnegativetozero__fromnegativetozero__vec.vec__first)
                                                (Standard__integer__rep.to_rep
                                                   Pkg_fromnegativetozero__fromnegativetozero__vec.vec__last))
                                             in ())  end;
                              Pkg_fromnegativetozero__fromnegativetozero__vec.vec__first)
                             <= i)
                          (i
                             <= (Standard__integer__rep.to_rep abstract
                                   ensures
                                   { True } begin  (let _ =
                                                  (Pkg_fromnegativetozero__fromnegativetozero__S1b.of_array
                                                     !Pkg_fromnegativetozero__fromnegativetozero__vec.vec
                                                     (Standard__integer__rep.to_rep
                                                        Pkg_fromnegativetozero__fromnegativetozero__vec.vec__first)
                                                     (Standard__integer__rep.to_rep
                                                        Pkg_fromnegativetozero__fromnegativetozero__vec.vec__last))
                                                  in ())  end;
                                   Pkg_fromnegativetozero__fromnegativetozero__vec.vec__last)))
                       then
                       abstract ensures
                       { True } begin  (let _ =
                                      ((Standard__integer__rep.to_rep
                                          (let ([mlw:proxy_symbol]
                                          [introduced] temp___195) =
                                          (Pkg_fromnegativetozero__fromnegativetozero__S1b.of_array
                                             !Pkg_fromnegativetozero__fromnegativetozero__vec.vec
                                             (Standard__integer__rep.to_rep
                                                Pkg_fromnegativetozero__fromnegativetozero__vec.vec__first)
                                             (Standard__integer__rep.to_rep
                                                Pkg_fromnegativetozero__fromnegativetozero__vec.vec__last))
                                          in
                                          (Array__Int__Standard__integer.get
                                             (Pkg_fromnegativetozero__fromnegativetozero__S1b.to_array
                                                ([mlw:proxy_symbol]
                                                [introduced] temp___195))
                                             assert
                                             { ([sloc:pkg_fromnegativetozero.ads:14] 
                                               ([GP_Shape:pragargs__forsome__cmp__ixdcomp]
                                               [GP_Sloc:pkg_fromnegativetozero.ads:14:51]
                                               [vc:annotation]
                                               [comment:       Post    => (for some i in Vec'Range => Vec(i) = 0);                                                   ^ pkg_fromnegativetozero.ads:14:51:VC_INDEX_CHECK]
                                               [GP_Reason:VC_INDEX_CHECK]
                                               [GP_Id:8] (((Pkg_fromnegativetozero__fromnegativetozero__S1b.first
                                                              ([mlw:proxy_symbol]
                                                              [introduced] temp___195))
                                                             <= i) /\
                                                            (i
                                                               <= (Pkg_fromnegativetozero__fromnegativetozero__S1b.last
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___195)))))) };
                                             i))) = 0)
                                      in ())  end
                       ));
                       ( any  pre {} post
                       {((result = True) <->
                           --pp_existential_quantif NOT IMPLEMENTED)}
                       return bool) in ())  end

end

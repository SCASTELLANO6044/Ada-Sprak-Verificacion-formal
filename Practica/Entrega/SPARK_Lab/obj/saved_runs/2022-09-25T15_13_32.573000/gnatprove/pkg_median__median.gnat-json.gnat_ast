(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type integer  = <range -2147483648 2147483647>
  
  function   first () requires { True } ensures  { True } returns
    int = -2147483648
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = integer,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type integer__ref  = { mutable integer__content : integer }
  
  function   integer__ref_integer__content__projection (a : integer__ref)
    requires {  } ensures  {  } returns integer = a.integer__content
  
  meta model_projection function integer__ref_integer__content__projection
  
  meta inline:no function integer__ref_integer__content__projection
  
  function   integer__havoc (x : integer__ref) requires {  } ensures  {  }
    returns unit

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_18) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_14) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_15) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_16) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_17) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_14) = True) \/
          (Standard__integer.first <= Standard__integer.last))
       then
       (Standard__integer.dynamic_property Standard__integer.first
          Standard__integer.last ([mlw:proxy_symbol]
          [introduced] temp___expr_18))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_19) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_20) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
  
  use        Standard__integer
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Standard__integer.integer) requires { True }
    ensures  { True } returns int = (Standard__integer.integer'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Standard__integer.integer,
    predicate in_range = Standard__integer.in_range, function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type positive  = <range 1 2147483647>
  
  function   first () requires { True } ensures  { True } returns int = 1
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = positive,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type positive__ref  = { mutable positive__content : positive }
  
  function   positive__ref_positive__content__projection (a : positive__ref)
    requires {  } ensures  {  } returns positive = a.positive__content
  
  meta model_projection function positive__ref_positive__content__projection
  
  meta inline:no function positive__ref_positive__content__projection
  
  function   positive__havoc (x : positive__ref) requires {  } ensures  {  }
    returns unit

end

(* Module for axiomatizing the array theory associated to type "t_vec" defined at pkg_median.ads:3, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__integer
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  use        Standard__integer__rep
  
  function   index_I1_one () requires { True } ensures  { True } returns
    int = 1
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  clone export _gnatprove_standard.Array__1 with axiom . type I1.t = int,
    predicate I1.le = <=, predicate I1.lt = <, predicate I1.gt = >,
    function I1.add = +, function I1.sub = -, function I1.one = index_I1_one,
    type component_type = component_type
  
  function   bool_eq
    (a : map a__first : int a__last : int b : map b__first : int
    b__last : int) requires { True } ensures  { True } returns
    bool = ((if (a__first <= a__last) then
            ((b__first <= b__last) /\
               ((a__last - a__first) = (b__last - b__first)))
             else (b__first > b__last)) /\
              --pp_universal_quantif NOT IMPLEMENTED)
  
  axiom bool_eq_rev : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for axiomatizing type "t_vec" defined at pkg_median.ads:3, created in Gnat2Why.Types.Translate_Type *)
module Pkg_median__t_vec
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  use        Standard__integer
  use        Standard__positive
  use        Standard__integer__rep
  use        Array__Int__Standard__integer
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   index_1_id (x : int) requires { True } ensures  { True } returns
    int = x
  
  clone export ada__model.Unconstr_Array with axiom . type map = Array__Int__Standard__integer.map,
    function array_bool_eq = Array__Int__Standard__integer.bool_eq,
    type index_base_type = Standard__integer.integer,
    type index_rep_type = int,
    function to_rep = Standard__integer__rep.to_rep,
    function rep_to_int = index_1_id,
    predicate in_range_base = Standard__integer.in_range,
    predicate index_dynamic_property = Standard__positive.dynamic_property,
    predicate index_rep_le = <=
  
  type t_vec  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  meta model_projection function to_array
  
  meta inline:no function to_array
  
  meta model_projection function first
  
  meta inline:no function first
  
  meta model_projection function last
  
  meta inline:no function last
  
  type t_vec__ref  = { mutable t_vec__content : t_vec }
  
  function   t_vec__ref_t_vec__content__projection (a : t_vec__ref) requires
    {  } ensures  {  } returns t_vec = a.t_vec__content
  
  meta model_projection function t_vec__ref_t_vec__content__projection
  
  meta inline:no function t_vec__ref_t_vec__content__projection
  
  function   t_vec__havoc (x : t_vec__ref) requires {  } ensures  {  }
    returns unit

end

(* Module for defining the constant "vec" defined at pkg_median.ads:5, created in Gnat2Why.Decls.Translate_Constant *)
module Pkg_median__median__vec
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Pkg_median__t_vec
  
  function [model_projected] [model_trace:876] [name:Vec]
    [sloc:pkg_median.ads:5] vec () requires {  } ensures  {  } returns
    Pkg_median__t_vec.t_vec

end

(* Module for defining a ref holding the value of variable "res" defined at pkg_median.ads:5, created in Gnat2Why.Decls.Translate_Variable *)
module Pkg_median__median__res
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val res [model_projected] [name:Res]
  [model_trace:879] [sloc:pkg_median.ads:5]: int

end

(* Module giving axioms for type "t_vec" defined at pkg_median.ads:3, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pkg_median__t_vec___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Standard__positive
  use        Pkg_median__t_vec
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_166) : Pkg_median__t_vec.t_vec
    ([mlw:proxy_symbol] [introduced] temp___is_init_162) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_163) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_164) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_165) : bool) requires
    { True } ensures  { True } returns
     = (if ([mlw:proxy_symbol] [introduced] temp___skip_constant_163) then
       True  else
       (Pkg_median__t_vec.dynamic_property Standard__positive.first
          Standard__positive.last
          (Pkg_median__t_vec.first ([mlw:proxy_symbol]
             [introduced] temp___expr_166))
          (Pkg_median__t_vec.last ([mlw:proxy_symbol]
             [introduced] temp___expr_166))))

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__positive
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_53) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_49) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_50) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_51) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_52) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_49) = True) \/
          (Standard__positive.first <= Standard__positive.last))
       then
       (Standard__positive.dynamic_property Standard__positive.first
          Standard__positive.last ([mlw:proxy_symbol]
          [introduced] temp___expr_53))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_54) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_55) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving an empty axiom for the entity "vec" defined at pkg_median.ads:5, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pkg_median__median__vec___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "res" defined at pkg_median.ads:5, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pkg_median__median__res___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module for checking contracts and absence of run-time errors in subprogram "median" defined at pkg_median.ads:5, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Pkg_median__median__subprogram_def
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        _gnatprove_standard.Main
  use        _gnatprove_standard.Int_Division
  use        Standard__integer
  use        Standard__integer
  use        Standard__integer___axiom
  use        Standard__integer__rep
  use        Pkg_median__t_vec
  use        Pkg_median__median__vec
  use        Pkg_median__median__res
  use        Array__Int__Standard__integer
  use        Pkg_median__t_vec___axiom
  use        Array__Int__Standard__integer
  use        Array__Int__Standard__integer
  use        Array__Int__Standard__integer
  use        Array__Int__Standard__integer
  use        Array__Int__Standard__integer
  use        Array__Int__Standard__integer
  use        Standard__integer___axiom
  use        Standard__positive___axiom
  use        Standard__integer___axiom
  use        Pkg_median__t_vec___axiom
  use        Pkg_median__median__vec___axiom
  use        Pkg_median__median__res___axiom
  
  function [GP_Subp:pkg_median.ads:5] [sloc:pkg_median.ads:5] def
    (__void_param : unit) requires { True } ensures  {  } returns
     = (* Assume dynamic invariants of inputs of the subprogram pkg_median.ads:5 *);
        assume
        { (Pkg_median__t_vec___axiom.dynamic_invariant
             Pkg_median__median__vec.vec True False True True) };
        assume
        { (Standard__integer___axiom.dynamic_invariant
             !Pkg_median__median__res.res False False True True) };
        (* Assume moved pointers in outputs of the subprogram pkg_median.ads:5 *);
        (* Check for RTE in the Pre of the subprogram pkg_median.ads:5 *);
        abstract ensures
        { True } begin  (let _ =
                       (((abstract ensures
                            { True } begin  (let _ =
                                           Pkg_median__median__vec.vec in
                                           ())  end;
                            (Pkg_median__t_vec.length
                               Pkg_median__median__vec.vec) > 0) &&
                           (abstract ensures
                              { True } begin  (let _ =
                                             Pkg_median__median__vec.vec in
                                             ())  end;
                              (Pkg_median__t_vec.first
                                 Pkg_median__median__vec.vec) = 1)) &&
                          (abstract ensures
                             { True } begin  (let _ =
                                            Pkg_median__median__vec.vec in
                                            ())  end;
                             (Pkg_median__t_vec.last
                                Pkg_median__median__vec.vec)
                             = ([sloc:pkg_median.ads:11] ([GP_Shape:pragargs__andthen__cmp__typeconv__length_ref]
                                                         [GP_Id:12]
                                                         [vc:annotation]
                                                         [GP_Sloc:pkg_median.ads:11:76]
                                                         [GP_Reason:VC_RANGE_CHECK]
                                                         [comment:       Pre => Vec'Length > 0 and then Vec'First = 1 and then Vec'Last = Vec'Length,                                                                            ^ pkg_median.ads:11:76:VC_RANGE_CHECK] (
                                                         Standard__integer.range_check_
                                                           abstract ensures
                                                           { True } begin 
                                                            (let _ =
                                                           Pkg_median__median__vec.vec
                                                           in ())  end;
                                                           (Pkg_median__t_vec.length
                                                              Pkg_median__median__vec.vec))))))
                       in ())  end;
        (* Assume Pre of the subprogram pkg_median.ads:5 *);
        assume
        { ((([GP_Pretty_Ada:901] ((Pkg_median__t_vec.length
                                     Pkg_median__median__vec.vec) > 0)) /\
              ([GP_Pretty_Ada:907] ((Pkg_median__t_vec.first
                                       Pkg_median__median__vec.vec) = 1))) /\
             ([GP_Pretty_Ada:913] ((Pkg_median__t_vec.last
                                      Pkg_median__median__vec.vec)
                                     = (Pkg_median__t_vec.length
                                          Pkg_median__median__vec.vec)))) };
        (let ([mlw:proxy_symbol] [introduced] temp___180) =
        (abstract ensures
           { True } begin  (let _ = Pkg_median__median__vec.vec in ())  end;
           (Pkg_median__t_vec.length Pkg_median__median__vec.vec) > 1) in
        (let ([mlw:proxy_symbol] [introduced] temp___179) =
        (abstract ensures
           { True } begin  (let _ = Pkg_median__median__vec.vec in ())  end;
           (Pkg_median__t_vec.length Pkg_median__median__vec.vec) = 1) in
        (if ([mlw:proxy_symbol] [introduced] temp___180) then
        abstract ensures { True } begin  (let _ = () in ())  end );
        (if ([mlw:proxy_symbol] [introduced] temp___179) then
        abstract ensures { True } begin  (let _ = () in ())  end );
        abstract ensures
        { True } begin  (let _ =
                       check
                         { ([sloc:pkg_median.ads:12] ([GP_Sloc:pkg_median.ads:12:8]
                                                     [vc:annotation]
                                                     [GP_Reason:VC_DISJOINT_CONTRACT_CASES]
                                                     [comment:       Contract_Cases => ((Vec'Length = 1) => Res = Vec(1),        ^ pkg_median.ads:12:8:VC_DISJOINT_CONTRACT_CASES]
                                                     [GP_Id:0] (((0
                                                                    + 
                                                                    (if
                                                                    (
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___179)
                                                                    = True)
                                                                    then 
                                                                    1  else 
                                                                    0))
                                                                   + 
                                                                   (if
                                                                   (([mlw:proxy_symbol]
                                                                    [introduced] temp___180)
                                                                    = True)
                                                                   then 
                                                                   1  else 
                                                                   0)) <= 1))) };
                         check
                         { ([sloc:pkg_median.ads:12] ([GP_Reason:VC_COMPLETE_CONTRACT_CASES]
                                                     [GP_Sloc:pkg_median.ads:12:8]
                                                     [vc:annotation]
                                                     [comment:       Contract_Cases => ((Vec'Length = 1) => Res = Vec(1),        ^ pkg_median.ads:12:8:VC_COMPLETE_CONTRACT_CASES]
                                                     [GP_Id:1] (((0
                                                                    + 
                                                                    (if
                                                                    (
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___179)
                                                                    = True)
                                                                    then 
                                                                    1  else 
                                                                    0))
                                                                   + 
                                                                   (if
                                                                   (([mlw:proxy_symbol]
                                                                    [introduced] temp___180)
                                                                    = True)
                                                                   then 
                                                                   1  else 
                                                                   0)) >= 1))) }
                       in ())  end;
        (try
        ();
          ([sloc:pkg_median.adb:3] ());
          ();
          ([GP_Sloc:pkg_median.adb:6:7] ([sloc:pkg_median.adb:6] (if
                                                                 ([sloc:pkg_median.adb:6] ([branch_id=831]
                                                                 _gnatprove_standard.Main.spark__branch
                                                                 :=
                                                                 (abstract
                                                                    ensures
                                                                    { True } begin 
                                                                     (let _ =
                                                                    Pkg_median__median__vec.vec
                                                                    in ())  end;
                                                                    (
                                                                    Pkg_median__t_vec.length
                                                                    Pkg_median__median__vec.vec)
                                                                    = 1)));
                                                                 ([branch_id=831] _gnatprove_standard.Main.spark__branch).bool__content
                                                                 then
                                                                 ();
                                                                 ([GP_Sloc:pkg_median.adb:7:14] 
                                                                 ([sloc:pkg_median.adb:7] (
                                                                 Pkg_median__median__res.res
                                                                 :=
                                                                 ( (Standard__integer__rep.to_rep
                                                                    (Array__Int__Standard__integer.get
                                                                    (Pkg_median__t_vec.to_array
                                                                    Pkg_median__median__vec.vec)
                                                                    (let ([mlw:proxy_symbol]
                                                                    [introduced] temp___182)
                                                                    =
                                                                    abstract
                                                                    ensures
                                                                    { True } begin 
                                                                     (let _ =
                                                                    Pkg_median__median__vec.vec
                                                                    in ())  end;
                                                                    (Pkg_median__t_vec.first
                                                                    Pkg_median__median__vec.vec)
                                                                    in assert
                                                                    { ([sloc:pkg_median.adb:7] 
                                                                    ([GP_Sloc:pkg_median.adb:7:24]
                                                                    [vc:annotation]
                                                                    [comment:         Res := Vec(Vec'First);                        ^ pkg_median.adb:7:24:VC_INDEX_CHECK]
                                                                    [GP_Reason:VC_INDEX_CHECK]
                                                                    [GP_Id:2]
                                                                    [GP_Shape:if__res_assign__ixdcomp__first_ref] (
                                                                    ((Pkg_median__t_vec.first
                                                                    Pkg_median__median__vec.vec)
                                                                    <= ([mlw:proxy_symbol]
                                                                    [introduced] temp___182))
                                                                    /\
                                                                    (([mlw:proxy_symbol]
                                                                    [introduced] temp___182)
                                                                    <= (
                                                                    Pkg_median__t_vec.last
                                                                    Pkg_median__median__vec.vec))))) };
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___182))))))))
                                                                  else
                                                                 ();
                                                                 ([GP_Sloc:pkg_median.adb:9:14] 
                                                                 ([sloc:pkg_median.adb:9] (
                                                                 Pkg_median__median__res.res
                                                                 :=
                                                                 ( (Standard__integer__rep.to_rep
                                                                    (Array__Int__Standard__integer.get
                                                                    (Pkg_median__t_vec.to_array
                                                                    Pkg_median__median__vec.vec)
                                                                    (let ([mlw:proxy_symbol]
                                                                    [introduced] temp___184)
                                                                    =
                                                                    ([sloc:pkg_median.adb:9] 
                                                                    ([comment:         Res := Vec((Vec'Length/2));                                ^ pkg_median.adb:9:32:VC_DIVISION_CHECK]
                                                                    [vc:annotation]
                                                                    [GP_Reason:VC_DIVISION_CHECK]
                                                                    [GP_Sloc:pkg_median.adb:9:32]
                                                                    [GP_Id:4]
                                                                    [GP_Shape:if__res_assign__ixdcomp__div] (
                                                                    _gnatprove_standard.Int_Division.div_
                                                                    ([sloc:pkg_median.adb:9] 
                                                                    ([vc:annotation]
                                                                    [GP_Shape:if__res_assign__ixdcomp__div__typeconv__length_ref]
                                                                    [GP_Reason:VC_RANGE_CHECK]
                                                                    [comment:         Res := Vec((Vec'Length/2));                         ^ pkg_median.adb:9:25:VC_RANGE_CHECK]
                                                                    [GP_Sloc:pkg_median.adb:9:25]
                                                                    [GP_Id:3] (
                                                                    Standard__integer.range_check_
                                                                    abstract
                                                                    ensures
                                                                    { True } begin 
                                                                     (let _ =
                                                                    Pkg_median__median__vec.vec
                                                                    in ())  end;
                                                                    (Pkg_median__t_vec.length
                                                                    Pkg_median__median__vec.vec))))
                                                                    2))) in
                                                                    assert
                                                                    { ([sloc:pkg_median.adb:9] 
                                                                    ([vc:annotation]
                                                                    [comment:         Res := Vec((Vec'Length/2));                                ^ pkg_median.adb:9:32:VC_INDEX_CHECK]
                                                                    [GP_Sloc:pkg_median.adb:9:32]
                                                                    [GP_Reason:VC_INDEX_CHECK]
                                                                    [GP_Id:5]
                                                                    [GP_Shape:if__res_assign__ixdcomp__div] (
                                                                    ((Pkg_median__t_vec.first
                                                                    Pkg_median__median__vec.vec)
                                                                    <= ([mlw:proxy_symbol]
                                                                    [introduced] temp___184))
                                                                    /\
                                                                    (([mlw:proxy_symbol]
                                                                    [introduced] temp___184)
                                                                    <= (
                                                                    Pkg_median__t_vec.last
                                                                    Pkg_median__median__vec.vec))))) };
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___184)))))))))));
          raise Return__exc with | Return__exc  -> ());
        abstract ensures { True } begin  (let _ = True in ())  end;
        abstract ensures
        { True } begin  (let _ =
                       (if ([mlw:proxy_symbol] [introduced] temp___179) then
                       (!Pkg_median__median__res.res
                          = (Standard__integer__rep.to_rep
                               (Array__Int__Standard__integer.get
                                  (Pkg_median__t_vec.to_array
                                     Pkg_median__median__vec.vec)
                                  (let ([mlw:proxy_symbol]
                                  [introduced] temp___185) = 1 in assert
                                  { ([sloc:pkg_median.ads:12] ([vc:annotation]
                                                              [GP_Sloc:pkg_median.ads:12:57]
                                                              [comment:       Contract_Cases => ((Vec'Length = 1) => Res = Vec(1),                                                         ^ pkg_median.ads:12:57:VC_INDEX_CHECK]
                                                              [GP_Shape:pragargs__aggr__cmp__ixdcomp]
                                                              [GP_Reason:VC_INDEX_CHECK]
                                                              [GP_Id:6] (
                                                              ((Pkg_median__t_vec.first
                                                                  Pkg_median__median__vec.vec)
                                                                 <= ([mlw:proxy_symbol]
                                                                 [introduced] temp___185))
                                                                /\
                                                                (([mlw:proxy_symbol]
                                                                   [introduced] temp___185)
                                                                   <= (
                                                                   Pkg_median__t_vec.last
                                                                    Pkg_median__median__vec.vec))))) };
                                  ([mlw:proxy_symbol]
                                  [introduced] temp___185)))))
                        else True) in ())  end;
        assert
        { ([sloc:pkg_median.ads:12] ([GP_Reason:VC_CONTRACT_CASE]
                                    [vc:annotation]
                                    [GP_Sloc:pkg_median.ads:12:44]
                                    [comment:       Contract_Cases => ((Vec'Length = 1) => Res = Vec(1),                                            ^ pkg_median.ads:12:44:VC_CONTRACT_CASE]
                                    [GP_Id:7]
                                    [GP_Shape:pragargs__aggr] (if
                                                              (([mlw:proxy_symbol]
                                                                 [introduced] temp___179)
                                                                 = True)
                                                              then
                                                              (!Pkg_median__median__res.res
                                                                 = (Standard__integer__rep.to_rep
                                                                    (Array__Int__Standard__integer.get
                                                                    (Pkg_median__t_vec.to_array
                                                                    Pkg_median__median__vec.vec)
                                                                    1)))
                                                              ))) };
        abstract ensures
        { True } begin  (let _ =
                       (if ([mlw:proxy_symbol] [introduced] temp___180) then
                       (!Pkg_median__median__res.res
                          = (Standard__integer__rep.to_rep
                               (Array__Int__Standard__integer.get
                                  (Pkg_median__t_vec.to_array
                                     Pkg_median__median__vec.vec)
                                  (let ([mlw:proxy_symbol]
                                  [introduced] temp___186) =
                                  ([sloc:pkg_median.ads:13] ([GP_Shape:pragargs__aggr__cmp__ixdcomp__div]
                                                            [vc:annotation]
                                                            [GP_Reason:VC_DIVISION_CHECK]
                                                            [GP_Sloc:pkg_median.ads:13:67]
                                                            [comment:                         (Vec'Length > 1) => Res = Vec((Vec'Length/2)));                                                                   ^ pkg_median.ads:13:67:VC_DIVISION_CHECK]
                                                            [GP_Id:9] (
                                                            _gnatprove_standard.Int_Division.div_
                                                              ([sloc:pkg_median.ads:13] 
                                                              ([vc:annotation]
                                                              [GP_Sloc:pkg_median.ads:13:60]
                                                              [GP_Reason:VC_RANGE_CHECK]
                                                              [comment:                         (Vec'Length > 1) => Res = Vec((Vec'Length/2)));                                                            ^ pkg_median.ads:13:60:VC_RANGE_CHECK]
                                                              [GP_Shape:pragargs__aggr__cmp__ixdcomp__div__typeconv__length_ref]
                                                              [GP_Id:8] (
                                                              Standard__integer.range_check_
                                                                abstract
                                                                ensures
                                                                { True } begin 
                                                                 (let _ =
                                                                Pkg_median__median__vec.vec
                                                                in ())  end;
                                                                (Pkg_median__t_vec.length
                                                                   Pkg_median__median__vec.vec))))
                                                              2))) in assert
                                  { ([sloc:pkg_median.ads:13] ([GP_Id:10]
                                                              [GP_Shape:pragargs__aggr__cmp__ixdcomp__div]
                                                              [vc:annotation]
                                                              [GP_Sloc:pkg_median.ads:13:67]
                                                              [GP_Reason:VC_INDEX_CHECK]
                                                              [comment:                         (Vec'Length > 1) => Res = Vec((Vec'Length/2)));                                                                   ^ pkg_median.ads:13:67:VC_INDEX_CHECK] (
                                                              ((Pkg_median__t_vec.first
                                                                  Pkg_median__median__vec.vec)
                                                                 <= ([mlw:proxy_symbol]
                                                                 [introduced] temp___186))
                                                                /\
                                                                (([mlw:proxy_symbol]
                                                                   [introduced] temp___186)
                                                                   <= (
                                                                   Pkg_median__t_vec.last
                                                                    Pkg_median__median__vec.vec))))) };
                                  ([mlw:proxy_symbol]
                                  [introduced] temp___186)))))
                        else True) in ())  end;
        assert
        { ([sloc:pkg_median.ads:13] ([GP_Sloc:pkg_median.ads:13:43]
                                    [GP_Id:11] [GP_Reason:VC_CONTRACT_CASE]
                                    [vc:annotation]
                                    [comment:                         (Vec'Length > 1) => Res = Vec((Vec'Length/2)));                                           ^ pkg_median.ads:13:43:VC_CONTRACT_CASE]
                                    [GP_Shape:pragargs__aggr] (if
                                                              (([mlw:proxy_symbol]
                                                                 [introduced] temp___180)
                                                                 = True)
                                                              then
                                                              (!Pkg_median__median__res.res
                                                                 = (Standard__integer__rep.to_rep
                                                                    (Array__Int__Standard__integer.get
                                                                    (Pkg_median__t_vec.to_array
                                                                    Pkg_median__median__vec.vec)
                                                                    (_gnatprove_standard.Int_Division.div
                                                                    (Pkg_median__t_vec.length
                                                                    Pkg_median__median__vec.vec)
                                                                    2))))
                                                              ))) }))

end

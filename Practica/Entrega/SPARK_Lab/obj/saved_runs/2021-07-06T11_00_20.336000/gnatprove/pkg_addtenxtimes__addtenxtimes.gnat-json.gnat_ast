(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type integer  = <range -2147483648 2147483647>
  
  function   first () requires { True } ensures  { True } returns
    int = -2147483648
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = integer,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type integer__ref  = { mutable integer__content : integer }
  
  function   integer__ref_integer__content__projection (a : integer__ref)
    requires {  } ensures  {  } returns integer = a.integer__content
  
  meta model_projection function integer__ref_integer__content__projection
  
  meta inline:no function integer__ref_integer__content__projection
  
  function   integer__havoc (x : integer__ref) requires {  } ensures  {  }
    returns unit

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type natural  = <range 0 2147483647>
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = natural,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type natural__ref  = { mutable natural__content : natural }
  
  function   natural__ref_natural__content__projection (a : natural__ref)
    requires {  } ensures  {  } returns natural = a.natural__content
  
  meta model_projection function natural__ref_natural__content__projection
  
  meta inline:no function natural__ref_natural__content__projection
  
  function   natural__havoc (x : natural__ref) requires {  } ensures  {  }
    returns unit

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__natural
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_46) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_42) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_43) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_44) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_45) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_42) = True) \/
          (Standard__natural.first <= Standard__natural.last))
       then
       (Standard__natural.dynamic_property Standard__natural.first
          Standard__natural.last ([mlw:proxy_symbol]
          [introduced] temp___expr_46))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_47) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_48) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type positive  = <range 1 2147483647>
  
  function   first () requires { True } ensures  { True } returns int = 1
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = positive,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type positive__ref  = { mutable positive__content : positive }
  
  function   positive__ref_positive__content__projection (a : positive__ref)
    requires {  } ensures  {  } returns positive = a.positive__content
  
  meta model_projection function positive__ref_positive__content__projection
  
  meta inline:no function positive__ref_positive__content__projection
  
  function   positive__havoc (x : positive__ref) requires {  } ensures  {  }
    returns unit

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__positive
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_53) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_49) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_50) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_51) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_52) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_49) = True) \/
          (Standard__positive.first <= Standard__positive.last))
       then
       (Standard__positive.dynamic_property Standard__positive.first
          Standard__positive.last ([mlw:proxy_symbol]
          [introduced] temp___expr_53))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_54) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_55) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for defining a ref holding the value of variable "n" defined at pkg_addtenxtimes.ads:3, created in Gnat2Why.Decls.Translate_Variable *)
module Pkg_addtenxtimes__n
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val n [model_trace:892] [model_projected]
  [name:N] [sloc:pkg_addtenxtimes.ads:3]: int

end

(* Module for defining the constant "x" defined at pkg_addtenxtimes.ads:5, created in Gnat2Why.Decls.Translate_Constant *)
module Pkg_addtenxtimes__addtenxtimes__x
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  function [model_trace:898] [name:X] [sloc:pkg_addtenxtimes.ads:5] x 
    () requires {  } ensures  {  } returns int

end

(* Module for defining a ref holding the value of variable "res" defined at pkg_addtenxtimes.adb:5, created in Gnat2Why.Decls.Translate_Variable *)
module Pkg_addtenxtimes__addtenxtimes__res
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val res [model_trace:827] [model_projected]
  [name:Res] [sloc:pkg_addtenxtimes.adb:5]: int

end

(* Module for defining a ref holding the value of variable "i" defined at pkg_addtenxtimes.adb:13, created in Gnat2Why.Decls.Translate_Variable *)
module Pkg_addtenxtimes__addtenxtimes__L_1__i
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val i [name:i] [model_projected]
  [model_trace:844] [sloc:pkg_addtenxtimes.adb:13]: int

end

(* Module for defining the loop exit exception for the loop "L_1" defined at pkg_addtenxtimes.adb:13, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Pkg_addtenxtimes__addtenxtimes__L_1
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  --pp_exception_declaration NOT IMPLEMENTED

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
  
  use        Standard__integer
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Standard__integer.integer) requires { True }
    ensures  { True } returns int = (Standard__integer.integer'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Standard__integer.integer,
    predicate in_range = Standard__integer.in_range, function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "T2b" defined at pkg_addtenxtimes.adb:13, created in Gnat2Why.Types.Translate_Type *)
module Pkg_addtenxtimes__addtenxtimes__L_1__T2b
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  use        Standard__integer__rep
  
  type t2b  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   dynamic_property (first_int : int last_int : int x : int)
    requires { True } ensures  { True } returns
     = ((first_int <= x) /\ (x <= last_int))
  
  clone export ada__model.Dynamic_Discrete with axiom . type t = t2b,
    type rep_type = int,
    function base_to_rep = Standard__integer__rep.to_rep,
    function base_of_rep = Standard__integer__rep.of_rep,
    predicate dynamic_property = dynamic_property
  
  type t2b__ref  = { mutable t2b__content : t2b }
  
  function   t2b__ref_t2b__content__projection (a : t2b__ref) requires {  }
    ensures  {  } returns t2b = a.t2b__content
  
  meta model_projection function t2b__ref_t2b__content__projection
  
  meta inline:no function t2b__ref_t2b__content__projection
  
  function   t2b__havoc (x : t2b__ref) requires {  } ensures  {  } returns
    unit

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_18) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_14) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_15) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_16) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_17) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_14) = True) \/
          (Standard__integer.first <= Standard__integer.last))
       then
       (Standard__integer.dynamic_property Standard__integer.first
          Standard__integer.last ([mlw:proxy_symbol]
          [introduced] temp___expr_18))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_19) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_20) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving an empty axiom for the entity "res" defined at pkg_addtenxtimes.adb:5, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pkg_addtenxtimes__addtenxtimes__res___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "i" defined at pkg_addtenxtimes.adb:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pkg_addtenxtimes__addtenxtimes__L_1__i___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "L_1" defined at pkg_addtenxtimes.adb:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pkg_addtenxtimes__addtenxtimes__L_1___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "n" defined at pkg_addtenxtimes.ads:3, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pkg_addtenxtimes__n___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "x" defined at pkg_addtenxtimes.ads:5, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pkg_addtenxtimes__addtenxtimes__x___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving axioms for type "T2b" defined at pkg_addtenxtimes.adb:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pkg_addtenxtimes__addtenxtimes__L_1__T2b___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module for checking contracts and absence of run-time errors in subprogram "addtenxtimes" defined at pkg_addtenxtimes.ads:5, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Pkg_addtenxtimes__addtenxtimes__subprogram_def
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        _gnatprove_standard.Main
  use        _gnatprove_standard.Int_Division
  use        _gnatprove_standard.Boolean
  use        Standard__integer
  use        Standard__natural___axiom
  use        Standard__positive___axiom
  use        Pkg_addtenxtimes__n
  use        Pkg_addtenxtimes__addtenxtimes__x
  use        Pkg_addtenxtimes__addtenxtimes__res
  use        Pkg_addtenxtimes__addtenxtimes__L_1__i
  use        Pkg_addtenxtimes__addtenxtimes__L_1
  use        Pkg_addtenxtimes__addtenxtimes__L_1__T2b
  use        Standard__natural___axiom
  use        Standard__positive___axiom
  use        Standard__integer___axiom
  use        Pkg_addtenxtimes__addtenxtimes__res___axiom
  use        Pkg_addtenxtimes__addtenxtimes__L_1__i___axiom
  use        Pkg_addtenxtimes__addtenxtimes__L_1___axiom
  use        Pkg_addtenxtimes__n___axiom
  use        Pkg_addtenxtimes__addtenxtimes__x___axiom
  use        Pkg_addtenxtimes__addtenxtimes__L_1__T2b___axiom
  
  val pkg_addtenxtimes__addtenxtimes__result [model_projected]
  [name:addTenXTimes]
  [model_trace:897@result] : int
  
  function [GP_Subp:pkg_addtenxtimes.ads:5] [sloc:pkg_addtenxtimes.ads:5] def
    (__void_param : unit) requires { True } ensures 
    { ([sloc:pkg_addtenxtimes.ads:12] ([GP_Reason:VC_POSTCONDITION]
                                      [GP_Shape:pragargs__cmp]
                                      [model_vc_post] [GP_Id:7]
                                      [GP_Sloc:pkg_addtenxtimes.ads:12:16]
                                      [comment:       Post => addTenXTimes'Result = N * X + 10;                ^ pkg_addtenxtimes.ads:12:16:VC_POSTCONDITION] 
                                      ([GP_Pretty_Ada:1003]
                                      [GP_Sloc:pkg_addtenxtimes.ads:12:16] (
                                      !pkg_addtenxtimes__addtenxtimes__result
                                        = ((!Pkg_addtenxtimes__n.n
                                              * Pkg_addtenxtimes__addtenxtimes__x.x)
                                             + 10))))) } returns
     = (* Assume dynamic invariants of inputs of the subprogram pkg_addtenxtimes.ads:5 *);
        assume
        { (Standard__positive___axiom.dynamic_invariant
             !Pkg_addtenxtimes__n.n True False True True) };
        assume
        { (Standard__natural___axiom.dynamic_invariant
             Pkg_addtenxtimes__addtenxtimes__x.x True False True True) };
        (* Assume moved pointers in outputs of the subprogram pkg_addtenxtimes.ads:5 *);
        (* Check for RTE in the Pre of the subprogram pkg_addtenxtimes.ads:5 *);
        abstract ensures
        { True } begin  (let _ =
                       ((Pkg_addtenxtimes__addtenxtimes__x.x
                           < ([sloc:pkg_addtenxtimes.ads:11] ([vc:annotation]
                                                             [GP_Reason:VC_DIVISION_CHECK]
                                                             [GP_Shape:pragargs__andthen__cmp__div]
                                                             [comment:       Pre => X < Natural'Last/N and then N = 10,                               ^ pkg_addtenxtimes.ads:11:31:VC_DIVISION_CHECK]
                                                             [GP_Id:6]
                                                             [GP_Sloc:pkg_addtenxtimes.ads:11:31] (
                                                             _gnatprove_standard.Int_Division.div_
                                                               2147483647
                                                               !Pkg_addtenxtimes__n.n))))
                          && (!Pkg_addtenxtimes__n.n = 10))
                       in ())  end;
        (* Assume Pre of the subprogram pkg_addtenxtimes.ads:5 *);
        assume
        { (([GP_Pretty_Ada:928] (Pkg_addtenxtimes__addtenxtimes__x.x
                                   < (_gnatprove_standard.Int_Division.div
                                        2147483647 !Pkg_addtenxtimes__n.n)))
             /\ ([GP_Pretty_Ada:936] (!Pkg_addtenxtimes__n.n = 10))) };
        (try
        ();
          ([sloc:pkg_addtenxtimes.adb:5] assume
          { (Standard__positive___axiom.default_initial_assumption
               !Pkg_addtenxtimes__addtenxtimes__res.res False) };
          assume
          { (Standard__positive___axiom.dynamic_invariant
               !Pkg_addtenxtimes__addtenxtimes__res.res False False True True) });
          ([sloc:pkg_addtenxtimes.adb:13] ());
          ();
          ([GP_Sloc:pkg_addtenxtimes.adb:8:7] ([sloc:pkg_addtenxtimes.adb:8] 
                                              (if
                                              ([sloc:pkg_addtenxtimes.adb:8] ([branch_id=833]
                                              _gnatprove_standard.Main.spark__branch
                                              :=
                                              (Pkg_addtenxtimes__addtenxtimes__x.x
                                                 = 0)));
                                              ([branch_id=833] _gnatprove_standard.Main.spark__branch).bool__content
                                              then
                                              ();
                                              ([GP_Sloc:pkg_addtenxtimes.adb:9:17] 
                                              ([sloc:pkg_addtenxtimes.adb:9] ()));
                                              ([GP_Sloc:pkg_addtenxtimes.adb:9:10] 
                                              ([sloc:pkg_addtenxtimes.adb:9] (
                                              pkg_addtenxtimes__addtenxtimes__result
                                              :=
                                              !Pkg_addtenxtimes__n.n);
                                              raise Return__exc))  else 
                                              ())));
          ([GP_Sloc:pkg_addtenxtimes.adb:12:7] ([sloc:pkg_addtenxtimes.adb:12] ()));
          ([GP_Sloc:pkg_addtenxtimes.adb:12:14] ([sloc:pkg_addtenxtimes.adb:12] ()));
          ([GP_Sloc:pkg_addtenxtimes.adb:12:11] ([sloc:pkg_addtenxtimes.adb:12] (
                                                Pkg_addtenxtimes__addtenxtimes__res.res
                                                := !Pkg_addtenxtimes__n.n)));
          ([GP_Sloc:pkg_addtenxtimes.adb:13:23] ([sloc:pkg_addtenxtimes.adb:13] (let ([mlw:proxy_symbol]
                                                [introduced] temp___163) = 
                                                1 in (let ([mlw:proxy_symbol]
                                                [introduced] temp___164) =
                                                Pkg_addtenxtimes__addtenxtimes__x.x
                                                in (
                                                Pkg_addtenxtimes__addtenxtimes__L_1__i.i
                                                :=
                                                ([mlw:proxy_symbol]
                                                  [introduced] temp___163));
                                                (* Translation of an Ada loop from pkg_addtenxtimes.adb:13 *);
                                                (if
                                                (_gnatprove_standard.Boolean.andb
                                                   (([mlw:proxy_symbol]
                                                      [introduced] temp___163)
                                                      <= !Pkg_addtenxtimes__addtenxtimes__L_1__i.i)
                                                   (!Pkg_addtenxtimes__addtenxtimes__L_1__i.i
                                                      <= ([mlw:proxy_symbol]
                                                      [introduced] temp___164)))
                                                then
                                                (try
                                                (let ([model_trace:827'Loop_Entry] temp___loop_entry_167)
                                                  =
                                                  !Pkg_addtenxtimes__addtenxtimes__res.res
                                                  in
                                                  (* While loop translating the Ada loop from pkg_addtenxtimes.adb:13 *);
                                                  ([sloc:pkg_addtenxtimes.adb:15] 
                                                  loop
                                                    ();
                                                    ([GP_Sloc:pkg_addtenxtimes.adb:14:10] 
                                                    ([sloc:pkg_addtenxtimes.adb:14] ()));
                                                    ([GP_Sloc:pkg_addtenxtimes.adb:14:17] 
                                                    ([sloc:pkg_addtenxtimes.adb:14] ()));
                                                    ([GP_Sloc:pkg_addtenxtimes.adb:14:23] 
                                                    ([sloc:pkg_addtenxtimes.adb:14] ()));
                                                    ([GP_Sloc:pkg_addtenxtimes.adb:14:14] 
                                                    ([sloc:pkg_addtenxtimes.adb:14] (
                                                    Pkg_addtenxtimes__addtenxtimes__res.res
                                                    :=
                                                    ( ([sloc:pkg_addtenxtimes.adb:14] 
                                                      ([comment:         Res := Res + N;                     ^ pkg_addtenxtimes.adb:14:21:VC_OVERFLOW_CHECK]
                                                      [GP_Shape:L_1_while__res_assign__add]
                                                      [vc:annotation]
                                                      [GP_Reason:VC_OVERFLOW_CHECK]
                                                      [GP_Sloc:pkg_addtenxtimes.adb:14:21]
                                                      [GP_Id:0] (Standard__integer.range_check_
                                                                   (!Pkg_addtenxtimes__addtenxtimes__res.res
                                                                    + !Pkg_addtenxtimes__n.n))))))));
                                                    (* Check for absence of RTE in the loop invariant and variant *);
                                                    (let ([mlw:proxy_symbol]
                                                    [introduced] temp___inv_166)
                                                    =
                                                    (!Pkg_addtenxtimes__addtenxtimes__res.res
                                                       = ([sloc:pkg_addtenxtimes.adb:15] 
                                                         ([GP_Sloc:pkg_addtenxtimes.adb:15:57]
                                                         [comment:         pragma Loop_Invariant(Res = Res'Loop_Entry * i + N);                                                         ^ pkg_addtenxtimes.adb:15:57:VC_OVERFLOW_CHECK]
                                                         [GP_Shape:L_1_while__pragargs__cmp__add]
                                                         [vc:annotation]
                                                         [GP_Reason:VC_OVERFLOW_CHECK]
                                                         [GP_Id:2] (Standard__integer.range_check_
                                                                    (([sloc:pkg_addtenxtimes.adb:15] 
                                                                    ([GP_Sloc:pkg_addtenxtimes.adb:15:53]
                                                                    [GP_Shape:L_1_while__pragargs__cmp__add__mult]
                                                                    [comment:         pragma Loop_Invariant(Res = Res'Loop_Entry * i + N);                                                     ^ pkg_addtenxtimes.adb:15:53:VC_OVERFLOW_CHECK]
                                                                    [vc:annotation]
                                                                    [GP_Reason:VC_OVERFLOW_CHECK]
                                                                    [GP_Id:1] (
                                                                    Standard__integer.range_check_
                                                                    (([model_trace:827'Loop_Entry] temp___loop_entry_167)
                                                                    * !Pkg_addtenxtimes__addtenxtimes__L_1__i.i))))
                                                                    + !Pkg_addtenxtimes__n.n)))))
                                                    in abstract ensures
                                                    { True } begin  (let _ =
                                                                   () in ())  end)
                                                    invariant
                                                    {([sloc:pkg_addtenxtimes.adb:15] 
                                                     ([GP_Reason:VC_LOOP_INVARIANT]
                                                     [comment:         pragma Loop_Invariant(Res = Res'Loop_Entry * i + N);                                ^ pkg_addtenxtimes.adb:15:32:VC_LOOP_INVARIANT]
                                                     [vc:annotation]
                                                     [GP_Shape:L_1_while__pragargs__cmp]
                                                     [GP_Sloc:pkg_addtenxtimes.adb:15:32]
                                                     [GP_Id:3] ([GP_Pretty_Ada:863]
                                                               [GP_Sloc:pkg_addtenxtimes.adb:15:32] (
                                                               !Pkg_addtenxtimes__addtenxtimes__res.res
                                                                 = ((([model_trace:827'Loop_Entry] temp___loop_entry_167)
                                                                    * !Pkg_addtenxtimes__addtenxtimes__L_1__i.i)
                                                                    + !Pkg_addtenxtimes__n.n)))))}
                                                    
                                                    (* Assume implicit invariants from the loop pkg_addtenxtimes.adb:13 *);
                                                    assume
                                                    { (_gnatprove_standard.Boolean.andb
                                                         ((True /\
                                                             (Standard__positive___axiom.dynamic_invariant
                                                                !Pkg_addtenxtimes__addtenxtimes__res.res
                                                                False True
                                                                True True) /\
                                                             True /\ True) /\
                                                            (if
                                                            ((True = True) \/
                                                               (1
                                                                  <= Pkg_addtenxtimes__addtenxtimes__x.x))
                                                            then
                                                            (Pkg_addtenxtimes__addtenxtimes__L_1__T2b.dynamic_property
                                                               1
                                                               Pkg_addtenxtimes__addtenxtimes__x.x
                                                               !Pkg_addtenxtimes__addtenxtimes__L_1__i.i)
                                                            ) /\ True /\ True)
                                                         ((1
                                                             <= !Pkg_addtenxtimes__addtenxtimes__L_1__i.i)
                                                            /\
                                                            (!Pkg_addtenxtimes__addtenxtimes__L_1__i.i
                                                               <= Pkg_addtenxtimes__addtenxtimes__x.x))) };
                                                    (* Continuation of loop after loop invariant and variant *);
                                                    (* Check for the exit condition and loop statements appearing before the loop invariant of loop pkg_addtenxtimes.adb:13 *);
                                                    (if
                                                    (!Pkg_addtenxtimes__addtenxtimes__L_1__i.i
                                                       = ([mlw:proxy_symbol]
                                                       [introduced] temp___164))
                                                    then
                                                    raise Pkg_addtenxtimes__addtenxtimes__L_1.L_1
                                                    );
                                                    ([sloc:pkg_addtenxtimes.adb:13] (
                                                    Pkg_addtenxtimes__addtenxtimes__L_1__i.i
                                                    :=
                                                    (!Pkg_addtenxtimes__addtenxtimes__L_1__i.i
                                                       + 1)))
                                                     end loop)) with
                                                | Pkg_addtenxtimes__addtenxtimes__L_1.L_1 
                                                -> ()) )))));
          ([GP_Sloc:pkg_addtenxtimes.adb:18:14] ([sloc:pkg_addtenxtimes.adb:18] ()));
          ([GP_Sloc:pkg_addtenxtimes.adb:18:7] ([sloc:pkg_addtenxtimes.adb:18] (
                                               pkg_addtenxtimes__addtenxtimes__result
                                               :=
                                               !Pkg_addtenxtimes__addtenxtimes__res.res);
                                               raise Return__exc));
          raise Return__exc with | Return__exc  -> ());
        abstract ensures
        { True } begin  (let _ =
                       (!pkg_addtenxtimes__addtenxtimes__result
                          = ([sloc:pkg_addtenxtimes.ads:12] ([GP_Sloc:pkg_addtenxtimes.ads:12:44]
                                                            [comment:       Post => addTenXTimes'Result = N * X + 10;                                            ^ pkg_addtenxtimes.ads:12:44:VC_OVERFLOW_CHECK]
                                                            [vc:annotation]
                                                            [GP_Reason:VC_OVERFLOW_CHECK]
                                                            [GP_Shape:pragargs__cmp__add]
                                                            [GP_Id:5] (
                                                            Standard__integer.range_check_
                                                              (([sloc:pkg_addtenxtimes.ads:12] 
                                                               ([GP_Shape:pragargs__cmp__add__mult]
                                                               [vc:annotation]
                                                               [comment:       Post => addTenXTimes'Result = N * X + 10;                                        ^ pkg_addtenxtimes.ads:12:40:VC_OVERFLOW_CHECK]
                                                               [GP_Reason:VC_OVERFLOW_CHECK]
                                                               [GP_Id:4]
                                                               [GP_Sloc:pkg_addtenxtimes.ads:12:40] (
                                                               Standard__integer.range_check_
                                                                 (!Pkg_addtenxtimes__n.n
                                                                    * Pkg_addtenxtimes__addtenxtimes__x.x))))
                                                                 + 10)))))
                       in ())  end;
        !pkg_addtenxtimes__addtenxtimes__result

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type integer  = <range -2147483648 2147483647>
  
  function   first () requires { True } ensures  { True } returns
    int = -2147483648
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = integer,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type integer__ref  = { mutable integer__content : integer }
  
  function   integer__ref_integer__content__projection (a : integer__ref)
    requires {  } ensures  {  } returns integer = a.integer__content
  
  meta model_projection function integer__ref_integer__content__projection
  
  meta inline:no function integer__ref_integer__content__projection
  
  function   integer__havoc (x : integer__ref) requires {  } ensures  {  }
    returns unit

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type natural  = <range 0 2147483647>
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = natural,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type natural__ref  = { mutable natural__content : natural }
  
  function   natural__ref_natural__content__projection (a : natural__ref)
    requires {  } ensures  {  } returns natural = a.natural__content
  
  meta model_projection function natural__ref_natural__content__projection
  
  meta inline:no function natural__ref_natural__content__projection
  
  function   natural__havoc (x : natural__ref) requires {  } ensures  {  }
    returns unit

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__natural
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_46) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_42) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_43) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_44) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_45) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_42) = True) \/
          (Standard__natural.first <= Standard__natural.last))
       then
       (Standard__natural.dynamic_property Standard__natural.first
          Standard__natural.last ([mlw:proxy_symbol]
          [introduced] temp___expr_46))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_47) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_48) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for defining a ref holding the value of variable "x" defined at example.ads:7, created in Gnat2Why.Decls.Translate_Variable *)
module Example__increment__x
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val x [model_projected] [name:X]
  [model_trace:864] [sloc:example.ads:7]: int

end

(* Module for defining the constant "n" defined at example.ads:7, created in Gnat2Why.Decls.Translate_Constant *)
module Example__increment__n
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  function [model_trace:867] [name:N] [sloc:example.ads:7] n () requires {  }
    ensures  {  } returns int

end

(* Module for defining a ref holding the value of variable "i" defined at example.adb:5, created in Gnat2Why.Decls.Translate_Variable *)
module Example__increment__L_1__i
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val i [name:i] [model_projected]
  [model_trace:831] [sloc:example.adb:5]: int

end

(* Module for defining the loop exit exception for the loop "L_1" defined at example.adb:5, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Example__increment__L_1
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  --pp_exception_declaration NOT IMPLEMENTED

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_18) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_14) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_15) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_16) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_17) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_14) = True) \/
          (Standard__integer.first <= Standard__integer.last))
       then
       (Standard__integer.dynamic_property Standard__integer.first
          Standard__integer.last ([mlw:proxy_symbol]
          [introduced] temp___expr_18))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_19) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_20) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving an empty axiom for the entity "i" defined at example.adb:5, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Example__increment__L_1__i___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "L_1" defined at example.adb:5, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Example__increment__L_1___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "x" defined at example.ads:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Example__increment__x___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "n" defined at example.ads:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Example__increment__n___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module for checking contracts and absence of run-time errors in subprogram "increment" defined at example.ads:7, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Example__increment__subprogram_def
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        _gnatprove_standard.Boolean
  use        Standard__integer
  use        Standard__natural___axiom
  use        Example__increment__x
  use        Example__increment__n
  use        Example__increment__L_1__i
  use        Example__increment__L_1
  use        Standard__natural___axiom
  use        Standard__integer___axiom
  use        Example__increment__L_1__i___axiom
  use        Example__increment__L_1___axiom
  use        Example__increment__x___axiom
  use        Example__increment__n___axiom
  
  function [GP_Subp:example.ads:7] [sloc:example.ads:7] def
    (__void_param : unit) requires { True } ensures 
    { ([sloc:example.ads:11] ([GP_Reason:VC_POSTCONDITION]
                             [GP_Shape:pragargs__cmp]
                             [GP_Sloc:example.ads:11:18]
                             [comment:      Post    => X = X'Old + N;                  ^ example.ads:11:18:VC_POSTCONDITION]
                             [model_vc_post]
                             [GP_Id:3] ([GP_Sloc:example.ads:11:18]
                                       [GP_Pretty_Ada:947] (!Example__increment__x.x
                                                              = (--pp_tagged NOT IMPLEMENTED
                                                                   + Example__increment__n.n))))) }
    returns
     = (* Assume dynamic invariants of inputs of the subprogram example.ads:7 *);
        assume
        { (Standard__natural___axiom.dynamic_invariant
             !Example__increment__x.x True False True True) };
        assume
        { (Standard__natural___axiom.dynamic_invariant
             Example__increment__n.n True False True True) };
        (* Assume moved pointers in outputs of the subprogram example.ads:7 *);
        (* Check for RTE in the Pre of the subprogram example.ads:7 *);
        abstract ensures
        { True } begin  (let _ =
                       (!Example__increment__x.x
                          <= ([sloc:example.ads:10] ([vc:annotation]
                                                    [GP_Sloc:example.ads:10:36]
                                                    [GP_Reason:VC_OVERFLOW_CHECK]
                                                    [comment:      Pre     => X <= Natural'Last - N,                                    ^ example.ads:10:36:VC_OVERFLOW_CHECK]
                                                    [GP_Id:2]
                                                    [GP_Shape:pragargs__cmp__sub] (
                                                    Standard__integer.range_check_
                                                      (2147483647
                                                         - Example__increment__n.n)))))
                       in ())  end;
        (* Assume Pre of the subprogram example.ads:7 *);
        assume
        { ([GP_Pretty_Ada:934] (!Example__increment__x.x
                                  <= (2147483647 - Example__increment__n.n))) };
        (let ([mlw:proxy_symbol] [introduced] temp___old_164) =
        !Example__increment__x.x in (try
        ();
          ([sloc:example.adb:5] ());
          ();
          ([GP_Sloc:example.adb:5:23] ([sloc:example.adb:5] (let ([mlw:proxy_symbol]
                                      [introduced] temp___161) = 1 in
                                      (let ([mlw:proxy_symbol]
                                      [introduced] temp___162) =
                                      Example__increment__n.n in (
                                      Example__increment__L_1__i.i :=
                                      ([mlw:proxy_symbol]
                                        [introduced] temp___161));
                                      (* Translation of an Ada loop from example.adb:5 *);
                                      (if
                                      (_gnatprove_standard.Boolean.andb
                                         (([mlw:proxy_symbol]
                                            [introduced] temp___161)
                                            <= !Example__increment__L_1__i.i)
                                         (!Example__increment__L_1__i.i
                                            <= ([mlw:proxy_symbol]
                                            [introduced] temp___162)))
                                      then
                                      (try
                                      (* While loop translating the Ada loop from example.adb:5 *);
                                        ([sloc:example.adb:5] loop
                                                                (* Check for absence of RTE in the loop invariant and variant *)
                                                                
                                                                
                                                                (* Assume implicit invariants from the loop example.adb:5 *);
                                                                assume
                                                                { (_gnatprove_standard.Boolean.andb
                                                                    (True /\
                                                                    (Standard__natural___axiom.dynamic_invariant
                                                                    !Example__increment__x.x
                                                                    True True
                                                                    True True)
                                                                    /\ True
                                                                    /\ True)
                                                                    ((1
                                                                    <= !Example__increment__L_1__i.i)
                                                                    /\
                                                                    (!Example__increment__L_1__i.i
                                                                    <= Example__increment__n.n))) };
                                                                (* Continuation of loop after loop invariant and variant *);
                                                                ();
                                                                ([GP_Sloc:example.adb:6:12] 
                                                                ([sloc:example.adb:6] (
                                                                Example__increment__x.x
                                                                :=
                                                                ( ([sloc:example.adb:6] 
                                                                  ([GP_Shape:L_1_while__x_assign__add]
                                                                  [vc:annotation]
                                                                  [GP_Reason:VC_OVERFLOW_CHECK]
                                                                  [comment:         x := X+1;                ^ example.adb:6:16:VC_OVERFLOW_CHECK]
                                                                  [GP_Id:0]
                                                                  [GP_Sloc:example.adb:6:16] (
                                                                  Standard__integer.range_check_
                                                                    (
                                                                    !Example__increment__x.x
                                                                    + 1))))))));
                                                                (* Check for the exit condition and loop statements appearing before the loop invariant of loop example.adb:5 *);
                                                                (if
                                                                (!Example__increment__L_1__i.i
                                                                   = ([mlw:proxy_symbol]
                                                                   [introduced] temp___162))
                                                                then
                                                                raise Example__increment__L_1.L_1
                                                                );
                                                                ([sloc:example.adb:5] (
                                                                Example__increment__L_1__i.i
                                                                :=
                                                                (!Example__increment__L_1__i.i
                                                                   + 1)))
                                                                 end loop) with
                                      | Example__increment__L_1.L_1  -> ()) )))));
          raise Return__exc with | Return__exc  -> ());
        abstract ensures
        { True } begin  (let _ =
                       (!Example__increment__x.x
                          = ([sloc:example.ads:11] ([GP_Sloc:example.ads:11:28]
                                                   [vc:annotation]
                                                   [GP_Reason:VC_OVERFLOW_CHECK]
                                                   [comment:      Post    => X = X'Old + N;                            ^ example.ads:11:28:VC_OVERFLOW_CHECK]
                                                   [GP_Shape:pragargs__cmp__add]
                                                   [GP_Id:1] (Standard__integer.range_check_
                                                                (([mlw:proxy_symbol]
                                                                   [introduced] temp___old_164)
                                                                   + Example__increment__n.n)))))
                       in ())  end)

end
